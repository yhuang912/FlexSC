package compiledlib;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CircuitOram<t__T, T extends IWritable<T,t__T>> {
	public Block<t__T, T>[][] buckets;
	public int cnt;
	public Block<t__T, T>[] stash;

	public CompEnv<t__T> env;
	public IntegerLib<t__T> intLib;
	public FloatLib<t__T> floatLib;
	private T factoryT;
	private int n;

	public CircuitOram(CompEnv<t__T> env, int n, T factoryT, Block<t__T, T>[][] buckets, Block<t__T, T>[] stash) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<t__T>(env);
		this.floatLib = new FloatLib<t__T>(env, 24, 8);
		this.n = n;
		this.factoryT = factoryT;
		this.buckets = buckets;
		this.cnt = 0;
		this.stash = stash;
	}

	public T ReadAndRemove(t__T[] id, t__T[] pos, t__T __isPhantom) throws Exception {
		id = intLib.mux(id, env.inputOfAlice(Utils.fromInt(0, n)), __isPhantom);
		pos = intLib.mux(pos, intLib.randBools(n), __isPhantom);
		int p_pos = 0;
		int lvl = 0;
		T res = factoryT.newObj(null);
		int i = 0;
		int idx = 0;
		int j = 0;
		p_pos = p_pos;
		int f_tmp_0 = 1;
		int __tmp0 = f_tmp_0;
		int f_tmp_1 = __tmp0 << n;
		int __tmp1 = f_tmp_1;
		int f_tmp_2 = 1;
		int __tmp2 = f_tmp_2;
		int f_tmp_3 = __tmp1 - __tmp2;
		int __tmp3 = f_tmp_3;
		lvl = __tmp3;
		int f_tmp_4 = lvl + p_pos;
		int __tmp4 = f_tmp_4;
		i = __tmp4;
		int f_tmp_5 = 0;
		int __tmp5 = f_tmp_5;
		boolean f_tmp_6 = i >= __tmp5;
		boolean __tmp6 = f_tmp_6;
		while(__tmp6) {
			int f_tmp_7 = lvl + p_pos;
			int __tmp7 = f_tmp_7;
			idx = __tmp7;
			int f_tmp_8 = 0;
			int __tmp8 = f_tmp_8;
			j = __tmp8;
			int f_tmp_9 = 3;
			int __tmp9 = f_tmp_9;
			boolean f_tmp_10 = j < __tmp9;
			boolean __tmp10 = f_tmp_10;
			while(__tmp10) {
				Block<t__T, T>[][] f_tmp_11 = this.buckets;
				Block<t__T, T>[][] __tmp11 = f_tmp_11;
				Block<t__T, T>[] f_tmp_12 = __tmp11[i];
				Block<t__T, T>[] __tmp12 = f_tmp_12;
				Block<t__T, T> f_tmp_13 = __tmp12[j];
				Block<t__T, T> __tmp13 = f_tmp_13;
				t__T f_tmp_14 = __tmp13.isDummy;
				t__T __tmp14 = f_tmp_14;
				t__T f_tmp_15 = intLib.not(__tmp14);
				t__T __tmp16 = f_tmp_15;
				t__T f_tmp_16 = intLib.and(__isPhantom,__tmp16);
				t__T __tmp17 = f_tmp_16;
				Block<t__T, T>[][] f_tmp_17 = this.buckets;
				Block<t__T, T>[][] __tmp18 = f_tmp_17;
				Block<t__T, T>[] f_tmp_18 = __tmp18[i];
				Block<t__T, T>[] __tmp19 = f_tmp_18;
				Block<t__T, T> f_tmp_19 = __tmp19[j];
				Block<t__T, T> __tmp20 = f_tmp_19;
				t__T[] f_tmp_20 = __tmp20.id;
				t__T[] __tmp21 = f_tmp_20;
				t__T f_tmp_21 = intLib.eq(__tmp21, id);
				t__T __tmp22 = f_tmp_21;
				t__T f_tmp_22 = intLib.and(__tmp17,__tmp22);
				t__T __tmp23 = f_tmp_22;
				Block<t__T, T>[][] f_tmp_23 = this.buckets;
				Block<t__T, T>[][] __tmp24 = f_tmp_23;
				Block<t__T, T>[] f_tmp_24 = __tmp24[i];
				Block<t__T, T>[] __tmp25 = f_tmp_24;
				Block<t__T, T> f_tmp_25 = __tmp25[j];
				Block<t__T, T> __tmp26 = f_tmp_25;
				T f_tmp_26 = __tmp26.data;
				T __tmp27 = f_tmp_26;
				T __tmp28 = this.factoryT.newObj(intLib.mux(res.getBits(), __tmp27.getBits(),__tmp23));
				res = __tmp28;
				boolean f_tmp_28 = true;
				boolean __tmp29 = f_tmp_28;
				Block<t__T, T>[][] f_tmp_29 = this.buckets;
				Block<t__T, T>[][] __tmp30 = f_tmp_29;
				Block<t__T, T>[] f_tmp_30 = __tmp30[i];
				Block<t__T, T>[] __tmp31 = f_tmp_30;
				Block<t__T, T> f_tmp_31 = __tmp31[j];
				Block<t__T, T> __tmp32 = f_tmp_31;
				t__T f_tmp_32 = __tmp32.isDummy;
				t__T __tmp33 = f_tmp_32;
				t__T f_tmp_34 = env.inputOfAlice(__tmp29);
				t__T __tmp34 = intLib.mux(__tmp33, f_tmp_34,__tmp23);
				__tmp32.isDummy = __tmp34;
				int f_tmp_35 = 1;
				int __tmp35 = f_tmp_35;
				int f_tmp_36 = j + __tmp35;
				int __tmp36 = f_tmp_36;
				j = __tmp36;
				int f_tmp_37 = 3;
				__tmp9 = f_tmp_37;
				boolean f_tmp_38 = j < __tmp9;
				__tmp10 = f_tmp_38;
			}
			int f_tmp_39 = 1;
			int __tmp37 = f_tmp_39;
			int f_tmp_40 = i - __tmp37;
			int __tmp38 = f_tmp_40;
			int f_tmp_41 = 2;
			int __tmp39 = f_tmp_41;
			int f_tmp_42 = __tmp38 / __tmp39;
			int __tmp40 = f_tmp_42;
			i = __tmp40;
			int f_tmp_43 = 0;
			__tmp5 = f_tmp_43;
			boolean f_tmp_44 = i >= __tmp5;
			__tmp6 = f_tmp_44;
		}
		int f_tmp_45 = 0;
		int __tmp41 = f_tmp_45;
		i = __tmp41;
		int f_tmp_46 = 33;
		int __tmp42 = f_tmp_46;
		boolean f_tmp_47 = i < __tmp42;
		boolean __tmp43 = f_tmp_47;
		while(__tmp43) {
			Block<t__T, T>[] f_tmp_48 = this.stash;
			Block<t__T, T>[] __tmp44 = f_tmp_48;
			Block<t__T, T> f_tmp_49 = __tmp44[i];
			Block<t__T, T> __tmp45 = f_tmp_49;
			t__T f_tmp_50 = __tmp45.isDummy;
			t__T __tmp46 = f_tmp_50;
			t__T f_tmp_51 = intLib.not(__tmp46);
			t__T __tmp48 = f_tmp_51;
			t__T f_tmp_52 = intLib.and(__isPhantom,__tmp48);
			t__T __tmp49 = f_tmp_52;
			Block<t__T, T>[] f_tmp_53 = this.stash;
			Block<t__T, T>[] __tmp50 = f_tmp_53;
			Block<t__T, T> f_tmp_54 = __tmp50[i];
			Block<t__T, T> __tmp51 = f_tmp_54;
			t__T[] f_tmp_55 = __tmp51.id;
			t__T[] __tmp52 = f_tmp_55;
			t__T f_tmp_56 = intLib.eq(__tmp52, id);
			t__T __tmp53 = f_tmp_56;
			t__T f_tmp_57 = intLib.and(__tmp49,__tmp53);
			t__T __tmp54 = f_tmp_57;
			Block<t__T, T>[] f_tmp_58 = this.stash;
			Block<t__T, T>[] __tmp55 = f_tmp_58;
			Block<t__T, T> f_tmp_59 = __tmp55[i];
			Block<t__T, T> __tmp56 = f_tmp_59;
			T f_tmp_60 = __tmp56.data;
			T __tmp57 = f_tmp_60;
			T __tmp58 = this.factoryT.newObj(intLib.mux(res.getBits(), __tmp57.getBits(),__tmp54));
			res = __tmp58;
			boolean f_tmp_62 = true;
			boolean __tmp59 = f_tmp_62;
			Block<t__T, T>[] f_tmp_63 = this.stash;
			Block<t__T, T>[] __tmp60 = f_tmp_63;
			Block<t__T, T> f_tmp_64 = __tmp60[i];
			Block<t__T, T> __tmp61 = f_tmp_64;
			t__T f_tmp_65 = __tmp61.isDummy;
			t__T __tmp62 = f_tmp_65;
			t__T f_tmp_67 = env.inputOfAlice(__tmp59);
			t__T __tmp63 = intLib.mux(__tmp62, f_tmp_67,__tmp54);
			__tmp61.isDummy = __tmp63;
			int f_tmp_68 = 1;
			int __tmp64 = f_tmp_68;
			int f_tmp_69 = i + __tmp64;
			int __tmp65 = f_tmp_69;
			i = __tmp65;
			int f_tmp_70 = 33;
			__tmp42 = f_tmp_70;
			boolean f_tmp_71 = i < __tmp42;
			__tmp43 = f_tmp_71;
		}
		return res;

	}
}
