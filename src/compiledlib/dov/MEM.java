package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class MEM implements IWritable<MEM, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public MEM(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public MEM newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		MEM ret = new MEM(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] getInst(SecureArray<Boolean> instBank, Boolean[] pc, int pcOffset) throws Exception {
		Boolean[] index = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] newInst = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] f_tmp_1 = env.inputOfAlice(Utils.fromInt(pcOffset, 32));
		Boolean[] f_tmp_0 = intLib.sub(pc,f_tmp_1);
		Boolean[] __tmp0 = f_tmp_0;
		int f_tmp_2 = 2;
		int __tmp1 = f_tmp_2;
		Boolean[] f_tmp_3 = intLib.rightPublicShift(__tmp0, __tmp1);
		Boolean[] __tmp2 = f_tmp_3;
		index = __tmp2;
		Boolean[] f_tmp_4 = instBank.read(index);
		Boolean[] __tmp3 = f_tmp_4;
		newInst = __tmp3;
		return newInst;
	}
	public void func(SecureArray<Boolean> reg, SecureArray<Boolean> mem, Boolean[] inst, int dataOffset) throws Exception {
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] tmpAddress = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] tmpindex = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] tempRT = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] byteShiftTwo = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] byteShiftOne = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_5 = 11;
		int __tmp4 = f_tmp_5;
		Boolean[] f_tmp_6 = intLib.leftPublicShift(inst, __tmp4);
		Boolean[] __tmp5 = f_tmp_6;
		int f_tmp_7 = 27;
		int __tmp6 = f_tmp_7;
		Boolean[] f_tmp_8 = intLib.rightPublicShift(__tmp5, __tmp6);
		Boolean[] __tmp7 = f_tmp_8;
		rt = __tmp7;
		int f_tmp_9 = 6;
		int __tmp8 = f_tmp_9;
		Boolean[] f_tmp_10 = intLib.leftPublicShift(inst, __tmp8);
		Boolean[] __tmp9 = f_tmp_10;
		int f_tmp_11 = 27;
		int __tmp10 = f_tmp_11;
		Boolean[] f_tmp_12 = intLib.rightPublicShift(__tmp9, __tmp10);
		Boolean[] __tmp11 = f_tmp_12;
		rs = __tmp11;
		int f_tmp_13 = 16;
		int __tmp12 = f_tmp_13;
		Boolean[] f_tmp_14 = intLib.leftPublicShift(inst, __tmp12);
		Boolean[] __tmp13 = f_tmp_14;
		int f_tmp_15 = 16;
		int __tmp14 = f_tmp_15;
		Boolean[] f_tmp_16 = intLib.rightPublicShift(__tmp13, __tmp14);
		Boolean[] __tmp15 = f_tmp_16;
		unsignExt = __tmp15;
		int f_tmp_17 = 15;
		int __tmp16 = f_tmp_17;
		Boolean[] f_tmp_18 = intLib.rightPublicShift(unsignExt, __tmp16);
		Boolean[] __tmp17 = f_tmp_18;
		int f_tmp_19 = 1;
		int __tmp18 = f_tmp_19;
		Boolean[] f_tmp_21 = env.inputOfAlice(Utils.fromInt(__tmp18, 32));
		Boolean f_tmp_20 = intLib.eq(__tmp17, f_tmp_21);
		Boolean __tmp19 = f_tmp_20;
		int f_tmp_22 = -65536;
		int __tmp20 = f_tmp_22;
		Boolean[] f_tmp_24 = env.inputOfAlice(Utils.fromInt(__tmp20, 32));
		Boolean[] f_tmp_23 = intLib.add(unsignExt,f_tmp_24);
		Boolean[] __tmp21 = f_tmp_23;
		Boolean[] f_tmp_25 = intLib.mux(unsignExt, __tmp21,__tmp19);
		Boolean[] __tmp22 = f_tmp_25;
		unsignExt = __tmp22;
		Boolean f_tmp_26 = intLib.not(__tmp19);
		Boolean __tmp23 = f_tmp_26;
		int f_tmp_27 = 26;
		int __tmp24 = f_tmp_27;
		Boolean[] f_tmp_28 = intLib.rightPublicShift(inst, __tmp24);
		Boolean[] __tmp25 = f_tmp_28;
		op = __tmp25;
		Boolean[] f_tmp_29 = reg.read(rs);
		Boolean[] __tmp26 = f_tmp_29;
		Boolean[] f_tmp_30 = intLib.add(__tmp26,unsignExt);
		Boolean[] __tmp27 = f_tmp_30;
		Boolean[] f_tmp_32 = env.inputOfAlice(Utils.fromInt(dataOffset, 32));
		Boolean[] f_tmp_31 = intLib.sub(__tmp27,f_tmp_32);
		Boolean[] __tmp28 = f_tmp_31;
		tmpAddress = __tmp28;
		int f_tmp_33 = 2;
		int __tmp29 = f_tmp_33;
		Boolean[] f_tmp_34 = intLib.rightPublicShift(tmpAddress, __tmp29);
		Boolean[] __tmp30 = f_tmp_34;
		tmpindex = __tmp30;
		int f_tmp_35 = 35;
		int __tmp31 = f_tmp_35;
		Boolean[] f_tmp_37 = env.inputOfAlice(Utils.fromInt(__tmp31, 32));
		Boolean f_tmp_36 = intLib.eq(op, f_tmp_37);
		Boolean __tmp32 = f_tmp_36;
		Boolean[] f_tmp_38 = mem.read(tmpindex);
		Boolean[] __tmp33 = f_tmp_38;
		Boolean[] f_tmp_39 = reg.read(rt);
		Boolean[] __tmp34 = f_tmp_39;
		Boolean[] f_tmp_40 = intLib.mux(__tmp34, __tmp33,__tmp32);
		Boolean[] __tmp35 = f_tmp_40;
		reg.write(rt,__tmp35);
		Boolean f_tmp_41 = intLib.not(__tmp32);
		Boolean __tmp36 = f_tmp_41;
		int f_tmp_42 = 43;
		int __tmp37 = f_tmp_42;
		Boolean[] f_tmp_44 = env.inputOfAlice(Utils.fromInt(__tmp37, 32));
		Boolean f_tmp_43 = intLib.eq(op, f_tmp_44);
		Boolean __tmp38 = f_tmp_43;
		Boolean f_tmp_45 = intLib.and(__tmp36,__tmp38);
		Boolean __tmp39 = f_tmp_45;
		Boolean[] f_tmp_46 = reg.read(rt);
		Boolean[] __tmp40 = f_tmp_46;
		Boolean[] f_tmp_47 = mem.read(tmpindex);
		Boolean[] __tmp41 = f_tmp_47;
		Boolean[] f_tmp_48 = intLib.mux(__tmp41, __tmp40,__tmp39);
		Boolean[] __tmp42 = f_tmp_48;
		mem.write(tmpindex,__tmp42);
		Boolean f_tmp_49 = intLib.not(__tmp38);
		Boolean __tmp43 = f_tmp_49;
		Boolean f_tmp_50 = intLib.and(__tmp36,__tmp43);
		Boolean __tmp44 = f_tmp_50;
		int f_tmp_51 = 32;
		int __tmp45 = f_tmp_51;
		Boolean[] f_tmp_53 = env.inputOfAlice(Utils.fromInt(__tmp45, 32));
		Boolean f_tmp_52 = intLib.eq(op, f_tmp_53);
		Boolean __tmp46 = f_tmp_52;
		Boolean f_tmp_54 = intLib.and(__tmp44,__tmp46);
		Boolean __tmp47 = f_tmp_54;
		Boolean[] f_tmp_55 = mem.read(tmpindex);
		Boolean[] __tmp48 = f_tmp_55;
		Boolean[] f_tmp_56 = intLib.mux(tempRT, __tmp48,__tmp47);
		Boolean[] __tmp49 = f_tmp_56;
		tempRT = __tmp49;
		int f_tmp_57 = 30;
		int __tmp50 = f_tmp_57;
		Boolean[] f_tmp_58 = intLib.leftPublicShift(tmpAddress, __tmp50);
		Boolean[] __tmp51 = f_tmp_58;
		int f_tmp_59 = 31;
		int __tmp52 = f_tmp_59;
		Boolean[] f_tmp_60 = intLib.rightPublicShift(__tmp51, __tmp52);
		Boolean[] __tmp53 = f_tmp_60;
		Boolean[] f_tmp_61 = intLib.mux(byteShiftTwo, __tmp53,__tmp47);
		Boolean[] __tmp54 = f_tmp_61;
		byteShiftTwo = __tmp54;
		int f_tmp_62 = 31;
		int __tmp55 = f_tmp_62;
		Boolean[] f_tmp_63 = intLib.leftPublicShift(tmpAddress, __tmp55);
		Boolean[] __tmp56 = f_tmp_63;
		int f_tmp_64 = 31;
		int __tmp57 = f_tmp_64;
		Boolean[] f_tmp_65 = intLib.rightPublicShift(__tmp56, __tmp57);
		Boolean[] __tmp58 = f_tmp_65;
		Boolean[] f_tmp_66 = intLib.mux(byteShiftOne, __tmp58,__tmp47);
		Boolean[] __tmp59 = f_tmp_66;
		byteShiftOne = __tmp59;
		int f_tmp_67 = 0;
		int __tmp60 = f_tmp_67;
		Boolean[] f_tmp_69 = env.inputOfAlice(Utils.fromInt(__tmp60, 32));
		Boolean f_tmp_68 = intLib.not(intLib.eq(byteShiftTwo, f_tmp_69));
		Boolean __tmp61 = f_tmp_68;
		int f_tmp_70 = 0;
		int __tmp62 = f_tmp_70;
		Boolean[] f_tmp_72 = env.inputOfAlice(Utils.fromInt(__tmp62, 32));
		Boolean f_tmp_71 = intLib.not(intLib.eq(byteShiftOne, f_tmp_72));
		Boolean __tmp63 = f_tmp_71;
		Boolean f_tmp_73 = intLib.and(__tmp61,__tmp63);
		Boolean __tmp64 = f_tmp_73;
		Boolean f_tmp_74 = intLib.and(__tmp47,__tmp64);
		Boolean __tmp65 = f_tmp_74;
		int f_tmp_75 = 24;
		int __tmp66 = f_tmp_75;
		Boolean[] f_tmp_76 = intLib.leftPublicShift(tempRT, __tmp66);
		Boolean[] __tmp67 = f_tmp_76;
		int f_tmp_77 = 24;
		int __tmp68 = f_tmp_77;
		Boolean[] f_tmp_78 = intLib.rightPublicShift(__tmp67, __tmp68);
		Boolean[] __tmp69 = f_tmp_78;
		Boolean[] f_tmp_79 = intLib.mux(tempRT, __tmp69,__tmp65);
		Boolean[] __tmp70 = f_tmp_79;
		tempRT = __tmp70;
		Boolean f_tmp_80 = intLib.not(__tmp64);
		Boolean __tmp71 = f_tmp_80;
		Boolean f_tmp_81 = intLib.and(__tmp47,__tmp71);
		Boolean __tmp72 = f_tmp_81;
		int f_tmp_82 = 0;
		int __tmp73 = f_tmp_82;
		Boolean[] f_tmp_84 = env.inputOfAlice(Utils.fromInt(__tmp73, 32));
		Boolean f_tmp_83 = intLib.not(intLib.eq(byteShiftTwo, f_tmp_84));
		Boolean __tmp74 = f_tmp_83;
		int f_tmp_85 = 0;
		int __tmp75 = f_tmp_85;
		Boolean[] f_tmp_87 = env.inputOfAlice(Utils.fromInt(__tmp75, 32));
		Boolean f_tmp_86 = intLib.eq(byteShiftOne, f_tmp_87);
		Boolean __tmp76 = f_tmp_86;
		Boolean f_tmp_88 = intLib.and(__tmp74,__tmp76);
		Boolean __tmp77 = f_tmp_88;
		Boolean f_tmp_89 = intLib.and(__tmp72,__tmp77);
		Boolean __tmp78 = f_tmp_89;
		int f_tmp_90 = 16;
		int __tmp79 = f_tmp_90;
		Boolean[] f_tmp_91 = intLib.leftPublicShift(tempRT, __tmp79);
		Boolean[] __tmp80 = f_tmp_91;
		int f_tmp_92 = 24;
		int __tmp81 = f_tmp_92;
		Boolean[] f_tmp_93 = intLib.rightPublicShift(__tmp80, __tmp81);
		Boolean[] __tmp82 = f_tmp_93;
		Boolean[] f_tmp_94 = intLib.mux(tempRT, __tmp82,__tmp78);
		Boolean[] __tmp83 = f_tmp_94;
		tempRT = __tmp83;
		Boolean f_tmp_95 = intLib.not(__tmp77);
		Boolean __tmp84 = f_tmp_95;
		Boolean f_tmp_96 = intLib.and(__tmp72,__tmp84);
		Boolean __tmp85 = f_tmp_96;
		int f_tmp_97 = 0;
		int __tmp86 = f_tmp_97;
		Boolean[] f_tmp_99 = env.inputOfAlice(Utils.fromInt(__tmp86, 32));
		Boolean f_tmp_98 = intLib.eq(byteShiftTwo, f_tmp_99);
		Boolean __tmp87 = f_tmp_98;
		int f_tmp_100 = 0;
		int __tmp88 = f_tmp_100;
		Boolean[] f_tmp_102 = env.inputOfAlice(Utils.fromInt(__tmp88, 32));
		Boolean f_tmp_101 = intLib.not(intLib.eq(byteShiftOne, f_tmp_102));
		Boolean __tmp89 = f_tmp_101;
		Boolean f_tmp_103 = intLib.and(__tmp87,__tmp89);
		Boolean __tmp90 = f_tmp_103;
		Boolean f_tmp_104 = intLib.and(__tmp85,__tmp90);
		Boolean __tmp91 = f_tmp_104;
		int f_tmp_105 = 8;
		int __tmp92 = f_tmp_105;
		Boolean[] f_tmp_106 = intLib.leftPublicShift(tempRT, __tmp92);
		Boolean[] __tmp93 = f_tmp_106;
		int f_tmp_107 = 24;
		int __tmp94 = f_tmp_107;
		Boolean[] f_tmp_108 = intLib.rightPublicShift(__tmp93, __tmp94);
		Boolean[] __tmp95 = f_tmp_108;
		Boolean[] f_tmp_109 = intLib.mux(tempRT, __tmp95,__tmp91);
		Boolean[] __tmp96 = f_tmp_109;
		tempRT = __tmp96;
		Boolean f_tmp_110 = intLib.not(__tmp90);
		Boolean __tmp97 = f_tmp_110;
		Boolean f_tmp_111 = intLib.and(__tmp85,__tmp97);
		Boolean __tmp98 = f_tmp_111;
		int f_tmp_112 = 0;
		int __tmp99 = f_tmp_112;
		Boolean[] f_tmp_114 = env.inputOfAlice(Utils.fromInt(__tmp99, 32));
		Boolean f_tmp_113 = intLib.eq(byteShiftTwo, f_tmp_114);
		Boolean __tmp100 = f_tmp_113;
		int f_tmp_115 = 0;
		int __tmp101 = f_tmp_115;
		Boolean[] f_tmp_117 = env.inputOfAlice(Utils.fromInt(__tmp101, 32));
		Boolean f_tmp_116 = intLib.eq(byteShiftOne, f_tmp_117);
		Boolean __tmp102 = f_tmp_116;
		Boolean f_tmp_118 = intLib.and(__tmp100,__tmp102);
		Boolean __tmp103 = f_tmp_118;
		Boolean f_tmp_119 = intLib.and(__tmp98,__tmp103);
		Boolean __tmp104 = f_tmp_119;
		int f_tmp_120 = 24;
		int __tmp105 = f_tmp_120;
		Boolean[] f_tmp_121 = intLib.rightPublicShift(tempRT, __tmp105);
		Boolean[] __tmp106 = f_tmp_121;
		Boolean[] f_tmp_122 = intLib.mux(tempRT, __tmp106,__tmp104);
		Boolean[] __tmp107 = f_tmp_122;
		tempRT = __tmp107;
		Boolean f_tmp_123 = intLib.not(__tmp103);
		Boolean __tmp108 = f_tmp_123;
		Boolean f_tmp_124 = intLib.and(__tmp98,__tmp108);
		Boolean __tmp109 = f_tmp_124;
		Boolean[] f_tmp_125 = reg.read(rt);
		Boolean[] __tmp110 = f_tmp_125;
		Boolean[] f_tmp_126 = intLib.mux(__tmp110, tempRT,__tmp47);
		Boolean[] __tmp111 = f_tmp_126;
		reg.write(rt,__tmp111);
		Boolean f_tmp_127 = intLib.not(__tmp46);
		Boolean __tmp112 = f_tmp_127;
		Boolean f_tmp_128 = intLib.and(__tmp44,__tmp112);
		Boolean __tmp113 = f_tmp_128;

	}
}
