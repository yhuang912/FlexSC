package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public CPU(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean checkTerminate(Boolean[] inst) throws Exception {
		Boolean res = env.inputOfAlice(false);
		boolean f_tmp_0 = false;
		boolean __tmp0 = f_tmp_0;
		res = env.inputOfAlice(__tmp0);
		int f_tmp_1 = 268437280;
		int __tmp1 = f_tmp_1;
		Boolean[] f_tmp_3 = env.inputOfAlice(Utils.fromInt(__tmp1, 32));
		Boolean f_tmp_2 = intLib.eq(inst, f_tmp_3);
		Boolean __tmp2 = f_tmp_2;
		boolean f_tmp_4 = true;
		boolean __tmp3 = f_tmp_4;
		Boolean f_tmp_6 = env.inputOfAlice(__tmp3);
		Boolean f_tmp_5 = intLib.mux(res, f_tmp_6,__tmp2);
		Boolean __tmp4 = f_tmp_5;
		res = __tmp4;
		Boolean f_tmp_7 = intLib.not(__tmp2);
		Boolean __tmp5 = f_tmp_7;
		return res;
	}
	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_8 = 26;
		int __tmp6 = f_tmp_8;
		Boolean[] f_tmp_9 = intLib.rightPublicShift(inst, __tmp6);
		Boolean[] __tmp7 = f_tmp_9;
		op = __tmp7;
		int f_tmp_10 = 11;
		int __tmp8 = f_tmp_10;
		Boolean[] f_tmp_11 = intLib.leftPublicShift(inst, __tmp8);
		Boolean[] __tmp9 = f_tmp_11;
		int f_tmp_12 = 27;
		int __tmp10 = f_tmp_12;
		Boolean[] f_tmp_13 = intLib.rightPublicShift(__tmp9, __tmp10);
		Boolean[] __tmp11 = f_tmp_13;
		rt = __tmp11;
		int f_tmp_14 = 6;
		int __tmp12 = f_tmp_14;
		Boolean[] f_tmp_15 = intLib.leftPublicShift(inst, __tmp12);
		Boolean[] __tmp13 = f_tmp_15;
		int f_tmp_16 = 27;
		int __tmp14 = f_tmp_16;
		Boolean[] f_tmp_17 = intLib.rightPublicShift(__tmp13, __tmp14);
		Boolean[] __tmp15 = f_tmp_17;
		rs = __tmp15;
		int f_tmp_18 = 16;
		int __tmp16 = f_tmp_18;
		Boolean[] f_tmp_19 = intLib.leftPublicShift(inst, __tmp16);
		Boolean[] __tmp17 = f_tmp_19;
		int f_tmp_20 = 27;
		int __tmp18 = f_tmp_20;
		Boolean[] f_tmp_21 = intLib.rightPublicShift(__tmp17, __tmp18);
		Boolean[] __tmp19 = f_tmp_21;
		rd = __tmp19;
		int f_tmp_22 = 16;
		int __tmp20 = f_tmp_22;
		Boolean[] f_tmp_23 = intLib.leftPublicShift(inst, __tmp20);
		Boolean[] __tmp21 = f_tmp_23;
		int f_tmp_24 = 16;
		int __tmp22 = f_tmp_24;
		Boolean[] f_tmp_25 = intLib.rightPublicShift(__tmp21, __tmp22);
		Boolean[] __tmp23 = f_tmp_25;
		unsignExt = __tmp23;
		zeroExt = unsignExt;
		int f_tmp_26 = 0;
		int __tmp24 = f_tmp_26;
		funct = env.inputOfAlice(Utils.fromInt(__tmp24, 32));
		int f_tmp_27 = 15;
		int __tmp25 = f_tmp_27;
		Boolean[] f_tmp_28 = intLib.rightPublicShift(unsignExt, __tmp25);
		Boolean[] __tmp26 = f_tmp_28;
		int f_tmp_29 = 0;
		int __tmp27 = f_tmp_29;
		Boolean[] f_tmp_31 = env.inputOfAlice(Utils.fromInt(__tmp27, 32));
		Boolean f_tmp_30 = intLib.not(intLib.eq(__tmp26, f_tmp_31));
		Boolean __tmp28 = f_tmp_30;
		int f_tmp_32 = -65536;
		int __tmp29 = f_tmp_32;
		Boolean[] f_tmp_34 = env.inputOfAlice(Utils.fromInt(__tmp29, 32));
		Boolean[] f_tmp_33 = intLib.add(unsignExt,f_tmp_34);
		Boolean[] __tmp30 = f_tmp_33;
		Boolean[] f_tmp_35 = intLib.mux(unsignExt, __tmp30,__tmp28);
		Boolean[] __tmp31 = f_tmp_35;
		unsignExt = __tmp31;
		Boolean f_tmp_36 = intLib.not(__tmp28);
		Boolean __tmp32 = f_tmp_36;
		Boolean[] f_tmp_37 = reg.read(rs);
		Boolean[] __tmp33 = f_tmp_37;
		reg_rs = __tmp33;
		Boolean[] f_tmp_38 = reg.read(rt);
		Boolean[] __tmp34 = f_tmp_38;
		reg_rt = __tmp34;
		int f_tmp_39 = 9;
		int __tmp35 = f_tmp_39;
		Boolean[] f_tmp_41 = env.inputOfAlice(Utils.fromInt(__tmp35, 32));
		Boolean f_tmp_40 = intLib.eq(op, f_tmp_41);
		Boolean __tmp36 = f_tmp_40;
		Boolean[] f_tmp_42 = intLib.add(reg_rs,unsignExt);
		Boolean[] __tmp37 = f_tmp_42;
		Boolean[] f_tmp_43 = reg.read(rt);
		Boolean[] __tmp38 = f_tmp_43;
		Boolean[] f_tmp_44 = intLib.mux(__tmp38, __tmp37,__tmp36);
		Boolean[] __tmp39 = f_tmp_44;
		reg.write(rt,__tmp39);
		Boolean f_tmp_45 = intLib.not(__tmp36);
		Boolean __tmp40 = f_tmp_45;
		int f_tmp_46 = 3;
		int __tmp41 = f_tmp_46;
		Boolean[] f_tmp_48 = env.inputOfAlice(Utils.fromInt(__tmp41, 32));
		Boolean f_tmp_47 = intLib.eq(op, f_tmp_48);
		Boolean __tmp42 = f_tmp_47;
		Boolean f_tmp_49 = intLib.and(__tmp40,__tmp42);
		Boolean __tmp43 = f_tmp_49;
		int f_tmp_50 = 8;
		int __tmp44 = f_tmp_50;
		Boolean[] f_tmp_52 = env.inputOfAlice(Utils.fromInt(__tmp44, 32));
		Boolean[] f_tmp_51 = intLib.add(pc,f_tmp_52);
		Boolean[] __tmp45 = f_tmp_51;
		int f_tmp_53 = 31;
		int __tmp46 = f_tmp_53;
		Boolean[] f_tmp_55 = env.inputOfAlice(Utils.fromInt(__tmp46, 32));
		Boolean[] f_tmp_54 = reg.read(f_tmp_55);
		Boolean[] __tmp47 = f_tmp_54;
		Boolean[] f_tmp_56 = intLib.mux(__tmp47, __tmp45,__tmp43);
		Boolean[] __tmp48 = f_tmp_56;
		Boolean[] f_tmp_57 = env.inputOfAlice(Utils.fromInt(__tmp46, 32));
		reg.write(f_tmp_57,__tmp48);
		int f_tmp_58 = 6;
		int __tmp49 = f_tmp_58;
		Boolean[] f_tmp_59 = intLib.leftPublicShift(inst, __tmp49);
		Boolean[] __tmp50 = f_tmp_59;
		int f_tmp_60 = 6;
		int __tmp51 = f_tmp_60;
		Boolean[] f_tmp_61 = intLib.rightPublicShift(__tmp50, __tmp51);
		Boolean[] __tmp52 = f_tmp_61;
		Boolean[] f_tmp_62 = intLib.mux(pc, __tmp52,__tmp43);
		Boolean[] __tmp53 = f_tmp_62;
		pc = __tmp53;
		Boolean f_tmp_63 = intLib.not(__tmp42);
		Boolean __tmp54 = f_tmp_63;
		Boolean f_tmp_64 = intLib.and(__tmp40,__tmp54);
		Boolean __tmp55 = f_tmp_64;
		int f_tmp_65 = 1;
		int __tmp56 = f_tmp_65;
		Boolean[] f_tmp_67 = env.inputOfAlice(Utils.fromInt(__tmp56, 32));
		Boolean f_tmp_66 = intLib.eq(op, f_tmp_67);
		Boolean __tmp57 = f_tmp_66;
		Boolean f_tmp_68 = intLib.and(__tmp55,__tmp57);
		Boolean __tmp58 = f_tmp_68;
		int f_tmp_69 = 8;
		int __tmp59 = f_tmp_69;
		Boolean[] f_tmp_71 = env.inputOfAlice(Utils.fromInt(__tmp59, 32));
		Boolean[] f_tmp_70 = intLib.add(pc,f_tmp_71);
		Boolean[] __tmp60 = f_tmp_70;
		int f_tmp_72 = 31;
		int __tmp61 = f_tmp_72;
		Boolean[] f_tmp_74 = env.inputOfAlice(Utils.fromInt(__tmp61, 32));
		Boolean[] f_tmp_73 = reg.read(f_tmp_74);
		Boolean[] __tmp62 = f_tmp_73;
		Boolean[] f_tmp_75 = intLib.mux(__tmp62, __tmp60,__tmp58);
		Boolean[] __tmp63 = f_tmp_75;
		Boolean[] f_tmp_76 = env.inputOfAlice(Utils.fromInt(__tmp61, 32));
		reg.write(f_tmp_76,__tmp63);
		int f_tmp_77 = 0;
		int __tmp64 = f_tmp_77;
		Boolean[] f_tmp_79 = env.inputOfAlice(Utils.fromInt(__tmp64, 32));
		Boolean f_tmp_78 = intLib.geq(reg_rt, f_tmp_79);
		Boolean __tmp65 = f_tmp_78;
		Boolean f_tmp_80 = intLib.and(__tmp58,__tmp65);
		Boolean __tmp66 = f_tmp_80;
		int f_tmp_81 = 2;
		int __tmp67 = f_tmp_81;
		Boolean[] f_tmp_82 = intLib.leftPublicShift(unsignExt, __tmp67);
		Boolean[] __tmp68 = f_tmp_82;
		Boolean[] f_tmp_83 = intLib.add(pc,__tmp68);
		Boolean[] __tmp69 = f_tmp_83;
		Boolean[] f_tmp_84 = intLib.mux(pc, __tmp69,__tmp66);
		Boolean[] __tmp70 = f_tmp_84;
		pc = __tmp70;
		Boolean f_tmp_85 = intLib.not(__tmp65);
		Boolean __tmp71 = f_tmp_85;
		Boolean f_tmp_86 = intLib.and(__tmp58,__tmp71);
		Boolean __tmp72 = f_tmp_86;
		Boolean f_tmp_87 = intLib.not(__tmp57);
		Boolean __tmp73 = f_tmp_87;
		Boolean f_tmp_88 = intLib.and(__tmp55,__tmp73);
		Boolean __tmp74 = f_tmp_88;
		int f_tmp_89 = 12;
		int __tmp75 = f_tmp_89;
		Boolean[] f_tmp_91 = env.inputOfAlice(Utils.fromInt(__tmp75, 32));
		Boolean f_tmp_90 = intLib.eq(op, f_tmp_91);
		Boolean __tmp76 = f_tmp_90;
		Boolean f_tmp_92 = intLib.and(__tmp74,__tmp76);
		Boolean __tmp77 = f_tmp_92;
		Boolean[] f_tmp_93 = intLib.and(reg_rs,zeroExt);
		Boolean[] __tmp78 = f_tmp_93;
		Boolean[] f_tmp_94 = reg.read(rt);
		Boolean[] __tmp79 = f_tmp_94;
		Boolean[] f_tmp_95 = intLib.mux(__tmp79, __tmp78,__tmp77);
		Boolean[] __tmp80 = f_tmp_95;
		reg.write(rt,__tmp80);
		Boolean f_tmp_96 = intLib.not(__tmp76);
		Boolean __tmp81 = f_tmp_96;
		Boolean f_tmp_97 = intLib.and(__tmp74,__tmp81);
		Boolean __tmp82 = f_tmp_97;
		int f_tmp_98 = 0;
		int __tmp83 = f_tmp_98;
		Boolean[] f_tmp_100 = env.inputOfAlice(Utils.fromInt(__tmp83, 32));
		Boolean f_tmp_99 = intLib.eq(op, f_tmp_100);
		Boolean __tmp84 = f_tmp_99;
		Boolean f_tmp_101 = intLib.and(__tmp82,__tmp84);
		Boolean __tmp85 = f_tmp_101;
		int f_tmp_102 = 26;
		int __tmp86 = f_tmp_102;
		Boolean[] f_tmp_103 = intLib.leftPublicShift(inst, __tmp86);
		Boolean[] __tmp87 = f_tmp_103;
		int f_tmp_104 = 26;
		int __tmp88 = f_tmp_104;
		Boolean[] f_tmp_105 = intLib.rightPublicShift(__tmp87, __tmp88);
		Boolean[] __tmp89 = f_tmp_105;
		Boolean[] f_tmp_106 = intLib.mux(funct, __tmp89,__tmp85);
		Boolean[] __tmp90 = f_tmp_106;
		funct = __tmp90;
		int f_tmp_107 = 33;
		int __tmp91 = f_tmp_107;
		Boolean[] f_tmp_109 = env.inputOfAlice(Utils.fromInt(__tmp91, 32));
		Boolean f_tmp_108 = intLib.eq(funct, f_tmp_109);
		Boolean __tmp92 = f_tmp_108;
		Boolean f_tmp_110 = intLib.and(__tmp85,__tmp92);
		Boolean __tmp93 = f_tmp_110;
		Boolean[] f_tmp_111 = intLib.add(reg_rs,reg_rt);
		Boolean[] __tmp94 = f_tmp_111;
		Boolean[] f_tmp_112 = intLib.mux(reg_rd, __tmp94,__tmp93);
		Boolean[] __tmp95 = f_tmp_112;
		reg_rd = __tmp95;
		Boolean f_tmp_113 = intLib.not(__tmp92);
		Boolean __tmp96 = f_tmp_113;
		Boolean f_tmp_114 = intLib.and(__tmp85,__tmp96);
		Boolean __tmp97 = f_tmp_114;
		int f_tmp_115 = 38;
		int __tmp98 = f_tmp_115;
		Boolean[] f_tmp_117 = env.inputOfAlice(Utils.fromInt(__tmp98, 32));
		Boolean f_tmp_116 = intLib.eq(funct, f_tmp_117);
		Boolean __tmp99 = f_tmp_116;
		Boolean f_tmp_118 = intLib.and(__tmp97,__tmp99);
		Boolean __tmp100 = f_tmp_118;
		Boolean[] f_tmp_119 = intLib.xor(reg_rs,reg_rt);
		Boolean[] __tmp101 = f_tmp_119;
		Boolean[] f_tmp_120 = intLib.mux(reg_rd, __tmp101,__tmp100);
		Boolean[] __tmp102 = f_tmp_120;
		reg_rd = __tmp102;
		Boolean f_tmp_121 = intLib.not(__tmp99);
		Boolean __tmp103 = f_tmp_121;
		Boolean f_tmp_122 = intLib.and(__tmp97,__tmp103);
		Boolean __tmp104 = f_tmp_122;
		int f_tmp_123 = 42;
		int __tmp105 = f_tmp_123;
		Boolean[] f_tmp_125 = env.inputOfAlice(Utils.fromInt(__tmp105, 32));
		Boolean f_tmp_124 = intLib.eq(funct, f_tmp_125);
		Boolean __tmp106 = f_tmp_124;
		Boolean f_tmp_126 = intLib.and(__tmp104,__tmp106);
		Boolean __tmp107 = f_tmp_126;
		Boolean f_tmp_127 = intLib.not(intLib.geq(reg_rs, reg_rt));
		Boolean __tmp108 = f_tmp_127;
		Boolean f_tmp_128 = intLib.and(__tmp107,__tmp108);
		Boolean __tmp109 = f_tmp_128;
		int f_tmp_129 = 1;
		int __tmp110 = f_tmp_129;
		Boolean[] f_tmp_131 = env.inputOfAlice(Utils.fromInt(__tmp110, 32));
		Boolean[] f_tmp_130 = intLib.mux(reg_rd, f_tmp_131,__tmp109);
		Boolean[] __tmp111 = f_tmp_130;
		reg_rd = __tmp111;
		Boolean f_tmp_132 = intLib.not(__tmp108);
		Boolean __tmp112 = f_tmp_132;
		Boolean f_tmp_133 = intLib.and(__tmp107,__tmp112);
		Boolean __tmp113 = f_tmp_133;
		int f_tmp_134 = 0;
		int __tmp114 = f_tmp_134;
		Boolean[] f_tmp_136 = env.inputOfAlice(Utils.fromInt(__tmp114, 32));
		Boolean[] f_tmp_135 = intLib.mux(reg_rd, f_tmp_136,__tmp113);
		Boolean[] __tmp115 = f_tmp_135;
		reg_rd = __tmp115;
		Boolean f_tmp_137 = intLib.not(__tmp106);
		Boolean __tmp116 = f_tmp_137;
		Boolean f_tmp_138 = intLib.and(__tmp104,__tmp116);
		Boolean __tmp117 = f_tmp_138;
		int f_tmp_139 = 35;
		int __tmp118 = f_tmp_139;
		Boolean[] f_tmp_141 = env.inputOfAlice(Utils.fromInt(__tmp118, 32));
		Boolean f_tmp_140 = intLib.eq(funct, f_tmp_141);
		Boolean __tmp119 = f_tmp_140;
		Boolean f_tmp_142 = intLib.and(__tmp117,__tmp119);
		Boolean __tmp120 = f_tmp_142;
		Boolean[] f_tmp_143 = intLib.sub(reg_rs,reg_rt);
		Boolean[] __tmp121 = f_tmp_143;
		Boolean[] f_tmp_144 = intLib.mux(reg_rd, __tmp121,__tmp120);
		Boolean[] __tmp122 = f_tmp_144;
		reg_rd = __tmp122;
		Boolean f_tmp_145 = intLib.not(__tmp119);
		Boolean __tmp123 = f_tmp_145;
		Boolean f_tmp_146 = intLib.and(__tmp117,__tmp123);
		Boolean __tmp124 = f_tmp_146;
		Boolean[] f_tmp_147 = reg.read(rd);
		Boolean[] __tmp125 = f_tmp_147;
		Boolean[] f_tmp_148 = intLib.mux(__tmp125, reg_rd,__tmp85);
		Boolean[] __tmp126 = f_tmp_148;
		reg.write(rd,__tmp126);
		Boolean f_tmp_149 = intLib.not(__tmp84);
		Boolean __tmp127 = f_tmp_149;
		Boolean f_tmp_150 = intLib.and(__tmp82,__tmp127);
		Boolean __tmp128 = f_tmp_150;
		Boolean[] f_tmp_151 = reg.read(rs);
		Boolean[] __tmp129 = f_tmp_151;
		reg_rs = __tmp129;
		Boolean[] f_tmp_152 = reg.read(rt);
		Boolean[] __tmp130 = f_tmp_152;
		reg_rt = __tmp130;
		int f_tmp_153 = 0;
		int __tmp131 = f_tmp_153;
		Boolean[] f_tmp_155 = env.inputOfAlice(Utils.fromInt(__tmp131, 32));
		Boolean f_tmp_154 = intLib.eq(op, f_tmp_155);
		Boolean __tmp132 = f_tmp_154;
		int f_tmp_156 = 8;
		int __tmp133 = f_tmp_156;
		Boolean[] f_tmp_158 = env.inputOfAlice(Utils.fromInt(__tmp133, 32));
		Boolean f_tmp_157 = intLib.eq(funct, f_tmp_158);
		Boolean __tmp134 = f_tmp_157;
		Boolean f_tmp_159 = intLib.and(__tmp132,__tmp134);
		Boolean __tmp135 = f_tmp_159;
		Boolean[] f_tmp_160 = intLib.mux(pc, reg_rs,__tmp135);
		Boolean[] __tmp136 = f_tmp_160;
		pc = __tmp136;
		Boolean f_tmp_161 = intLib.not(__tmp135);
		Boolean __tmp137 = f_tmp_161;
		int f_tmp_162 = 3;
		int __tmp138 = f_tmp_162;
		Boolean[] f_tmp_164 = env.inputOfAlice(Utils.fromInt(__tmp138, 32));
		Boolean f_tmp_163 = intLib.eq(op, f_tmp_164);
		Boolean __tmp139 = f_tmp_163;
		Boolean f_tmp_165 = intLib.and(__tmp137,__tmp139);
		Boolean __tmp140 = f_tmp_165;
		int f_tmp_166 = 6;
		int __tmp141 = f_tmp_166;
		Boolean[] f_tmp_167 = intLib.leftPublicShift(inst, __tmp141);
		Boolean[] __tmp142 = f_tmp_167;
		int f_tmp_168 = 6;
		int __tmp143 = f_tmp_168;
		Boolean[] f_tmp_169 = intLib.rightPublicShift(__tmp142, __tmp143);
		Boolean[] __tmp144 = f_tmp_169;
		Boolean[] f_tmp_170 = intLib.mux(pc, __tmp144,__tmp140);
		Boolean[] __tmp145 = f_tmp_170;
		pc = __tmp145;
		Boolean f_tmp_171 = intLib.not(__tmp139);
		Boolean __tmp146 = f_tmp_171;
		Boolean f_tmp_172 = intLib.and(__tmp137,__tmp146);
		Boolean __tmp147 = f_tmp_172;
		int f_tmp_173 = 5;
		int __tmp148 = f_tmp_173;
		Boolean[] f_tmp_175 = env.inputOfAlice(Utils.fromInt(__tmp148, 32));
		Boolean f_tmp_174 = intLib.eq(op, f_tmp_175);
		Boolean __tmp149 = f_tmp_174;
		Boolean f_tmp_176 = intLib.not(intLib.eq(reg_rs, reg_rt));
		Boolean __tmp150 = f_tmp_176;
		Boolean f_tmp_177 = intLib.and(__tmp149,__tmp150);
		Boolean __tmp151 = f_tmp_177;
		int f_tmp_178 = 4;
		int __tmp152 = f_tmp_178;
		Boolean[] f_tmp_180 = env.inputOfAlice(Utils.fromInt(__tmp152, 32));
		Boolean f_tmp_179 = intLib.eq(op, f_tmp_180);
		Boolean __tmp153 = f_tmp_179;
		Boolean f_tmp_181 = intLib.eq(reg_rs, reg_rt);
		Boolean __tmp154 = f_tmp_181;
		Boolean f_tmp_182 = intLib.and(__tmp153,__tmp154);
		Boolean __tmp155 = f_tmp_182;
		Boolean f_tmp_183 = intLib.or(__tmp151,__tmp155);
		Boolean __tmp156 = f_tmp_183;
		Boolean f_tmp_184 = intLib.and(__tmp147,__tmp156);
		Boolean __tmp157 = f_tmp_184;
		int f_tmp_185 = 2;
		int __tmp158 = f_tmp_185;
		Boolean[] f_tmp_186 = intLib.leftPublicShift(unsignExt, __tmp158);
		Boolean[] __tmp159 = f_tmp_186;
		Boolean[] f_tmp_187 = intLib.add(pc,__tmp159);
		Boolean[] __tmp160 = f_tmp_187;
		Boolean[] f_tmp_188 = intLib.mux(pc, __tmp160,__tmp157);
		Boolean[] __tmp161 = f_tmp_188;
		pc = __tmp161;
		Boolean f_tmp_189 = intLib.not(__tmp156);
		Boolean __tmp162 = f_tmp_189;
		Boolean f_tmp_190 = intLib.and(__tmp147,__tmp162);
		Boolean __tmp163 = f_tmp_190;
		int f_tmp_191 = 4;
		int __tmp164 = f_tmp_191;
		Boolean[] f_tmp_193 = env.inputOfAlice(Utils.fromInt(__tmp164, 32));
		Boolean[] f_tmp_192 = intLib.add(pc,f_tmp_193);
		Boolean[] __tmp165 = f_tmp_192;
		Boolean[] f_tmp_194 = intLib.mux(pc, __tmp165,__tmp163);
		Boolean[] __tmp166 = f_tmp_194;
		pc = __tmp166;
		return pc;
	}
}
