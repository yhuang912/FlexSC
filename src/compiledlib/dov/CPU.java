package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public CPU(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_0 = 26;
		int __tmp0 = f_tmp_0;
		Boolean[] f_tmp_1 = intLib.rightPublicShift(inst, __tmp0);
		Boolean[] __tmp1 = f_tmp_1;
		op = __tmp1;
		int f_tmp_2 = 11;
		int __tmp2 = f_tmp_2;
		Boolean[] f_tmp_3 = intLib.leftPublicShift(inst, __tmp2);
		Boolean[] __tmp3 = f_tmp_3;
		int f_tmp_4 = 27;
		int __tmp4 = f_tmp_4;
		Boolean[] f_tmp_5 = intLib.rightPublicShift(__tmp3, __tmp4);
		Boolean[] __tmp5 = f_tmp_5;
		rt = __tmp5;
		int f_tmp_6 = 6;
		int __tmp6 = f_tmp_6;
		Boolean[] f_tmp_7 = intLib.leftPublicShift(inst, __tmp6);
		Boolean[] __tmp7 = f_tmp_7;
		int f_tmp_8 = 27;
		int __tmp8 = f_tmp_8;
		Boolean[] f_tmp_9 = intLib.rightPublicShift(__tmp7, __tmp8);
		Boolean[] __tmp9 = f_tmp_9;
		rs = __tmp9;
		int f_tmp_10 = 16;
		int __tmp10 = f_tmp_10;
		Boolean[] f_tmp_11 = intLib.leftPublicShift(inst, __tmp10);
		Boolean[] __tmp11 = f_tmp_11;
		int f_tmp_12 = 27;
		int __tmp12 = f_tmp_12;
		Boolean[] f_tmp_13 = intLib.rightPublicShift(__tmp11, __tmp12);
		Boolean[] __tmp13 = f_tmp_13;
		rd = __tmp13;
		int f_tmp_14 = 16;
		int __tmp14 = f_tmp_14;
		Boolean[] f_tmp_15 = intLib.leftPublicShift(inst, __tmp14);
		Boolean[] __tmp15 = f_tmp_15;
		int f_tmp_16 = 16;
		int __tmp16 = f_tmp_16;
		Boolean[] f_tmp_17 = intLib.rightPublicShift(__tmp15, __tmp16);
		Boolean[] __tmp17 = f_tmp_17;
		unsignExt = __tmp17;
		zeroExt = unsignExt;
		int f_tmp_18 = 0;
		int __tmp18 = f_tmp_18;
		funct = env.inputOfAlice(Utils.fromInt(__tmp18, 32));
		int f_tmp_19 = 15;
		int __tmp19 = f_tmp_19;
		Boolean[] f_tmp_20 = intLib.rightPublicShift(unsignExt, __tmp19);
		Boolean[] __tmp20 = f_tmp_20;
		int f_tmp_21 = 0;
		int __tmp21 = f_tmp_21;
		Boolean[] f_tmp_23 = env.inputOfAlice(Utils.fromInt(__tmp21, 32));
		Boolean f_tmp_22 = intLib.not(intLib.eq(__tmp20, f_tmp_23));
		Boolean __tmp22 = f_tmp_22;
		int f_tmp_24 = -65536;
		int __tmp23 = f_tmp_24;
		Boolean[] f_tmp_26 = env.inputOfAlice(Utils.fromInt(__tmp23, 32));
		Boolean[] f_tmp_25 = intLib.add(unsignExt,f_tmp_26);
		Boolean[] __tmp24 = f_tmp_25;
		Boolean[] f_tmp_27 = intLib.mux(unsignExt, __tmp24,__tmp22);
		Boolean[] __tmp25 = f_tmp_27;
		unsignExt = __tmp25;
		Boolean f_tmp_28 = intLib.not(__tmp22);
		Boolean __tmp26 = f_tmp_28;
		int f_tmp_29 = 9;
		int __tmp27 = f_tmp_29;
		Boolean[] f_tmp_31 = env.inputOfAlice(Utils.fromInt(__tmp27, 32));
		Boolean f_tmp_30 = intLib.eq(op, f_tmp_31);
		Boolean __tmp28 = f_tmp_30;
		Boolean[] f_tmp_32 = reg.read(rs);
		Boolean[] __tmp29 = f_tmp_32;
		Boolean[] f_tmp_33 = intLib.add(__tmp29,unsignExt);
		Boolean[] __tmp30 = f_tmp_33;
		Boolean[] f_tmp_34 = reg.read(rt);
		Boolean[] __tmp31 = f_tmp_34;
		Boolean[] f_tmp_35 = intLib.mux(__tmp31, __tmp30,__tmp28);
		Boolean[] __tmp32 = f_tmp_35;
		reg.write(rt,__tmp32);
		Boolean f_tmp_36 = intLib.not(__tmp28);
		Boolean __tmp33 = f_tmp_36;
		int f_tmp_37 = 3;
		int __tmp34 = f_tmp_37;
		Boolean[] f_tmp_39 = env.inputOfAlice(Utils.fromInt(__tmp34, 32));
		Boolean f_tmp_38 = intLib.eq(op, f_tmp_39);
		Boolean __tmp35 = f_tmp_38;
		int f_tmp_40 = 1;
		int __tmp36 = f_tmp_40;
		Boolean[] f_tmp_42 = env.inputOfAlice(Utils.fromInt(__tmp36, 32));
		Boolean f_tmp_41 = intLib.eq(op, f_tmp_42);
		Boolean __tmp37 = f_tmp_41;
		Boolean f_tmp_43 = intLib.or(__tmp35,__tmp37);
		Boolean __tmp38 = f_tmp_43;
		Boolean f_tmp_44 = intLib.and(__tmp33,__tmp38);
		Boolean __tmp39 = f_tmp_44;
		int f_tmp_45 = 8;
		int __tmp40 = f_tmp_45;
		Boolean[] f_tmp_47 = env.inputOfAlice(Utils.fromInt(__tmp40, 32));
		Boolean[] f_tmp_46 = intLib.add(pc,f_tmp_47);
		Boolean[] __tmp41 = f_tmp_46;
		int f_tmp_48 = 31;
		int __tmp42 = f_tmp_48;
		Boolean[] f_tmp_50 = env.inputOfAlice(Utils.fromInt(__tmp42, 32));
		Boolean[] f_tmp_49 = reg.read(f_tmp_50);
		Boolean[] __tmp43 = f_tmp_49;
		Boolean[] f_tmp_51 = intLib.mux(__tmp43, __tmp41,__tmp39);
		Boolean[] __tmp44 = f_tmp_51;
		Boolean[] f_tmp_52 = env.inputOfAlice(Utils.fromInt(__tmp42, 32));
		reg.write(f_tmp_52,__tmp44);
		Boolean f_tmp_53 = intLib.not(__tmp38);
		Boolean __tmp45 = f_tmp_53;
		Boolean f_tmp_54 = intLib.and(__tmp33,__tmp45);
		Boolean __tmp46 = f_tmp_54;
		int f_tmp_55 = 12;
		int __tmp47 = f_tmp_55;
		Boolean[] f_tmp_57 = env.inputOfAlice(Utils.fromInt(__tmp47, 32));
		Boolean f_tmp_56 = intLib.eq(op, f_tmp_57);
		Boolean __tmp48 = f_tmp_56;
		Boolean f_tmp_58 = intLib.and(__tmp46,__tmp48);
		Boolean __tmp49 = f_tmp_58;
		Boolean[] f_tmp_59 = reg.read(rs);
		Boolean[] __tmp50 = f_tmp_59;
		Boolean[] f_tmp_60 = intLib.and(__tmp50,zeroExt);
		Boolean[] __tmp51 = f_tmp_60;
		Boolean[] f_tmp_61 = reg.read(rt);
		Boolean[] __tmp52 = f_tmp_61;
		Boolean[] f_tmp_62 = intLib.mux(__tmp52, __tmp51,__tmp49);
		Boolean[] __tmp53 = f_tmp_62;
		reg.write(rt,__tmp53);
		Boolean f_tmp_63 = intLib.not(__tmp48);
		Boolean __tmp54 = f_tmp_63;
		Boolean f_tmp_64 = intLib.and(__tmp46,__tmp54);
		Boolean __tmp55 = f_tmp_64;
		int f_tmp_65 = 0;
		int __tmp56 = f_tmp_65;
		Boolean[] f_tmp_67 = env.inputOfAlice(Utils.fromInt(__tmp56, 32));
		Boolean f_tmp_66 = intLib.eq(op, f_tmp_67);
		Boolean __tmp57 = f_tmp_66;
		Boolean f_tmp_68 = intLib.and(__tmp55,__tmp57);
		Boolean __tmp58 = f_tmp_68;
		int f_tmp_69 = 26;
		int __tmp59 = f_tmp_69;
		Boolean[] f_tmp_70 = intLib.leftPublicShift(inst, __tmp59);
		Boolean[] __tmp60 = f_tmp_70;
		int f_tmp_71 = 26;
		int __tmp61 = f_tmp_71;
		Boolean[] f_tmp_72 = intLib.rightPublicShift(__tmp60, __tmp61);
		Boolean[] __tmp62 = f_tmp_72;
		Boolean[] f_tmp_73 = intLib.mux(funct, __tmp62,__tmp58);
		Boolean[] __tmp63 = f_tmp_73;
		funct = __tmp63;
		int f_tmp_74 = 33;
		int __tmp64 = f_tmp_74;
		Boolean[] f_tmp_76 = env.inputOfAlice(Utils.fromInt(__tmp64, 32));
		Boolean f_tmp_75 = intLib.eq(funct, f_tmp_76);
		Boolean __tmp65 = f_tmp_75;
		Boolean f_tmp_77 = intLib.and(__tmp58,__tmp65);
		Boolean __tmp66 = f_tmp_77;
		Boolean[] f_tmp_78 = reg.read(rs);
		Boolean[] __tmp67 = f_tmp_78;
		Boolean[] f_tmp_79 = reg.read(rt);
		Boolean[] __tmp68 = f_tmp_79;
		Boolean[] f_tmp_80 = intLib.add(__tmp67,__tmp68);
		Boolean[] __tmp69 = f_tmp_80;
		Boolean[] f_tmp_81 = reg.read(rd);
		Boolean[] __tmp70 = f_tmp_81;
		Boolean[] f_tmp_82 = intLib.mux(__tmp70, __tmp69,__tmp66);
		Boolean[] __tmp71 = f_tmp_82;
		reg.write(rd,__tmp71);
		Boolean f_tmp_83 = intLib.not(__tmp65);
		Boolean __tmp72 = f_tmp_83;
		Boolean f_tmp_84 = intLib.and(__tmp58,__tmp72);
		Boolean __tmp73 = f_tmp_84;
		int f_tmp_85 = 38;
		int __tmp74 = f_tmp_85;
		Boolean[] f_tmp_87 = env.inputOfAlice(Utils.fromInt(__tmp74, 32));
		Boolean f_tmp_86 = intLib.eq(funct, f_tmp_87);
		Boolean __tmp75 = f_tmp_86;
		Boolean f_tmp_88 = intLib.and(__tmp73,__tmp75);
		Boolean __tmp76 = f_tmp_88;
		Boolean[] f_tmp_89 = reg.read(rs);
		Boolean[] __tmp77 = f_tmp_89;
		Boolean[] f_tmp_90 = reg.read(rt);
		Boolean[] __tmp78 = f_tmp_90;
		Boolean[] f_tmp_91 = intLib.xor(__tmp77,__tmp78);
		Boolean[] __tmp79 = f_tmp_91;
		Boolean[] f_tmp_92 = reg.read(rd);
		Boolean[] __tmp80 = f_tmp_92;
		Boolean[] f_tmp_93 = intLib.mux(__tmp80, __tmp79,__tmp76);
		Boolean[] __tmp81 = f_tmp_93;
		reg.write(rd,__tmp81);
		Boolean f_tmp_94 = intLib.not(__tmp75);
		Boolean __tmp82 = f_tmp_94;
		Boolean f_tmp_95 = intLib.and(__tmp73,__tmp82);
		Boolean __tmp83 = f_tmp_95;
		int f_tmp_96 = 42;
		int __tmp84 = f_tmp_96;
		Boolean[] f_tmp_98 = env.inputOfAlice(Utils.fromInt(__tmp84, 32));
		Boolean f_tmp_97 = intLib.eq(funct, f_tmp_98);
		Boolean __tmp85 = f_tmp_97;
		Boolean f_tmp_99 = intLib.and(__tmp83,__tmp85);
		Boolean __tmp86 = f_tmp_99;
		Boolean[] f_tmp_100 = reg.read(rs);
		Boolean[] __tmp87 = f_tmp_100;
		Boolean[] f_tmp_101 = reg.read(rt);
		Boolean[] __tmp88 = f_tmp_101;
		Boolean f_tmp_102 = intLib.not(intLib.geq(__tmp87, __tmp88));
		Boolean __tmp89 = f_tmp_102;
		Boolean f_tmp_103 = intLib.and(__tmp86,__tmp89);
		Boolean __tmp90 = f_tmp_103;
		int f_tmp_104 = 1;
		int __tmp91 = f_tmp_104;
		Boolean[] f_tmp_105 = reg.read(rd);
		Boolean[] __tmp92 = f_tmp_105;
		Boolean[] f_tmp_107 = env.inputOfAlice(Utils.fromInt(__tmp91, 32));
		Boolean[] f_tmp_106 = intLib.mux(__tmp92, f_tmp_107,__tmp90);
		Boolean[] __tmp93 = f_tmp_106;
		reg.write(rd,__tmp93);
		Boolean f_tmp_108 = intLib.not(__tmp89);
		Boolean __tmp94 = f_tmp_108;
		Boolean f_tmp_109 = intLib.and(__tmp86,__tmp94);
		Boolean __tmp95 = f_tmp_109;
		int f_tmp_110 = 0;
		int __tmp96 = f_tmp_110;
		Boolean[] f_tmp_111 = reg.read(rd);
		Boolean[] __tmp97 = f_tmp_111;
		Boolean[] f_tmp_113 = env.inputOfAlice(Utils.fromInt(__tmp96, 32));
		Boolean[] f_tmp_112 = intLib.mux(__tmp97, f_tmp_113,__tmp95);
		Boolean[] __tmp98 = f_tmp_112;
		reg.write(rd,__tmp98);
		Boolean f_tmp_114 = intLib.not(__tmp85);
		Boolean __tmp99 = f_tmp_114;
		Boolean f_tmp_115 = intLib.and(__tmp83,__tmp99);
		Boolean __tmp100 = f_tmp_115;
		int f_tmp_116 = 35;
		int __tmp101 = f_tmp_116;
		Boolean[] f_tmp_118 = env.inputOfAlice(Utils.fromInt(__tmp101, 32));
		Boolean f_tmp_117 = intLib.eq(funct, f_tmp_118);
		Boolean __tmp102 = f_tmp_117;
		Boolean f_tmp_119 = intLib.and(__tmp100,__tmp102);
		Boolean __tmp103 = f_tmp_119;
		Boolean[] f_tmp_120 = reg.read(rs);
		Boolean[] __tmp104 = f_tmp_120;
		Boolean[] f_tmp_121 = reg.read(rt);
		Boolean[] __tmp105 = f_tmp_121;
		Boolean[] f_tmp_122 = intLib.sub(__tmp104,__tmp105);
		Boolean[] __tmp106 = f_tmp_122;
		Boolean[] f_tmp_123 = reg.read(rd);
		Boolean[] __tmp107 = f_tmp_123;
		Boolean[] f_tmp_124 = intLib.mux(__tmp107, __tmp106,__tmp103);
		Boolean[] __tmp108 = f_tmp_124;
		reg.write(rd,__tmp108);
		Boolean f_tmp_125 = intLib.not(__tmp102);
		Boolean __tmp109 = f_tmp_125;
		Boolean f_tmp_126 = intLib.and(__tmp100,__tmp109);
		Boolean __tmp110 = f_tmp_126;
		Boolean f_tmp_127 = intLib.not(__tmp57);
		Boolean __tmp111 = f_tmp_127;
		Boolean f_tmp_128 = intLib.and(__tmp55,__tmp111);
		Boolean __tmp112 = f_tmp_128;
		int f_tmp_129 = 8;
		int __tmp113 = f_tmp_129;
		Boolean[] f_tmp_131 = env.inputOfAlice(Utils.fromInt(__tmp113, 32));
		Boolean f_tmp_130 = intLib.eq(op, f_tmp_131);
		Boolean __tmp114 = f_tmp_130;
		Boolean[] f_tmp_132 = reg.read(rs);
		Boolean[] __tmp115 = f_tmp_132;
		Boolean[] f_tmp_133 = intLib.mux(pc, __tmp115,__tmp114);
		Boolean[] __tmp116 = f_tmp_133;
		pc = __tmp116;
		Boolean f_tmp_134 = intLib.not(__tmp114);
		Boolean __tmp117 = f_tmp_134;
		int f_tmp_135 = 3;
		int __tmp118 = f_tmp_135;
		Boolean[] f_tmp_137 = env.inputOfAlice(Utils.fromInt(__tmp118, 32));
		Boolean f_tmp_136 = intLib.eq(op, f_tmp_137);
		Boolean __tmp119 = f_tmp_136;
		Boolean f_tmp_138 = intLib.and(__tmp117,__tmp119);
		Boolean __tmp120 = f_tmp_138;
		int f_tmp_139 = 6;
		int __tmp121 = f_tmp_139;
		Boolean[] f_tmp_140 = intLib.leftPublicShift(inst, __tmp121);
		Boolean[] __tmp122 = f_tmp_140;
		int f_tmp_141 = 6;
		int __tmp123 = f_tmp_141;
		Boolean[] f_tmp_142 = intLib.rightPublicShift(__tmp122, __tmp123);
		Boolean[] __tmp124 = f_tmp_142;
		Boolean[] f_tmp_143 = intLib.mux(pc, __tmp124,__tmp120);
		Boolean[] __tmp125 = f_tmp_143;
		pc = __tmp125;
		Boolean f_tmp_144 = intLib.not(__tmp119);
		Boolean __tmp126 = f_tmp_144;
		Boolean f_tmp_145 = intLib.and(__tmp117,__tmp126);
		Boolean __tmp127 = f_tmp_145;
		int f_tmp_146 = 5;
		int __tmp128 = f_tmp_146;
		Boolean[] f_tmp_148 = env.inputOfAlice(Utils.fromInt(__tmp128, 32));
		Boolean f_tmp_147 = intLib.eq(op, f_tmp_148);
		Boolean __tmp129 = f_tmp_147;
		Boolean[] f_tmp_149 = reg.read(rs);
		Boolean[] __tmp130 = f_tmp_149;
		Boolean[] f_tmp_150 = reg.read(rt);
		Boolean[] __tmp131 = f_tmp_150;
		Boolean f_tmp_151 = intLib.not(intLib.eq(__tmp130, __tmp131));
		Boolean __tmp132 = f_tmp_151;
		Boolean f_tmp_152 = intLib.and(__tmp129,__tmp132);
		Boolean __tmp133 = f_tmp_152;
		int f_tmp_153 = 4;
		int __tmp134 = f_tmp_153;
		Boolean[] f_tmp_155 = env.inputOfAlice(Utils.fromInt(__tmp134, 32));
		Boolean f_tmp_154 = intLib.eq(op, f_tmp_155);
		Boolean __tmp135 = f_tmp_154;
		Boolean[] f_tmp_156 = reg.read(rs);
		Boolean[] __tmp136 = f_tmp_156;
		Boolean[] f_tmp_157 = reg.read(rt);
		Boolean[] __tmp137 = f_tmp_157;
		Boolean f_tmp_158 = intLib.eq(__tmp136, __tmp137);
		Boolean __tmp138 = f_tmp_158;
		Boolean f_tmp_159 = intLib.and(__tmp135,__tmp138);
		Boolean __tmp139 = f_tmp_159;
		Boolean f_tmp_160 = intLib.or(__tmp133,__tmp139);
		Boolean __tmp140 = f_tmp_160;
		Boolean f_tmp_161 = intLib.and(__tmp127,__tmp140);
		Boolean __tmp141 = f_tmp_161;
		int f_tmp_162 = 2;
		int __tmp142 = f_tmp_162;
		Boolean[] f_tmp_163 = intLib.leftPublicShift(unsignExt, __tmp142);
		Boolean[] __tmp143 = f_tmp_163;
		Boolean[] f_tmp_164 = intLib.add(pc,__tmp143);
		Boolean[] __tmp144 = f_tmp_164;
		Boolean[] f_tmp_165 = intLib.mux(pc, __tmp144,__tmp141);
		Boolean[] __tmp145 = f_tmp_165;
		pc = __tmp145;
		Boolean f_tmp_166 = intLib.not(__tmp140);
		Boolean __tmp146 = f_tmp_166;
		Boolean f_tmp_167 = intLib.and(__tmp127,__tmp146);
		Boolean __tmp147 = f_tmp_167;
		int f_tmp_168 = 4;
		int __tmp148 = f_tmp_168;
		Boolean[] f_tmp_170 = env.inputOfAlice(Utils.fromInt(__tmp148, 32));
		Boolean[] f_tmp_169 = intLib.add(pc,f_tmp_170);
		Boolean[] __tmp149 = f_tmp_169;
		Boolean[] f_tmp_171 = intLib.mux(pc, __tmp149,__tmp147);
		Boolean[] __tmp150 = f_tmp_171;
		pc = __tmp150;
		return pc;
	}
}
