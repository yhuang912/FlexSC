package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public CPU(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] checkType(Boolean[] opcode) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 2));
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		Boolean[] f_tmp_2 = env.inputOfAlice(Utils.fromInt(__tmp0, 32));
		Boolean f_tmp_1 = intLib.eq(opcode, f_tmp_2);
		Boolean __tmp1 = f_tmp_1;
		int f_tmp_3 = 1;
		int __tmp2 = f_tmp_3;
		Boolean[] f_tmp_5 = env.inputOfAlice(Utils.fromInt(__tmp2, 2));
		Boolean[] f_tmp_4 = intLib.mux(ret, f_tmp_5,__tmp1);
		Boolean[] __tmp3 = f_tmp_4;
		ret = __tmp3;
		Boolean f_tmp_6 = intLib.not(__tmp1);
		Boolean __tmp4 = f_tmp_6;
		int f_tmp_7 = 9;
		int __tmp5 = f_tmp_7;
		Boolean[] f_tmp_9 = env.inputOfAlice(Utils.fromInt(__tmp5, 32));
		Boolean f_tmp_8 = intLib.eq(opcode, f_tmp_9);
		Boolean __tmp6 = f_tmp_8;
		int f_tmp_10 = 2;
		int __tmp7 = f_tmp_10;
		Boolean[] f_tmp_12 = env.inputOfAlice(Utils.fromInt(__tmp7, 32));
		Boolean f_tmp_11 = intLib.eq(opcode, f_tmp_12);
		Boolean __tmp8 = f_tmp_11;
		Boolean f_tmp_13 = intLib.or(__tmp6,__tmp8);
		Boolean __tmp9 = f_tmp_13;
		Boolean f_tmp_14 = intLib.and(__tmp4,__tmp9);
		Boolean __tmp10 = f_tmp_14;
		int f_tmp_15 = 2;
		int __tmp11 = f_tmp_15;
		Boolean[] f_tmp_17 = env.inputOfAlice(Utils.fromInt(__tmp11, 2));
		Boolean[] f_tmp_16 = intLib.mux(ret, f_tmp_17,__tmp10);
		Boolean[] __tmp12 = f_tmp_16;
		ret = __tmp12;
		Boolean f_tmp_18 = intLib.not(__tmp9);
		Boolean __tmp13 = f_tmp_18;
		Boolean f_tmp_19 = intLib.and(__tmp4,__tmp13);
		Boolean __tmp14 = f_tmp_19;
		int f_tmp_20 = 3;
		int __tmp15 = f_tmp_20;
		Boolean[] f_tmp_22 = env.inputOfAlice(Utils.fromInt(__tmp15, 2));
		Boolean[] f_tmp_21 = intLib.mux(ret, f_tmp_22,__tmp14);
		Boolean[] __tmp16 = f_tmp_21;
		ret = __tmp16;
		return ret;
	}
	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] op_type = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] reg_31 = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_23 = 26;
		int __tmp17 = f_tmp_23;
		Boolean[] f_tmp_24 = intLib.rightPublicShift(inst, __tmp17);
		Boolean[] __tmp18 = f_tmp_24;
		op = __tmp18;
		int f_tmp_25 = 11;
		int __tmp19 = f_tmp_25;
		Boolean[] f_tmp_26 = intLib.leftPublicShift(inst, __tmp19);
		Boolean[] __tmp20 = f_tmp_26;
		int f_tmp_27 = 27;
		int __tmp21 = f_tmp_27;
		Boolean[] f_tmp_28 = intLib.rightPublicShift(__tmp20, __tmp21);
		Boolean[] __tmp22 = f_tmp_28;
		rt = __tmp22;
		int f_tmp_29 = 6;
		int __tmp23 = f_tmp_29;
		Boolean[] f_tmp_30 = intLib.leftPublicShift(inst, __tmp23);
		Boolean[] __tmp24 = f_tmp_30;
		int f_tmp_31 = 27;
		int __tmp25 = f_tmp_31;
		Boolean[] f_tmp_32 = intLib.rightPublicShift(__tmp24, __tmp25);
		Boolean[] __tmp26 = f_tmp_32;
		rs = __tmp26;
		int f_tmp_33 = 16;
		int __tmp27 = f_tmp_33;
		Boolean[] f_tmp_34 = intLib.leftPublicShift(inst, __tmp27);
		Boolean[] __tmp28 = f_tmp_34;
		int f_tmp_35 = 27;
		int __tmp29 = f_tmp_35;
		Boolean[] f_tmp_36 = intLib.rightPublicShift(__tmp28, __tmp29);
		Boolean[] __tmp30 = f_tmp_36;
		rd = __tmp30;
		int f_tmp_37 = 16;
		int __tmp31 = f_tmp_37;
		Boolean[] f_tmp_38 = intLib.leftPublicShift(inst, __tmp31);
		Boolean[] __tmp32 = f_tmp_38;
		int f_tmp_39 = 16;
		int __tmp33 = f_tmp_39;
		Boolean[] f_tmp_40 = intLib.rightPublicShift(__tmp32, __tmp33);
		Boolean[] __tmp34 = f_tmp_40;
		unsignExt = __tmp34;
		zeroExt = unsignExt;
		int f_tmp_41 = 26;
		int __tmp35 = f_tmp_41;
		Boolean[] f_tmp_42 = intLib.leftPublicShift(inst, __tmp35);
		Boolean[] __tmp36 = f_tmp_42;
		int f_tmp_43 = 26;
		int __tmp37 = f_tmp_43;
		Boolean[] f_tmp_44 = intLib.rightPublicShift(__tmp36, __tmp37);
		Boolean[] __tmp38 = f_tmp_44;
		funct = __tmp38;
		int f_tmp_45 = 15;
		int __tmp39 = f_tmp_45;
		Boolean[] f_tmp_46 = intLib.rightPublicShift(unsignExt, __tmp39);
		Boolean[] __tmp40 = f_tmp_46;
		int f_tmp_47 = 0;
		int __tmp41 = f_tmp_47;
		Boolean[] f_tmp_49 = env.inputOfAlice(Utils.fromInt(__tmp41, 32));
		Boolean f_tmp_48 = intLib.not(intLib.eq(__tmp40, f_tmp_49));
		Boolean __tmp42 = f_tmp_48;
		int f_tmp_50 = -65536;
		int __tmp43 = f_tmp_50;
		Boolean[] f_tmp_52 = env.inputOfAlice(Utils.fromInt(__tmp43, 32));
		Boolean[] f_tmp_51 = intLib.add(unsignExt,f_tmp_52);
		Boolean[] __tmp44 = f_tmp_51;
		Boolean[] f_tmp_53 = intLib.mux(unsignExt, __tmp44,__tmp42);
		Boolean[] __tmp45 = f_tmp_53;
		unsignExt = __tmp45;
		Boolean f_tmp_54 = intLib.not(__tmp42);
		Boolean __tmp46 = f_tmp_54;
		Boolean[] f_tmp_55 = reg.read(rs);
		Boolean[] __tmp47 = f_tmp_55;
		reg_rs = __tmp47;
		Boolean[] f_tmp_56 = reg.read(rt);
		Boolean[] __tmp48 = f_tmp_56;
		reg_rt = __tmp48;
		Boolean[] f_tmp_57 = reg.read(rd);
		Boolean[] __tmp49 = f_tmp_57;
		reg_rd = __tmp49;
		Boolean[] f_tmp_58 = this.checkType(op);
		Boolean[] __tmp50 = f_tmp_58;
		op_type = __tmp50;
		int f_tmp_59 = 2;
		int __tmp51 = f_tmp_59;
		Boolean[] f_tmp_61 = env.inputOfAlice(Utils.fromInt(__tmp51, 2));
		Boolean f_tmp_60 = intLib.eq(op_type, f_tmp_61);
		Boolean __tmp52 = f_tmp_60;
		int f_tmp_62 = 9;
		int __tmp53 = f_tmp_62;
		Boolean[] f_tmp_64 = env.inputOfAlice(Utils.fromInt(__tmp53, 32));
		Boolean f_tmp_63 = intLib.eq(op, f_tmp_64);
		Boolean __tmp54 = f_tmp_63;
		Boolean f_tmp_65 = intLib.and(__tmp52,__tmp54);
		Boolean __tmp55 = f_tmp_65;
		Boolean[] f_tmp_66 = intLib.add(reg_rs,unsignExt);
		Boolean[] __tmp56 = f_tmp_66;
		Boolean[] f_tmp_67 = intLib.mux(reg_rt, __tmp56,__tmp55);
		Boolean[] __tmp57 = f_tmp_67;
		reg_rt = __tmp57;
		Boolean f_tmp_68 = intLib.not(__tmp54);
		Boolean __tmp58 = f_tmp_68;
		Boolean f_tmp_69 = intLib.and(__tmp52,__tmp58);
		Boolean __tmp59 = f_tmp_69;
		int f_tmp_70 = 12;
		int __tmp60 = f_tmp_70;
		Boolean[] f_tmp_72 = env.inputOfAlice(Utils.fromInt(__tmp60, 32));
		Boolean f_tmp_71 = intLib.eq(op, f_tmp_72);
		Boolean __tmp61 = f_tmp_71;
		Boolean f_tmp_73 = intLib.and(__tmp59,__tmp61);
		Boolean __tmp62 = f_tmp_73;
		Boolean[] f_tmp_74 = intLib.and(reg_rs,zeroExt);
		Boolean[] __tmp63 = f_tmp_74;
		Boolean[] f_tmp_75 = intLib.mux(reg_rt, __tmp63,__tmp62);
		Boolean[] __tmp64 = f_tmp_75;
		reg_rt = __tmp64;
		Boolean f_tmp_76 = intLib.not(__tmp61);
		Boolean __tmp65 = f_tmp_76;
		Boolean f_tmp_77 = intLib.and(__tmp59,__tmp65);
		Boolean __tmp66 = f_tmp_77;
		Boolean[] f_tmp_78 = reg.read(rt);
		Boolean[] __tmp67 = f_tmp_78;
		Boolean[] f_tmp_79 = intLib.mux(__tmp67, reg_rt,__tmp52);
		Boolean[] __tmp68 = f_tmp_79;
		reg.write(rt,__tmp68);
		Boolean f_tmp_80 = intLib.not(__tmp52);
		Boolean __tmp69 = f_tmp_80;
		int f_tmp_81 = 1;
		int __tmp70 = f_tmp_81;
		Boolean[] f_tmp_83 = env.inputOfAlice(Utils.fromInt(__tmp70, 2));
		Boolean f_tmp_82 = intLib.eq(op_type, f_tmp_83);
		Boolean __tmp71 = f_tmp_82;
		Boolean f_tmp_84 = intLib.and(__tmp69,__tmp71);
		Boolean __tmp72 = f_tmp_84;
		int f_tmp_85 = 33;
		int __tmp73 = f_tmp_85;
		Boolean[] f_tmp_87 = env.inputOfAlice(Utils.fromInt(__tmp73, 32));
		Boolean f_tmp_86 = intLib.eq(funct, f_tmp_87);
		Boolean __tmp74 = f_tmp_86;
		Boolean f_tmp_88 = intLib.and(__tmp72,__tmp74);
		Boolean __tmp75 = f_tmp_88;
		Boolean[] f_tmp_89 = intLib.add(reg_rs,reg_rt);
		Boolean[] __tmp76 = f_tmp_89;
		Boolean[] f_tmp_90 = intLib.mux(reg_rd, __tmp76,__tmp75);
		Boolean[] __tmp77 = f_tmp_90;
		reg_rd = __tmp77;
		Boolean f_tmp_91 = intLib.not(__tmp74);
		Boolean __tmp78 = f_tmp_91;
		Boolean f_tmp_92 = intLib.and(__tmp72,__tmp78);
		Boolean __tmp79 = f_tmp_92;
		int f_tmp_93 = 38;
		int __tmp80 = f_tmp_93;
		Boolean[] f_tmp_95 = env.inputOfAlice(Utils.fromInt(__tmp80, 32));
		Boolean f_tmp_94 = intLib.eq(funct, f_tmp_95);
		Boolean __tmp81 = f_tmp_94;
		Boolean f_tmp_96 = intLib.and(__tmp79,__tmp81);
		Boolean __tmp82 = f_tmp_96;
		Boolean[] f_tmp_97 = intLib.xor(reg_rs,reg_rt);
		Boolean[] __tmp83 = f_tmp_97;
		Boolean[] f_tmp_98 = intLib.mux(reg_rd, __tmp83,__tmp82);
		Boolean[] __tmp84 = f_tmp_98;
		reg_rd = __tmp84;
		Boolean f_tmp_99 = intLib.not(__tmp81);
		Boolean __tmp85 = f_tmp_99;
		Boolean f_tmp_100 = intLib.and(__tmp79,__tmp85);
		Boolean __tmp86 = f_tmp_100;
		int f_tmp_101 = 42;
		int __tmp87 = f_tmp_101;
		Boolean[] f_tmp_103 = env.inputOfAlice(Utils.fromInt(__tmp87, 32));
		Boolean f_tmp_102 = intLib.eq(funct, f_tmp_103);
		Boolean __tmp88 = f_tmp_102;
		Boolean f_tmp_104 = intLib.and(__tmp86,__tmp88);
		Boolean __tmp89 = f_tmp_104;
		Boolean f_tmp_105 = intLib.not(intLib.geq(reg_rs, reg_rt));
		Boolean __tmp90 = f_tmp_105;
		Boolean f_tmp_106 = intLib.and(__tmp89,__tmp90);
		Boolean __tmp91 = f_tmp_106;
		int f_tmp_107 = 1;
		int __tmp92 = f_tmp_107;
		Boolean[] f_tmp_109 = env.inputOfAlice(Utils.fromInt(__tmp92, 32));
		Boolean[] f_tmp_108 = intLib.mux(reg_rd, f_tmp_109,__tmp91);
		Boolean[] __tmp93 = f_tmp_108;
		reg_rd = __tmp93;
		Boolean f_tmp_110 = intLib.not(__tmp90);
		Boolean __tmp94 = f_tmp_110;
		Boolean f_tmp_111 = intLib.and(__tmp89,__tmp94);
		Boolean __tmp95 = f_tmp_111;
		int f_tmp_112 = 0;
		int __tmp96 = f_tmp_112;
		Boolean[] f_tmp_114 = env.inputOfAlice(Utils.fromInt(__tmp96, 32));
		Boolean[] f_tmp_113 = intLib.mux(reg_rd, f_tmp_114,__tmp95);
		Boolean[] __tmp97 = f_tmp_113;
		reg_rd = __tmp97;
		Boolean f_tmp_115 = intLib.not(__tmp88);
		Boolean __tmp98 = f_tmp_115;
		Boolean f_tmp_116 = intLib.and(__tmp86,__tmp98);
		Boolean __tmp99 = f_tmp_116;
		int f_tmp_117 = 35;
		int __tmp100 = f_tmp_117;
		Boolean[] f_tmp_119 = env.inputOfAlice(Utils.fromInt(__tmp100, 32));
		Boolean f_tmp_118 = intLib.eq(funct, f_tmp_119);
		Boolean __tmp101 = f_tmp_118;
		Boolean f_tmp_120 = intLib.and(__tmp99,__tmp101);
		Boolean __tmp102 = f_tmp_120;
		Boolean[] f_tmp_121 = intLib.sub(reg_rs,reg_rt);
		Boolean[] __tmp103 = f_tmp_121;
		Boolean[] f_tmp_122 = intLib.mux(reg_rd, __tmp103,__tmp102);
		Boolean[] __tmp104 = f_tmp_122;
		reg_rd = __tmp104;
		Boolean f_tmp_123 = intLib.not(__tmp101);
		Boolean __tmp105 = f_tmp_123;
		Boolean f_tmp_124 = intLib.and(__tmp99,__tmp105);
		Boolean __tmp106 = f_tmp_124;
		Boolean[] f_tmp_125 = reg.read(rd);
		Boolean[] __tmp107 = f_tmp_125;
		Boolean[] f_tmp_126 = intLib.mux(__tmp107, reg_rd,__tmp72);
		Boolean[] __tmp108 = f_tmp_126;
		reg.write(rd,__tmp108);
		Boolean f_tmp_127 = intLib.not(__tmp71);
		Boolean __tmp109 = f_tmp_127;
		Boolean f_tmp_128 = intLib.and(__tmp69,__tmp109);
		Boolean __tmp110 = f_tmp_128;
		int f_tmp_129 = 3;
		int __tmp111 = f_tmp_129;
		Boolean[] f_tmp_131 = env.inputOfAlice(Utils.fromInt(__tmp111, 32));
		Boolean f_tmp_130 = intLib.eq(op, f_tmp_131);
		Boolean __tmp112 = f_tmp_130;
		Boolean f_tmp_132 = intLib.and(__tmp110,__tmp112);
		Boolean __tmp113 = f_tmp_132;
		int f_tmp_133 = 8;
		int __tmp114 = f_tmp_133;
		Boolean[] f_tmp_135 = env.inputOfAlice(Utils.fromInt(__tmp114, 32));
		Boolean[] f_tmp_134 = intLib.add(pc,f_tmp_135);
		Boolean[] __tmp115 = f_tmp_134;
		Boolean[] f_tmp_136 = intLib.mux(reg_31, __tmp115,__tmp113);
		Boolean[] __tmp116 = f_tmp_136;
		reg_31 = __tmp116;
		int f_tmp_137 = 6;
		int __tmp117 = f_tmp_137;
		Boolean[] f_tmp_138 = intLib.leftPublicShift(inst, __tmp117);
		Boolean[] __tmp118 = f_tmp_138;
		int f_tmp_139 = 6;
		int __tmp119 = f_tmp_139;
		Boolean[] f_tmp_140 = intLib.rightPublicShift(__tmp118, __tmp119);
		Boolean[] __tmp120 = f_tmp_140;
		Boolean[] f_tmp_141 = intLib.mux(pc, __tmp120,__tmp113);
		Boolean[] __tmp121 = f_tmp_141;
		pc = __tmp121;
		Boolean f_tmp_142 = intLib.not(__tmp112);
		Boolean __tmp122 = f_tmp_142;
		Boolean f_tmp_143 = intLib.and(__tmp110,__tmp122);
		Boolean __tmp123 = f_tmp_143;
		int f_tmp_144 = 1;
		int __tmp124 = f_tmp_144;
		Boolean[] f_tmp_146 = env.inputOfAlice(Utils.fromInt(__tmp124, 32));
		Boolean f_tmp_145 = intLib.eq(op, f_tmp_146);
		Boolean __tmp125 = f_tmp_145;
		Boolean f_tmp_147 = intLib.and(__tmp123,__tmp125);
		Boolean __tmp126 = f_tmp_147;
		int f_tmp_148 = 8;
		int __tmp127 = f_tmp_148;
		Boolean[] f_tmp_150 = env.inputOfAlice(Utils.fromInt(__tmp127, 32));
		Boolean[] f_tmp_149 = intLib.add(pc,f_tmp_150);
		Boolean[] __tmp128 = f_tmp_149;
		Boolean[] f_tmp_151 = intLib.mux(reg_31, __tmp128,__tmp126);
		Boolean[] __tmp129 = f_tmp_151;
		reg_31 = __tmp129;
		int f_tmp_152 = 0;
		int __tmp130 = f_tmp_152;
		Boolean[] f_tmp_154 = env.inputOfAlice(Utils.fromInt(__tmp130, 32));
		Boolean f_tmp_153 = intLib.geq(reg_rt, f_tmp_154);
		Boolean __tmp131 = f_tmp_153;
		Boolean f_tmp_155 = intLib.and(__tmp126,__tmp131);
		Boolean __tmp132 = f_tmp_155;
		int f_tmp_156 = 2;
		int __tmp133 = f_tmp_156;
		Boolean[] f_tmp_157 = intLib.leftPublicShift(unsignExt, __tmp133);
		Boolean[] __tmp134 = f_tmp_157;
		Boolean[] f_tmp_158 = intLib.add(pc,__tmp134);
		Boolean[] __tmp135 = f_tmp_158;
		Boolean[] f_tmp_159 = intLib.mux(pc, __tmp135,__tmp132);
		Boolean[] __tmp136 = f_tmp_159;
		pc = __tmp136;
		Boolean f_tmp_160 = intLib.not(__tmp131);
		Boolean __tmp137 = f_tmp_160;
		Boolean f_tmp_161 = intLib.and(__tmp126,__tmp137);
		Boolean __tmp138 = f_tmp_161;
		Boolean f_tmp_162 = intLib.not(__tmp125);
		Boolean __tmp139 = f_tmp_162;
		Boolean f_tmp_163 = intLib.and(__tmp123,__tmp139);
		Boolean __tmp140 = f_tmp_163;
		int f_tmp_164 = 3;
		int __tmp141 = f_tmp_164;
		Boolean[] f_tmp_166 = env.inputOfAlice(Utils.fromInt(__tmp141, 32));
		Boolean f_tmp_165 = intLib.eq(op, f_tmp_166);
		Boolean __tmp142 = f_tmp_165;
		int f_tmp_167 = 1;
		int __tmp143 = f_tmp_167;
		Boolean[] f_tmp_169 = env.inputOfAlice(Utils.fromInt(__tmp143, 32));
		Boolean f_tmp_168 = intLib.eq(op, f_tmp_169);
		Boolean __tmp144 = f_tmp_168;
		Boolean f_tmp_170 = intLib.or(__tmp142,__tmp144);
		Boolean __tmp145 = f_tmp_170;
		Boolean f_tmp_171 = intLib.and(__tmp110,__tmp145);
		Boolean __tmp146 = f_tmp_171;
		int f_tmp_172 = 31;
		int __tmp147 = f_tmp_172;
		Boolean[] f_tmp_174 = env.inputOfAlice(Utils.fromInt(__tmp147, 32));
		Boolean[] f_tmp_173 = reg.read(f_tmp_174);
		Boolean[] __tmp148 = f_tmp_173;
		Boolean[] f_tmp_175 = intLib.mux(__tmp148, reg_31,__tmp146);
		Boolean[] __tmp149 = f_tmp_175;
		Boolean[] f_tmp_176 = env.inputOfAlice(Utils.fromInt(__tmp147, 32));
		reg.write(f_tmp_176,__tmp149);
		Boolean f_tmp_177 = intLib.not(__tmp145);
		Boolean __tmp150 = f_tmp_177;
		Boolean f_tmp_178 = intLib.and(__tmp110,__tmp150);
		Boolean __tmp151 = f_tmp_178;
		int f_tmp_179 = 0;
		int __tmp152 = f_tmp_179;
		Boolean[] f_tmp_181 = env.inputOfAlice(Utils.fromInt(__tmp152, 32));
		Boolean f_tmp_180 = intLib.eq(op, f_tmp_181);
		Boolean __tmp153 = f_tmp_180;
		int f_tmp_182 = 8;
		int __tmp154 = f_tmp_182;
		Boolean[] f_tmp_184 = env.inputOfAlice(Utils.fromInt(__tmp154, 32));
		Boolean f_tmp_183 = intLib.eq(funct, f_tmp_184);
		Boolean __tmp155 = f_tmp_183;
		Boolean f_tmp_185 = intLib.and(__tmp153,__tmp155);
		Boolean __tmp156 = f_tmp_185;
		Boolean[] f_tmp_186 = intLib.mux(pc, reg_rs,__tmp156);
		Boolean[] __tmp157 = f_tmp_186;
		pc = __tmp157;
		Boolean f_tmp_187 = intLib.not(__tmp156);
		Boolean __tmp158 = f_tmp_187;
		int f_tmp_188 = 3;
		int __tmp159 = f_tmp_188;
		Boolean[] f_tmp_190 = env.inputOfAlice(Utils.fromInt(__tmp159, 32));
		Boolean f_tmp_189 = intLib.eq(op, f_tmp_190);
		Boolean __tmp160 = f_tmp_189;
		Boolean f_tmp_191 = intLib.and(__tmp158,__tmp160);
		Boolean __tmp161 = f_tmp_191;
		int f_tmp_192 = 6;
		int __tmp162 = f_tmp_192;
		Boolean[] f_tmp_193 = intLib.leftPublicShift(inst, __tmp162);
		Boolean[] __tmp163 = f_tmp_193;
		int f_tmp_194 = 6;
		int __tmp164 = f_tmp_194;
		Boolean[] f_tmp_195 = intLib.rightPublicShift(__tmp163, __tmp164);
		Boolean[] __tmp165 = f_tmp_195;
		Boolean[] f_tmp_196 = intLib.mux(pc, __tmp165,__tmp161);
		Boolean[] __tmp166 = f_tmp_196;
		pc = __tmp166;
		Boolean f_tmp_197 = intLib.not(__tmp160);
		Boolean __tmp167 = f_tmp_197;
		Boolean f_tmp_198 = intLib.and(__tmp158,__tmp167);
		Boolean __tmp168 = f_tmp_198;
		int f_tmp_199 = 5;
		int __tmp169 = f_tmp_199;
		Boolean[] f_tmp_201 = env.inputOfAlice(Utils.fromInt(__tmp169, 32));
		Boolean f_tmp_200 = intLib.eq(op, f_tmp_201);
		Boolean __tmp170 = f_tmp_200;
		Boolean f_tmp_202 = intLib.not(intLib.eq(reg_rs, reg_rt));
		Boolean __tmp171 = f_tmp_202;
		Boolean f_tmp_203 = intLib.and(__tmp170,__tmp171);
		Boolean __tmp172 = f_tmp_203;
		int f_tmp_204 = 4;
		int __tmp173 = f_tmp_204;
		Boolean[] f_tmp_206 = env.inputOfAlice(Utils.fromInt(__tmp173, 32));
		Boolean f_tmp_205 = intLib.eq(op, f_tmp_206);
		Boolean __tmp174 = f_tmp_205;
		Boolean f_tmp_207 = intLib.eq(reg_rs, reg_rt);
		Boolean __tmp175 = f_tmp_207;
		Boolean f_tmp_208 = intLib.and(__tmp174,__tmp175);
		Boolean __tmp176 = f_tmp_208;
		Boolean f_tmp_209 = intLib.or(__tmp172,__tmp176);
		Boolean __tmp177 = f_tmp_209;
		Boolean f_tmp_210 = intLib.and(__tmp168,__tmp177);
		Boolean __tmp178 = f_tmp_210;
		int f_tmp_211 = 2;
		int __tmp179 = f_tmp_211;
		Boolean[] f_tmp_212 = intLib.leftPublicShift(unsignExt, __tmp179);
		Boolean[] __tmp180 = f_tmp_212;
		Boolean[] f_tmp_213 = intLib.add(pc,__tmp180);
		Boolean[] __tmp181 = f_tmp_213;
		Boolean[] f_tmp_214 = intLib.mux(pc, __tmp181,__tmp178);
		Boolean[] __tmp182 = f_tmp_214;
		pc = __tmp182;
		Boolean f_tmp_215 = intLib.not(__tmp177);
		Boolean __tmp183 = f_tmp_215;
		Boolean f_tmp_216 = intLib.and(__tmp168,__tmp183);
		Boolean __tmp184 = f_tmp_216;
		int f_tmp_217 = 4;
		int __tmp185 = f_tmp_217;
		Boolean[] f_tmp_219 = env.inputOfAlice(Utils.fromInt(__tmp185, 32));
		Boolean[] f_tmp_218 = intLib.add(pc,f_tmp_219);
		Boolean[] __tmp186 = f_tmp_218;
		Boolean[] f_tmp_220 = intLib.mux(pc, __tmp186,__tmp184);
		Boolean[] __tmp187 = f_tmp_220;
		pc = __tmp187;
		return pc;
	}
}
