package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, GCSignal> {

	public CompEnv<GCSignal> env;
	public IntegerLib<GCSignal> intLib;
	public FloatLib<GCSignal> floatLib;

	public CPU(CompEnv<GCSignal> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<GCSignal>(env);
		this.floatLib = new FloatLib<GCSignal>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public GCSignal[] getBits() {
		GCSignal[] ret = new GCSignal[this.numBits()];
		GCSignal[] tmp_b;
		GCSignal tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(GCSignal[] data) throws Exception {
		if(data == null) {
			data = new GCSignal[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		GCSignal[] tmp;
		int now = 0;
		return ret;
}

	public GCSignal[] checkType(GCSignal[] opcode) throws Exception {
		GCSignal[] ret = env.inputOfAlice(Utils.fromInt(0, 2));
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		GCSignal[] f_tmp_2 = env.inputOfAlice(Utils.fromInt(__tmp0, 32));
		GCSignal f_tmp_1 = intLib.eq(opcode, f_tmp_2);
		GCSignal __tmp1 = f_tmp_1;
		int f_tmp_3 = 1;
		int __tmp2 = f_tmp_3;
		GCSignal[] f_tmp_5 = env.inputOfAlice(Utils.fromInt(__tmp2, 2));
		GCSignal[] f_tmp_4 = intLib.mux(ret, f_tmp_5,__tmp1);
		GCSignal[] __tmp3 = f_tmp_4;
		ret = __tmp3;
		GCSignal f_tmp_6 = intLib.not(__tmp1);
		GCSignal __tmp4 = f_tmp_6;
		int f_tmp_7 = 9;
		int __tmp5 = f_tmp_7;
		GCSignal[] f_tmp_9 = env.inputOfAlice(Utils.fromInt(__tmp5, 32));
		GCSignal f_tmp_8 = intLib.eq(opcode, f_tmp_9);
		GCSignal __tmp6 = f_tmp_8;
		int f_tmp_10 = 2;
		int __tmp7 = f_tmp_10;
		GCSignal[] f_tmp_12 = env.inputOfAlice(Utils.fromInt(__tmp7, 32));
		GCSignal f_tmp_11 = intLib.eq(opcode, f_tmp_12);
		GCSignal __tmp8 = f_tmp_11;
		int f_tmp_13 = 15;
		int __tmp9 = f_tmp_13;
		GCSignal[] f_tmp_15 = env.inputOfAlice(Utils.fromInt(__tmp9, 32));
		GCSignal f_tmp_14 = intLib.eq(opcode, f_tmp_15);
		GCSignal __tmp10 = f_tmp_14;
		GCSignal f_tmp_16 = intLib.or(__tmp8,__tmp10);
		GCSignal __tmp11 = f_tmp_16;
		GCSignal f_tmp_17 = intLib.or(__tmp6,__tmp11);
		GCSignal __tmp12 = f_tmp_17;
		GCSignal f_tmp_18 = intLib.and(__tmp4,__tmp12);
		GCSignal __tmp13 = f_tmp_18;
		int f_tmp_19 = 2;
		int __tmp14 = f_tmp_19;
		GCSignal[] f_tmp_21 = env.inputOfAlice(Utils.fromInt(__tmp14, 2));
		GCSignal[] f_tmp_20 = intLib.mux(ret, f_tmp_21,__tmp13);
		GCSignal[] __tmp15 = f_tmp_20;
		ret = __tmp15;
		GCSignal f_tmp_22 = intLib.not(__tmp12);
		GCSignal __tmp16 = f_tmp_22;
		GCSignal f_tmp_23 = intLib.and(__tmp4,__tmp16);
		GCSignal __tmp17 = f_tmp_23;
		int f_tmp_24 = 3;
		int __tmp18 = f_tmp_24;
		GCSignal[] f_tmp_26 = env.inputOfAlice(Utils.fromInt(__tmp18, 2));
		GCSignal[] f_tmp_25 = intLib.mux(ret, f_tmp_26,__tmp17);
		GCSignal[] __tmp19 = f_tmp_25;
		ret = __tmp19;
		return ret;
	}
	public GCSignal[] function(SecureArray<GCSignal> reg, GCSignal[] inst, GCSignal[] pc) throws Exception {
		GCSignal[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] shamt = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] reg_rs = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] reg_rt = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] reg_rd = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		GCSignal[] op_type = env.inputOfAlice(Utils.fromInt(0, 2));
		GCSignal[] oldPC = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_27 = 26;
		int __tmp20 = f_tmp_27;
		GCSignal[] f_tmp_28 = intLib.rightPublicShift(inst, __tmp20);
		GCSignal[] __tmp21 = f_tmp_28;
		op = __tmp21;
		int f_tmp_29 = 11;
		int __tmp22 = f_tmp_29;
		GCSignal[] f_tmp_30 = intLib.leftPublicShift(inst, __tmp22);
		GCSignal[] __tmp23 = f_tmp_30;
		int f_tmp_31 = 27;
		int __tmp24 = f_tmp_31;
		GCSignal[] f_tmp_32 = intLib.rightPublicShift(__tmp23, __tmp24);
		GCSignal[] __tmp25 = f_tmp_32;
		rt = __tmp25;
		int f_tmp_33 = 6;
		int __tmp26 = f_tmp_33;
		GCSignal[] f_tmp_34 = intLib.leftPublicShift(inst, __tmp26);
		GCSignal[] __tmp27 = f_tmp_34;
		int f_tmp_35 = 27;
		int __tmp28 = f_tmp_35;
		GCSignal[] f_tmp_36 = intLib.rightPublicShift(__tmp27, __tmp28);
		GCSignal[] __tmp29 = f_tmp_36;
		rs = __tmp29;
		int f_tmp_37 = 16;
		int __tmp30 = f_tmp_37;
		GCSignal[] f_tmp_38 = intLib.leftPublicShift(inst, __tmp30);
		GCSignal[] __tmp31 = f_tmp_38;
		int f_tmp_39 = 27;
		int __tmp32 = f_tmp_39;
		GCSignal[] f_tmp_40 = intLib.rightPublicShift(__tmp31, __tmp32);
		GCSignal[] __tmp33 = f_tmp_40;
		rd = __tmp33;
		int f_tmp_41 = 21;
		int __tmp34 = f_tmp_41;
		GCSignal[] f_tmp_42 = intLib.leftPublicShift(inst, __tmp34);
		GCSignal[] __tmp35 = f_tmp_42;
		int f_tmp_43 = 27;
		int __tmp36 = f_tmp_43;
		GCSignal[] f_tmp_44 = intLib.rightPublicShift(__tmp35, __tmp36);
		GCSignal[] __tmp37 = f_tmp_44;
		shamt = __tmp37;
		int f_tmp_45 = 16;
		int __tmp38 = f_tmp_45;
		GCSignal[] f_tmp_46 = intLib.leftPublicShift(inst, __tmp38);
		GCSignal[] __tmp39 = f_tmp_46;
		int f_tmp_47 = 16;
		int __tmp40 = f_tmp_47;
		GCSignal[] f_tmp_48 = intLib.rightPublicShift(__tmp39, __tmp40);
		GCSignal[] __tmp41 = f_tmp_48;
		unsignExt = __tmp41;
		zeroExt = unsignExt;
		int f_tmp_49 = 26;
		int __tmp42 = f_tmp_49;
		GCSignal[] f_tmp_50 = intLib.leftPublicShift(inst, __tmp42);
		GCSignal[] __tmp43 = f_tmp_50;
		int f_tmp_51 = 26;
		int __tmp44 = f_tmp_51;
		GCSignal[] f_tmp_52 = intLib.rightPublicShift(__tmp43, __tmp44);
		GCSignal[] __tmp45 = f_tmp_52;
		funct = __tmp45;
		int f_tmp_53 = 15;
		int __tmp46 = f_tmp_53;
		GCSignal[] f_tmp_54 = intLib.rightPublicShift(unsignExt, __tmp46);
		GCSignal[] __tmp47 = f_tmp_54;
		int f_tmp_55 = 0;
		int __tmp48 = f_tmp_55;
		GCSignal[] f_tmp_57 = env.inputOfAlice(Utils.fromInt(__tmp48, 32));
		GCSignal f_tmp_56 = intLib.not(intLib.eq(__tmp47, f_tmp_57));
		GCSignal __tmp49 = f_tmp_56;
		int f_tmp_58 = -65536;
		int __tmp50 = f_tmp_58;
		GCSignal[] f_tmp_60 = env.inputOfAlice(Utils.fromInt(__tmp50, 32));
		GCSignal[] f_tmp_59 = intLib.add(unsignExt,f_tmp_60);
		GCSignal[] __tmp51 = f_tmp_59;
		GCSignal[] f_tmp_61 = intLib.mux(unsignExt, __tmp51,__tmp49);
		GCSignal[] __tmp52 = f_tmp_61;
		unsignExt = __tmp52;
		GCSignal f_tmp_62 = intLib.not(__tmp49);
		GCSignal __tmp53 = f_tmp_62;
		GCSignal[] f_tmp_63 = reg.read(rs);
		GCSignal[] __tmp54 = f_tmp_63;
		reg_rs = __tmp54;
		GCSignal[] f_tmp_64 = reg.read(rt);
		GCSignal[] __tmp55 = f_tmp_64;
		reg_rt = __tmp55;
		GCSignal[] f_tmp_65 = reg.read(rd);
		GCSignal[] __tmp56 = f_tmp_65;
		reg_rd = __tmp56;
		GCSignal[] f_tmp_66 = this.checkType(op);
		GCSignal[] __tmp57 = f_tmp_66;
		op_type = __tmp57;
		int f_tmp_67 = 2;
		int __tmp58 = f_tmp_67;
		GCSignal[] f_tmp_69 = env.inputOfAlice(Utils.fromInt(__tmp58, 2));
		GCSignal f_tmp_68 = intLib.eq(op_type, f_tmp_69);
		GCSignal __tmp59 = f_tmp_68;
		int f_tmp_70 = 9;
		int __tmp60 = f_tmp_70;
		GCSignal[] f_tmp_72 = env.inputOfAlice(Utils.fromInt(__tmp60, 32));
		GCSignal f_tmp_71 = intLib.eq(op, f_tmp_72);
		GCSignal __tmp61 = f_tmp_71;
		GCSignal f_tmp_73 = intLib.and(__tmp59,__tmp61);
		GCSignal __tmp62 = f_tmp_73;
		GCSignal[] f_tmp_74 = intLib.add(reg_rs,unsignExt);
		GCSignal[] __tmp63 = f_tmp_74;
		GCSignal[] f_tmp_75 = intLib.mux(reg_rt, __tmp63,__tmp62);
		GCSignal[] __tmp64 = f_tmp_75;
		reg_rt = __tmp64;
		GCSignal f_tmp_76 = intLib.not(__tmp61);
		GCSignal __tmp65 = f_tmp_76;
		GCSignal f_tmp_77 = intLib.and(__tmp59,__tmp65);
		GCSignal __tmp66 = f_tmp_77;
		int f_tmp_78 = 12;
		int __tmp67 = f_tmp_78;
		GCSignal[] f_tmp_80 = env.inputOfAlice(Utils.fromInt(__tmp67, 32));
		GCSignal f_tmp_79 = intLib.eq(op, f_tmp_80);
		GCSignal __tmp68 = f_tmp_79;
		GCSignal f_tmp_81 = intLib.and(__tmp66,__tmp68);
		GCSignal __tmp69 = f_tmp_81;
		GCSignal[] f_tmp_82 = intLib.and(reg_rs,zeroExt);
		GCSignal[] __tmp70 = f_tmp_82;
		GCSignal[] f_tmp_83 = intLib.mux(reg_rt, __tmp70,__tmp69);
		GCSignal[] __tmp71 = f_tmp_83;
		reg_rt = __tmp71;
		GCSignal f_tmp_84 = intLib.not(__tmp68);
		GCSignal __tmp72 = f_tmp_84;
		GCSignal f_tmp_85 = intLib.and(__tmp66,__tmp72);
		GCSignal __tmp73 = f_tmp_85;
		int f_tmp_86 = 15;
		int __tmp74 = f_tmp_86;
		GCSignal[] f_tmp_88 = env.inputOfAlice(Utils.fromInt(__tmp74, 32));
		GCSignal f_tmp_87 = intLib.eq(op, f_tmp_88);
		GCSignal __tmp75 = f_tmp_87;
		GCSignal f_tmp_89 = intLib.and(__tmp73,__tmp75);
		GCSignal __tmp76 = f_tmp_89;
		int f_tmp_90 = 16;
		int __tmp77 = f_tmp_90;
		GCSignal[] f_tmp_91 = intLib.leftPublicShift(zeroExt, __tmp77);
		GCSignal[] __tmp78 = f_tmp_91;
		GCSignal[] f_tmp_92 = intLib.mux(reg_rt, __tmp78,__tmp76);
		GCSignal[] __tmp79 = f_tmp_92;
		reg_rt = __tmp79;
		GCSignal f_tmp_93 = intLib.not(__tmp75);
		GCSignal __tmp80 = f_tmp_93;
		GCSignal f_tmp_94 = intLib.and(__tmp73,__tmp80);
		GCSignal __tmp81 = f_tmp_94;
		GCSignal[] f_tmp_95 = reg.read(rt);
		GCSignal[] __tmp82 = f_tmp_95;
		GCSignal[] f_tmp_96 = intLib.mux(__tmp82, reg_rt,__tmp59);
		GCSignal[] __tmp83 = f_tmp_96;
		reg.write(rt,__tmp83);
		GCSignal f_tmp_97 = intLib.not(__tmp59);
		GCSignal __tmp84 = f_tmp_97;
		int f_tmp_98 = 1;
		int __tmp85 = f_tmp_98;
		GCSignal[] f_tmp_100 = env.inputOfAlice(Utils.fromInt(__tmp85, 2));
		GCSignal f_tmp_99 = intLib.eq(op_type, f_tmp_100);
		GCSignal __tmp86 = f_tmp_99;
		GCSignal f_tmp_101 = intLib.and(__tmp84,__tmp86);
		GCSignal __tmp87 = f_tmp_101;
		int f_tmp_102 = 33;
		int __tmp88 = f_tmp_102;
		GCSignal[] f_tmp_104 = env.inputOfAlice(Utils.fromInt(__tmp88, 32));
		GCSignal f_tmp_103 = intLib.eq(funct, f_tmp_104);
		GCSignal __tmp89 = f_tmp_103;
		GCSignal f_tmp_105 = intLib.and(__tmp87,__tmp89);
		GCSignal __tmp90 = f_tmp_105;
		GCSignal[] f_tmp_106 = intLib.add(reg_rs,reg_rt);
		GCSignal[] __tmp91 = f_tmp_106;
		GCSignal[] f_tmp_107 = intLib.mux(reg_rd, __tmp91,__tmp90);
		GCSignal[] __tmp92 = f_tmp_107;
		reg_rd = __tmp92;
		GCSignal f_tmp_108 = intLib.not(__tmp89);
		GCSignal __tmp93 = f_tmp_108;
		GCSignal f_tmp_109 = intLib.and(__tmp87,__tmp93);
		GCSignal __tmp94 = f_tmp_109;
		int f_tmp_110 = 38;
		int __tmp95 = f_tmp_110;
		GCSignal[] f_tmp_112 = env.inputOfAlice(Utils.fromInt(__tmp95, 32));
		GCSignal f_tmp_111 = intLib.eq(funct, f_tmp_112);
		GCSignal __tmp96 = f_tmp_111;
		GCSignal f_tmp_113 = intLib.and(__tmp94,__tmp96);
		GCSignal __tmp97 = f_tmp_113;
		GCSignal[] f_tmp_114 = intLib.xor(reg_rs,reg_rt);
		GCSignal[] __tmp98 = f_tmp_114;
		GCSignal[] f_tmp_115 = intLib.mux(reg_rd, __tmp98,__tmp97);
		GCSignal[] __tmp99 = f_tmp_115;
		reg_rd = __tmp99;
		GCSignal f_tmp_116 = intLib.not(__tmp96);
		GCSignal __tmp100 = f_tmp_116;
		GCSignal f_tmp_117 = intLib.and(__tmp94,__tmp100);
		GCSignal __tmp101 = f_tmp_117;
		int f_tmp_118 = 42;
		int __tmp102 = f_tmp_118;
		GCSignal[] f_tmp_120 = env.inputOfAlice(Utils.fromInt(__tmp102, 32));
		GCSignal f_tmp_119 = intLib.eq(funct, f_tmp_120);
		GCSignal __tmp103 = f_tmp_119;
		GCSignal f_tmp_121 = intLib.and(__tmp101,__tmp103);
		GCSignal __tmp104 = f_tmp_121;
		GCSignal f_tmp_122 = intLib.not(intLib.geq(reg_rs, reg_rt));
		GCSignal __tmp105 = f_tmp_122;
		GCSignal f_tmp_123 = intLib.and(__tmp104,__tmp105);
		GCSignal __tmp106 = f_tmp_123;
		int f_tmp_124 = 1;
		int __tmp107 = f_tmp_124;
		GCSignal[] f_tmp_126 = env.inputOfAlice(Utils.fromInt(__tmp107, 32));
		GCSignal[] f_tmp_125 = intLib.mux(reg_rd, f_tmp_126,__tmp106);
		GCSignal[] __tmp108 = f_tmp_125;
		reg_rd = __tmp108;
		GCSignal f_tmp_127 = intLib.not(__tmp105);
		GCSignal __tmp109 = f_tmp_127;
		GCSignal f_tmp_128 = intLib.and(__tmp104,__tmp109);
		GCSignal __tmp110 = f_tmp_128;
		int f_tmp_129 = 0;
		int __tmp111 = f_tmp_129;
		GCSignal[] f_tmp_131 = env.inputOfAlice(Utils.fromInt(__tmp111, 32));
		GCSignal[] f_tmp_130 = intLib.mux(reg_rd, f_tmp_131,__tmp110);
		GCSignal[] __tmp112 = f_tmp_130;
		reg_rd = __tmp112;
		GCSignal f_tmp_132 = intLib.not(__tmp103);
		GCSignal __tmp113 = f_tmp_132;
		GCSignal f_tmp_133 = intLib.and(__tmp101,__tmp113);
		GCSignal __tmp114 = f_tmp_133;
		int f_tmp_134 = 35;
		int __tmp115 = f_tmp_134;
		GCSignal[] f_tmp_136 = env.inputOfAlice(Utils.fromInt(__tmp115, 32));
		GCSignal f_tmp_135 = intLib.eq(funct, f_tmp_136);
		GCSignal __tmp116 = f_tmp_135;
		GCSignal f_tmp_137 = intLib.and(__tmp114,__tmp116);
		GCSignal __tmp117 = f_tmp_137;
		GCSignal[] f_tmp_138 = intLib.sub(reg_rs,reg_rt);
		GCSignal[] __tmp118 = f_tmp_138;
		GCSignal[] f_tmp_139 = intLib.mux(reg_rd, __tmp118,__tmp117);
		GCSignal[] __tmp119 = f_tmp_139;
		reg_rd = __tmp119;
		GCSignal f_tmp_140 = intLib.not(__tmp116);
		GCSignal __tmp120 = f_tmp_140;
		GCSignal f_tmp_141 = intLib.and(__tmp114,__tmp120);
		GCSignal __tmp121 = f_tmp_141;
		int f_tmp_142 = 37;
		int __tmp122 = f_tmp_142;
		GCSignal[] f_tmp_144 = env.inputOfAlice(Utils.fromInt(__tmp122, 32));
		GCSignal f_tmp_143 = intLib.eq(funct, f_tmp_144);
		GCSignal __tmp123 = f_tmp_143;
		GCSignal f_tmp_145 = intLib.and(__tmp121,__tmp123);
		GCSignal __tmp124 = f_tmp_145;
		GCSignal[] f_tmp_146 = intLib.or(reg_rt,reg_rs);
		GCSignal[] __tmp125 = f_tmp_146;
		GCSignal[] f_tmp_147 = intLib.mux(reg_rd, __tmp125,__tmp124);
		GCSignal[] __tmp126 = f_tmp_147;
		reg_rd = __tmp126;
		GCSignal f_tmp_148 = intLib.not(__tmp123);
		GCSignal __tmp127 = f_tmp_148;
		GCSignal f_tmp_149 = intLib.and(__tmp121,__tmp127);
		GCSignal __tmp128 = f_tmp_149;
		GCSignal[] f_tmp_150 = reg.read(rd);
		GCSignal[] __tmp129 = f_tmp_150;
		GCSignal[] f_tmp_151 = intLib.mux(__tmp129, reg_rd,__tmp87);
		GCSignal[] __tmp130 = f_tmp_151;
		reg.write(rd,__tmp130);
		GCSignal f_tmp_152 = intLib.not(__tmp86);
		GCSignal __tmp131 = f_tmp_152;
		GCSignal f_tmp_153 = intLib.and(__tmp84,__tmp131);
		GCSignal __tmp132 = f_tmp_153;
		GCSignal[] f_tmp_154 = intLib.mux(oldPC, pc,__tmp132);
		GCSignal[] __tmp133 = f_tmp_154;
		oldPC = __tmp133;
		int f_tmp_155 = 3;
		int __tmp134 = f_tmp_155;
		GCSignal[] f_tmp_157 = env.inputOfAlice(Utils.fromInt(__tmp134, 32));
		GCSignal f_tmp_156 = intLib.eq(op, f_tmp_157);
		GCSignal __tmp135 = f_tmp_156;
		GCSignal f_tmp_158 = intLib.and(__tmp132,__tmp135);
		GCSignal __tmp136 = f_tmp_158;
		int f_tmp_159 = 6;
		int __tmp137 = f_tmp_159;
		GCSignal[] f_tmp_160 = intLib.leftPublicShift(inst, __tmp137);
		GCSignal[] __tmp138 = f_tmp_160;
		int f_tmp_161 = 6;
		int __tmp139 = f_tmp_161;
		GCSignal[] f_tmp_162 = intLib.rightPublicShift(__tmp138, __tmp139);
		GCSignal[] __tmp140 = f_tmp_162;
		GCSignal[] f_tmp_163 = intLib.mux(pc, __tmp140,__tmp136);
		GCSignal[] __tmp141 = f_tmp_163;
		pc = __tmp141;
		GCSignal f_tmp_164 = intLib.not(__tmp135);
		GCSignal __tmp142 = f_tmp_164;
		GCSignal f_tmp_165 = intLib.and(__tmp132,__tmp142);
		GCSignal __tmp143 = f_tmp_165;
		int f_tmp_166 = 1;
		int __tmp144 = f_tmp_166;
		GCSignal[] f_tmp_168 = env.inputOfAlice(Utils.fromInt(__tmp144, 32));
		GCSignal f_tmp_167 = intLib.eq(op, f_tmp_168);
		GCSignal __tmp145 = f_tmp_167;
		GCSignal f_tmp_169 = intLib.and(__tmp143,__tmp145);
		GCSignal __tmp146 = f_tmp_169;
		int f_tmp_170 = 0;
		int __tmp147 = f_tmp_170;
		GCSignal[] f_tmp_172 = env.inputOfAlice(Utils.fromInt(__tmp147, 32));
		GCSignal f_tmp_171 = intLib.geq(reg_rt, f_tmp_172);
		GCSignal __tmp148 = f_tmp_171;
		GCSignal f_tmp_173 = intLib.and(__tmp146,__tmp148);
		GCSignal __tmp149 = f_tmp_173;
		int f_tmp_174 = 2;
		int __tmp150 = f_tmp_174;
		GCSignal[] f_tmp_175 = intLib.leftPublicShift(unsignExt, __tmp150);
		GCSignal[] __tmp151 = f_tmp_175;
		GCSignal[] f_tmp_176 = intLib.add(pc,__tmp151);
		GCSignal[] __tmp152 = f_tmp_176;
		GCSignal[] f_tmp_177 = intLib.mux(pc, __tmp152,__tmp149);
		GCSignal[] __tmp153 = f_tmp_177;
		pc = __tmp153;
		GCSignal f_tmp_178 = intLib.not(__tmp148);
		GCSignal __tmp154 = f_tmp_178;
		GCSignal f_tmp_179 = intLib.and(__tmp146,__tmp154);
		GCSignal __tmp155 = f_tmp_179;
		GCSignal f_tmp_180 = intLib.not(__tmp145);
		GCSignal __tmp156 = f_tmp_180;
		GCSignal f_tmp_181 = intLib.and(__tmp143,__tmp156);
		GCSignal __tmp157 = f_tmp_181;
		int f_tmp_182 = 3;
		int __tmp158 = f_tmp_182;
		GCSignal[] f_tmp_184 = env.inputOfAlice(Utils.fromInt(__tmp158, 32));
		GCSignal f_tmp_183 = intLib.eq(op, f_tmp_184);
		GCSignal __tmp159 = f_tmp_183;
		int f_tmp_185 = 1;
		int __tmp160 = f_tmp_185;
		GCSignal[] f_tmp_187 = env.inputOfAlice(Utils.fromInt(__tmp160, 32));
		GCSignal f_tmp_186 = intLib.eq(op, f_tmp_187);
		GCSignal __tmp161 = f_tmp_186;
		GCSignal f_tmp_188 = intLib.or(__tmp159,__tmp161);
		GCSignal __tmp162 = f_tmp_188;
		GCSignal f_tmp_189 = intLib.and(__tmp132,__tmp162);
		GCSignal __tmp163 = f_tmp_189;
		int f_tmp_190 = 8;
		int __tmp164 = f_tmp_190;
		GCSignal[] f_tmp_192 = env.inputOfAlice(Utils.fromInt(__tmp164, 32));
		GCSignal[] f_tmp_191 = intLib.add(oldPC,f_tmp_192);
		GCSignal[] __tmp165 = f_tmp_191;
		int f_tmp_193 = 31;
		int __tmp166 = f_tmp_193;
		GCSignal[] f_tmp_195 = env.inputOfAlice(Utils.fromInt(__tmp166, 32));
		GCSignal[] f_tmp_194 = reg.read(f_tmp_195);
		GCSignal[] __tmp167 = f_tmp_194;
		GCSignal[] f_tmp_196 = intLib.mux(__tmp167, __tmp165,__tmp163);
		GCSignal[] __tmp168 = f_tmp_196;
		GCSignal[] f_tmp_197 = env.inputOfAlice(Utils.fromInt(__tmp166, 32));
		reg.write(f_tmp_197,__tmp168);
		GCSignal f_tmp_198 = intLib.not(__tmp162);
		GCSignal __tmp169 = f_tmp_198;
		GCSignal f_tmp_199 = intLib.and(__tmp132,__tmp169);
		GCSignal __tmp170 = f_tmp_199;
		int f_tmp_200 = 0;
		int __tmp171 = f_tmp_200;
		GCSignal[] f_tmp_202 = env.inputOfAlice(Utils.fromInt(__tmp171, 32));
		GCSignal f_tmp_201 = intLib.eq(op, f_tmp_202);
		GCSignal __tmp172 = f_tmp_201;
		int f_tmp_203 = 8;
		int __tmp173 = f_tmp_203;
		GCSignal[] f_tmp_205 = env.inputOfAlice(Utils.fromInt(__tmp173, 32));
		GCSignal f_tmp_204 = intLib.eq(funct, f_tmp_205);
		GCSignal __tmp174 = f_tmp_204;
		GCSignal f_tmp_206 = intLib.and(__tmp172,__tmp174);
		GCSignal __tmp175 = f_tmp_206;
		GCSignal[] f_tmp_207 = intLib.mux(pc, reg_rs,__tmp175);
		GCSignal[] __tmp176 = f_tmp_207;
		pc = __tmp176;
		GCSignal f_tmp_208 = intLib.not(__tmp175);
		GCSignal __tmp177 = f_tmp_208;
		int f_tmp_209 = 3;
		int __tmp178 = f_tmp_209;
		GCSignal[] f_tmp_211 = env.inputOfAlice(Utils.fromInt(__tmp178, 32));
		GCSignal f_tmp_210 = intLib.eq(op, f_tmp_211);
		GCSignal __tmp179 = f_tmp_210;
		GCSignal f_tmp_212 = intLib.and(__tmp177,__tmp179);
		GCSignal __tmp180 = f_tmp_212;
		int f_tmp_213 = 6;
		int __tmp181 = f_tmp_213;
		GCSignal[] f_tmp_214 = intLib.leftPublicShift(inst, __tmp181);
		GCSignal[] __tmp182 = f_tmp_214;
		int f_tmp_215 = 6;
		int __tmp183 = f_tmp_215;
		GCSignal[] f_tmp_216 = intLib.rightPublicShift(__tmp182, __tmp183);
		GCSignal[] __tmp184 = f_tmp_216;
		GCSignal[] f_tmp_217 = intLib.mux(pc, __tmp184,__tmp180);
		GCSignal[] __tmp185 = f_tmp_217;
		pc = __tmp185;
		GCSignal f_tmp_218 = intLib.not(__tmp179);
		GCSignal __tmp186 = f_tmp_218;
		GCSignal f_tmp_219 = intLib.and(__tmp177,__tmp186);
		GCSignal __tmp187 = f_tmp_219;
		int f_tmp_220 = 5;
		int __tmp188 = f_tmp_220;
		GCSignal[] f_tmp_222 = env.inputOfAlice(Utils.fromInt(__tmp188, 32));
		GCSignal f_tmp_221 = intLib.eq(op, f_tmp_222);
		GCSignal __tmp189 = f_tmp_221;
		GCSignal f_tmp_223 = intLib.not(intLib.eq(reg_rs, reg_rt));
		GCSignal __tmp190 = f_tmp_223;
		GCSignal f_tmp_224 = intLib.and(__tmp189,__tmp190);
		GCSignal __tmp191 = f_tmp_224;
		int f_tmp_225 = 4;
		int __tmp192 = f_tmp_225;
		GCSignal[] f_tmp_227 = env.inputOfAlice(Utils.fromInt(__tmp192, 32));
		GCSignal f_tmp_226 = intLib.eq(op, f_tmp_227);
		GCSignal __tmp193 = f_tmp_226;
		GCSignal f_tmp_228 = intLib.eq(reg_rs, reg_rt);
		GCSignal __tmp194 = f_tmp_228;
		GCSignal f_tmp_229 = intLib.and(__tmp193,__tmp194);
		GCSignal __tmp195 = f_tmp_229;
		GCSignal f_tmp_230 = intLib.or(__tmp191,__tmp195);
		GCSignal __tmp196 = f_tmp_230;
		GCSignal f_tmp_231 = intLib.and(__tmp187,__tmp196);
		GCSignal __tmp197 = f_tmp_231;
		int f_tmp_232 = 2;
		int __tmp198 = f_tmp_232;
		GCSignal[] f_tmp_233 = intLib.leftPublicShift(unsignExt, __tmp198);
		GCSignal[] __tmp199 = f_tmp_233;
		GCSignal[] f_tmp_234 = intLib.add(pc,__tmp199);
		GCSignal[] __tmp200 = f_tmp_234;
		GCSignal[] f_tmp_235 = intLib.mux(pc, __tmp200,__tmp197);
		GCSignal[] __tmp201 = f_tmp_235;
		pc = __tmp201;
		GCSignal f_tmp_236 = intLib.not(__tmp196);
		GCSignal __tmp202 = f_tmp_236;
		GCSignal f_tmp_237 = intLib.and(__tmp187,__tmp202);
		GCSignal __tmp203 = f_tmp_237;
		int f_tmp_238 = 4;
		int __tmp204 = f_tmp_238;
		GCSignal[] f_tmp_240 = env.inputOfAlice(Utils.fromInt(__tmp204, 32));
		GCSignal[] f_tmp_239 = intLib.add(pc,f_tmp_240);
		GCSignal[] __tmp205 = f_tmp_239;
		GCSignal[] f_tmp_241 = intLib.mux(pc, __tmp205,__tmp203);
		GCSignal[] __tmp206 = f_tmp_241;
		pc = __tmp206;
		return pc;
	}
}
