package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public CPU(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] checkType(Boolean[] opcode) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 2));
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		Boolean[] f_tmp_2 = env.inputOfAlice(Utils.fromInt(__tmp0, 32));
		Boolean f_tmp_1 = intLib.eq(opcode, f_tmp_2);
		Boolean __tmp1 = f_tmp_1;
		int f_tmp_3 = 1;
		int __tmp2 = f_tmp_3;
		Boolean[] f_tmp_5 = env.inputOfAlice(Utils.fromInt(__tmp2, 2));
		Boolean[] f_tmp_4 = intLib.mux(ret, f_tmp_5,__tmp1);
		Boolean[] __tmp3 = f_tmp_4;
		ret = __tmp3;
		Boolean f_tmp_6 = intLib.not(__tmp1);
		Boolean __tmp4 = f_tmp_6;
		int f_tmp_7 = 9;
		int __tmp5 = f_tmp_7;
		Boolean[] f_tmp_9 = env.inputOfAlice(Utils.fromInt(__tmp5, 32));
		Boolean f_tmp_8 = intLib.eq(opcode, f_tmp_9);
		Boolean __tmp6 = f_tmp_8;
		int f_tmp_10 = 2;
		int __tmp7 = f_tmp_10;
		Boolean[] f_tmp_12 = env.inputOfAlice(Utils.fromInt(__tmp7, 32));
		Boolean f_tmp_11 = intLib.eq(opcode, f_tmp_12);
		Boolean __tmp8 = f_tmp_11;
		int f_tmp_13 = 15;
		int __tmp9 = f_tmp_13;
		Boolean[] f_tmp_15 = env.inputOfAlice(Utils.fromInt(__tmp9, 32));
		Boolean f_tmp_14 = intLib.eq(opcode, f_tmp_15);
		Boolean __tmp10 = f_tmp_14;
		Boolean f_tmp_16 = intLib.or(__tmp8,__tmp10);
		Boolean __tmp11 = f_tmp_16;
		Boolean f_tmp_17 = intLib.or(__tmp6,__tmp11);
		Boolean __tmp12 = f_tmp_17;
		Boolean f_tmp_18 = intLib.and(__tmp4,__tmp12);
		Boolean __tmp13 = f_tmp_18;
		int f_tmp_19 = 2;
		int __tmp14 = f_tmp_19;
		Boolean[] f_tmp_21 = env.inputOfAlice(Utils.fromInt(__tmp14, 2));
		Boolean[] f_tmp_20 = intLib.mux(ret, f_tmp_21,__tmp13);
		Boolean[] __tmp15 = f_tmp_20;
		ret = __tmp15;
		Boolean f_tmp_22 = intLib.not(__tmp12);
		Boolean __tmp16 = f_tmp_22;
		Boolean f_tmp_23 = intLib.and(__tmp4,__tmp16);
		Boolean __tmp17 = f_tmp_23;
		int f_tmp_24 = 3;
		int __tmp18 = f_tmp_24;
		Boolean[] f_tmp_26 = env.inputOfAlice(Utils.fromInt(__tmp18, 2));
		Boolean[] f_tmp_25 = intLib.mux(ret, f_tmp_26,__tmp17);
		Boolean[] __tmp19 = f_tmp_25;
		ret = __tmp19;
		return ret;
	}
	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] reg_rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] op_type = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] reg_31 = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_27 = 26;
		int __tmp20 = f_tmp_27;
		Boolean[] f_tmp_28 = intLib.rightPublicShift(inst, __tmp20);
		Boolean[] __tmp21 = f_tmp_28;
		op = __tmp21;
		int f_tmp_29 = 11;
		int __tmp22 = f_tmp_29;
		Boolean[] f_tmp_30 = intLib.leftPublicShift(inst, __tmp22);
		Boolean[] __tmp23 = f_tmp_30;
		int f_tmp_31 = 27;
		int __tmp24 = f_tmp_31;
		Boolean[] f_tmp_32 = intLib.rightPublicShift(__tmp23, __tmp24);
		Boolean[] __tmp25 = f_tmp_32;
		rt = __tmp25;
		int f_tmp_33 = 6;
		int __tmp26 = f_tmp_33;
		Boolean[] f_tmp_34 = intLib.leftPublicShift(inst, __tmp26);
		Boolean[] __tmp27 = f_tmp_34;
		int f_tmp_35 = 27;
		int __tmp28 = f_tmp_35;
		Boolean[] f_tmp_36 = intLib.rightPublicShift(__tmp27, __tmp28);
		Boolean[] __tmp29 = f_tmp_36;
		rs = __tmp29;
		int f_tmp_37 = 16;
		int __tmp30 = f_tmp_37;
		Boolean[] f_tmp_38 = intLib.leftPublicShift(inst, __tmp30);
		Boolean[] __tmp31 = f_tmp_38;
		int f_tmp_39 = 27;
		int __tmp32 = f_tmp_39;
		Boolean[] f_tmp_40 = intLib.rightPublicShift(__tmp31, __tmp32);
		Boolean[] __tmp33 = f_tmp_40;
		rd = __tmp33;
		int f_tmp_41 = 16;
		int __tmp34 = f_tmp_41;
		Boolean[] f_tmp_42 = intLib.leftPublicShift(inst, __tmp34);
		Boolean[] __tmp35 = f_tmp_42;
		int f_tmp_43 = 16;
		int __tmp36 = f_tmp_43;
		Boolean[] f_tmp_44 = intLib.rightPublicShift(__tmp35, __tmp36);
		Boolean[] __tmp37 = f_tmp_44;
		unsignExt = __tmp37;
		zeroExt = unsignExt;
		int f_tmp_45 = 26;
		int __tmp38 = f_tmp_45;
		Boolean[] f_tmp_46 = intLib.leftPublicShift(inst, __tmp38);
		Boolean[] __tmp39 = f_tmp_46;
		int f_tmp_47 = 26;
		int __tmp40 = f_tmp_47;
		Boolean[] f_tmp_48 = intLib.rightPublicShift(__tmp39, __tmp40);
		Boolean[] __tmp41 = f_tmp_48;
		funct = __tmp41;
		int f_tmp_49 = 15;
		int __tmp42 = f_tmp_49;
		Boolean[] f_tmp_50 = intLib.rightPublicShift(unsignExt, __tmp42);
		Boolean[] __tmp43 = f_tmp_50;
		int f_tmp_51 = 0;
		int __tmp44 = f_tmp_51;
		Boolean[] f_tmp_53 = env.inputOfAlice(Utils.fromInt(__tmp44, 32));
		Boolean f_tmp_52 = intLib.not(intLib.eq(__tmp43, f_tmp_53));
		Boolean __tmp45 = f_tmp_52;
		int f_tmp_54 = -65536;
		int __tmp46 = f_tmp_54;
		Boolean[] f_tmp_56 = env.inputOfAlice(Utils.fromInt(__tmp46, 32));
		Boolean[] f_tmp_55 = intLib.add(unsignExt,f_tmp_56);
		Boolean[] __tmp47 = f_tmp_55;
		Boolean[] f_tmp_57 = intLib.mux(unsignExt, __tmp47,__tmp45);
		Boolean[] __tmp48 = f_tmp_57;
		unsignExt = __tmp48;
		Boolean f_tmp_58 = intLib.not(__tmp45);
		Boolean __tmp49 = f_tmp_58;
		Boolean[] f_tmp_59 = reg.read(rs);
		Boolean[] __tmp50 = f_tmp_59;
		reg_rs = __tmp50;
		Boolean[] f_tmp_60 = reg.read(rt);
		Boolean[] __tmp51 = f_tmp_60;
		reg_rt = __tmp51;
		Boolean[] f_tmp_61 = reg.read(rd);
		Boolean[] __tmp52 = f_tmp_61;
		reg_rd = __tmp52;
		Boolean[] f_tmp_62 = this.checkType(op);
		Boolean[] __tmp53 = f_tmp_62;
		op_type = __tmp53;
		int f_tmp_63 = 2;
		int __tmp54 = f_tmp_63;
		Boolean[] f_tmp_65 = env.inputOfAlice(Utils.fromInt(__tmp54, 2));
		Boolean f_tmp_64 = intLib.eq(op_type, f_tmp_65);
		Boolean __tmp55 = f_tmp_64;
		int f_tmp_66 = 9;
		int __tmp56 = f_tmp_66;
		Boolean[] f_tmp_68 = env.inputOfAlice(Utils.fromInt(__tmp56, 32));
		Boolean f_tmp_67 = intLib.eq(op, f_tmp_68);
		Boolean __tmp57 = f_tmp_67;
		Boolean f_tmp_69 = intLib.and(__tmp55,__tmp57);
		Boolean __tmp58 = f_tmp_69;
		Boolean[] f_tmp_70 = intLib.add(reg_rs,unsignExt);
		Boolean[] __tmp59 = f_tmp_70;
		Boolean[] f_tmp_71 = intLib.mux(reg_rt, __tmp59,__tmp58);
		Boolean[] __tmp60 = f_tmp_71;
		reg_rt = __tmp60;
		Boolean f_tmp_72 = intLib.not(__tmp57);
		Boolean __tmp61 = f_tmp_72;
		Boolean f_tmp_73 = intLib.and(__tmp55,__tmp61);
		Boolean __tmp62 = f_tmp_73;
		int f_tmp_74 = 12;
		int __tmp63 = f_tmp_74;
		Boolean[] f_tmp_76 = env.inputOfAlice(Utils.fromInt(__tmp63, 32));
		Boolean f_tmp_75 = intLib.eq(op, f_tmp_76);
		Boolean __tmp64 = f_tmp_75;
		Boolean f_tmp_77 = intLib.and(__tmp62,__tmp64);
		Boolean __tmp65 = f_tmp_77;
		Boolean[] f_tmp_78 = intLib.and(reg_rs,zeroExt);
		Boolean[] __tmp66 = f_tmp_78;
		Boolean[] f_tmp_79 = intLib.mux(reg_rt, __tmp66,__tmp65);
		Boolean[] __tmp67 = f_tmp_79;
		reg_rt = __tmp67;
		Boolean f_tmp_80 = intLib.not(__tmp64);
		Boolean __tmp68 = f_tmp_80;
		Boolean f_tmp_81 = intLib.and(__tmp62,__tmp68);
		Boolean __tmp69 = f_tmp_81;
		int f_tmp_82 = 15;
		int __tmp70 = f_tmp_82;
		Boolean[] f_tmp_84 = env.inputOfAlice(Utils.fromInt(__tmp70, 32));
		Boolean f_tmp_83 = intLib.eq(op, f_tmp_84);
		Boolean __tmp71 = f_tmp_83;
		Boolean f_tmp_85 = intLib.and(__tmp69,__tmp71);
		Boolean __tmp72 = f_tmp_85;
		int f_tmp_86 = 16;
		int __tmp73 = f_tmp_86;
		Boolean[] f_tmp_87 = intLib.leftPublicShift(zeroExt, __tmp73);
		Boolean[] __tmp74 = f_tmp_87;
		Boolean[] f_tmp_88 = intLib.mux(reg_rt, __tmp74,__tmp72);
		Boolean[] __tmp75 = f_tmp_88;
		reg_rt = __tmp75;
		Boolean f_tmp_89 = intLib.not(__tmp71);
		Boolean __tmp76 = f_tmp_89;
		Boolean f_tmp_90 = intLib.and(__tmp69,__tmp76);
		Boolean __tmp77 = f_tmp_90;
		Boolean[] f_tmp_91 = reg.read(rt);
		Boolean[] __tmp78 = f_tmp_91;
		Boolean[] f_tmp_92 = intLib.mux(__tmp78, reg_rt,__tmp55);
		Boolean[] __tmp79 = f_tmp_92;
		reg.write(rt,__tmp79);
		Boolean f_tmp_93 = intLib.not(__tmp55);
		Boolean __tmp80 = f_tmp_93;
		int f_tmp_94 = 1;
		int __tmp81 = f_tmp_94;
		Boolean[] f_tmp_96 = env.inputOfAlice(Utils.fromInt(__tmp81, 2));
		Boolean f_tmp_95 = intLib.eq(op_type, f_tmp_96);
		Boolean __tmp82 = f_tmp_95;
		Boolean f_tmp_97 = intLib.and(__tmp80,__tmp82);
		Boolean __tmp83 = f_tmp_97;
		int f_tmp_98 = 33;
		int __tmp84 = f_tmp_98;
		Boolean[] f_tmp_100 = env.inputOfAlice(Utils.fromInt(__tmp84, 32));
		Boolean f_tmp_99 = intLib.eq(funct, f_tmp_100);
		Boolean __tmp85 = f_tmp_99;
		Boolean f_tmp_101 = intLib.and(__tmp83,__tmp85);
		Boolean __tmp86 = f_tmp_101;
		Boolean[] f_tmp_102 = intLib.add(reg_rs,reg_rt);
		Boolean[] __tmp87 = f_tmp_102;
		Boolean[] f_tmp_103 = intLib.mux(reg_rd, __tmp87,__tmp86);
		Boolean[] __tmp88 = f_tmp_103;
		reg_rd = __tmp88;
		Boolean f_tmp_104 = intLib.not(__tmp85);
		Boolean __tmp89 = f_tmp_104;
		Boolean f_tmp_105 = intLib.and(__tmp83,__tmp89);
		Boolean __tmp90 = f_tmp_105;
		int f_tmp_106 = 38;
		int __tmp91 = f_tmp_106;
		Boolean[] f_tmp_108 = env.inputOfAlice(Utils.fromInt(__tmp91, 32));
		Boolean f_tmp_107 = intLib.eq(funct, f_tmp_108);
		Boolean __tmp92 = f_tmp_107;
		Boolean f_tmp_109 = intLib.and(__tmp90,__tmp92);
		Boolean __tmp93 = f_tmp_109;
		Boolean[] f_tmp_110 = intLib.xor(reg_rs,reg_rt);
		Boolean[] __tmp94 = f_tmp_110;
		Boolean[] f_tmp_111 = intLib.mux(reg_rd, __tmp94,__tmp93);
		Boolean[] __tmp95 = f_tmp_111;
		reg_rd = __tmp95;
		Boolean f_tmp_112 = intLib.not(__tmp92);
		Boolean __tmp96 = f_tmp_112;
		Boolean f_tmp_113 = intLib.and(__tmp90,__tmp96);
		Boolean __tmp97 = f_tmp_113;
		int f_tmp_114 = 42;
		int __tmp98 = f_tmp_114;
		Boolean[] f_tmp_116 = env.inputOfAlice(Utils.fromInt(__tmp98, 32));
		Boolean f_tmp_115 = intLib.eq(funct, f_tmp_116);
		Boolean __tmp99 = f_tmp_115;
		Boolean f_tmp_117 = intLib.and(__tmp97,__tmp99);
		Boolean __tmp100 = f_tmp_117;
		Boolean f_tmp_118 = intLib.not(intLib.geq(reg_rs, reg_rt));
		Boolean __tmp101 = f_tmp_118;
		Boolean f_tmp_119 = intLib.and(__tmp100,__tmp101);
		Boolean __tmp102 = f_tmp_119;
		int f_tmp_120 = 1;
		int __tmp103 = f_tmp_120;
		Boolean[] f_tmp_122 = env.inputOfAlice(Utils.fromInt(__tmp103, 32));
		Boolean[] f_tmp_121 = intLib.mux(reg_rd, f_tmp_122,__tmp102);
		Boolean[] __tmp104 = f_tmp_121;
		reg_rd = __tmp104;
		Boolean f_tmp_123 = intLib.not(__tmp101);
		Boolean __tmp105 = f_tmp_123;
		Boolean f_tmp_124 = intLib.and(__tmp100,__tmp105);
		Boolean __tmp106 = f_tmp_124;
		int f_tmp_125 = 0;
		int __tmp107 = f_tmp_125;
		Boolean[] f_tmp_127 = env.inputOfAlice(Utils.fromInt(__tmp107, 32));
		Boolean[] f_tmp_126 = intLib.mux(reg_rd, f_tmp_127,__tmp106);
		Boolean[] __tmp108 = f_tmp_126;
		reg_rd = __tmp108;
		Boolean f_tmp_128 = intLib.not(__tmp99);
		Boolean __tmp109 = f_tmp_128;
		Boolean f_tmp_129 = intLib.and(__tmp97,__tmp109);
		Boolean __tmp110 = f_tmp_129;
		int f_tmp_130 = 35;
		int __tmp111 = f_tmp_130;
		Boolean[] f_tmp_132 = env.inputOfAlice(Utils.fromInt(__tmp111, 32));
		Boolean f_tmp_131 = intLib.eq(funct, f_tmp_132);
		Boolean __tmp112 = f_tmp_131;
		Boolean f_tmp_133 = intLib.and(__tmp110,__tmp112);
		Boolean __tmp113 = f_tmp_133;
		Boolean[] f_tmp_134 = intLib.sub(reg_rs,reg_rt);
		Boolean[] __tmp114 = f_tmp_134;
		Boolean[] f_tmp_135 = intLib.mux(reg_rd, __tmp114,__tmp113);
		Boolean[] __tmp115 = f_tmp_135;
		reg_rd = __tmp115;
		Boolean f_tmp_136 = intLib.not(__tmp112);
		Boolean __tmp116 = f_tmp_136;
		Boolean f_tmp_137 = intLib.and(__tmp110,__tmp116);
		Boolean __tmp117 = f_tmp_137;
		Boolean[] f_tmp_138 = reg.read(rd);
		Boolean[] __tmp118 = f_tmp_138;
		Boolean[] f_tmp_139 = intLib.mux(__tmp118, reg_rd,__tmp83);
		Boolean[] __tmp119 = f_tmp_139;
		reg.write(rd,__tmp119);
		Boolean f_tmp_140 = intLib.not(__tmp82);
		Boolean __tmp120 = f_tmp_140;
		Boolean f_tmp_141 = intLib.and(__tmp80,__tmp120);
		Boolean __tmp121 = f_tmp_141;
		int f_tmp_142 = 3;
		int __tmp122 = f_tmp_142;
		Boolean[] f_tmp_144 = env.inputOfAlice(Utils.fromInt(__tmp122, 32));
		Boolean f_tmp_143 = intLib.eq(op, f_tmp_144);
		Boolean __tmp123 = f_tmp_143;
		Boolean f_tmp_145 = intLib.and(__tmp121,__tmp123);
		Boolean __tmp124 = f_tmp_145;
		int f_tmp_146 = 8;
		int __tmp125 = f_tmp_146;
		Boolean[] f_tmp_148 = env.inputOfAlice(Utils.fromInt(__tmp125, 32));
		Boolean[] f_tmp_147 = intLib.add(pc,f_tmp_148);
		Boolean[] __tmp126 = f_tmp_147;
		Boolean[] f_tmp_149 = intLib.mux(reg_31, __tmp126,__tmp124);
		Boolean[] __tmp127 = f_tmp_149;
		reg_31 = __tmp127;
		int f_tmp_150 = 6;
		int __tmp128 = f_tmp_150;
		Boolean[] f_tmp_151 = intLib.leftPublicShift(inst, __tmp128);
		Boolean[] __tmp129 = f_tmp_151;
		int f_tmp_152 = 6;
		int __tmp130 = f_tmp_152;
		Boolean[] f_tmp_153 = intLib.rightPublicShift(__tmp129, __tmp130);
		Boolean[] __tmp131 = f_tmp_153;
		Boolean[] f_tmp_154 = intLib.mux(pc, __tmp131,__tmp124);
		Boolean[] __tmp132 = f_tmp_154;
		pc = __tmp132;
		Boolean f_tmp_155 = intLib.not(__tmp123);
		Boolean __tmp133 = f_tmp_155;
		Boolean f_tmp_156 = intLib.and(__tmp121,__tmp133);
		Boolean __tmp134 = f_tmp_156;
		int f_tmp_157 = 1;
		int __tmp135 = f_tmp_157;
		Boolean[] f_tmp_159 = env.inputOfAlice(Utils.fromInt(__tmp135, 32));
		Boolean f_tmp_158 = intLib.eq(op, f_tmp_159);
		Boolean __tmp136 = f_tmp_158;
		Boolean f_tmp_160 = intLib.and(__tmp134,__tmp136);
		Boolean __tmp137 = f_tmp_160;
		int f_tmp_161 = 8;
		int __tmp138 = f_tmp_161;
		Boolean[] f_tmp_163 = env.inputOfAlice(Utils.fromInt(__tmp138, 32));
		Boolean[] f_tmp_162 = intLib.add(pc,f_tmp_163);
		Boolean[] __tmp139 = f_tmp_162;
		Boolean[] f_tmp_164 = intLib.mux(reg_31, __tmp139,__tmp137);
		Boolean[] __tmp140 = f_tmp_164;
		reg_31 = __tmp140;
		int f_tmp_165 = 0;
		int __tmp141 = f_tmp_165;
		Boolean[] f_tmp_167 = env.inputOfAlice(Utils.fromInt(__tmp141, 32));
		Boolean f_tmp_166 = intLib.geq(reg_rt, f_tmp_167);
		Boolean __tmp142 = f_tmp_166;
		Boolean f_tmp_168 = intLib.and(__tmp137,__tmp142);
		Boolean __tmp143 = f_tmp_168;
		int f_tmp_169 = 2;
		int __tmp144 = f_tmp_169;
		Boolean[] f_tmp_170 = intLib.leftPublicShift(unsignExt, __tmp144);
		Boolean[] __tmp145 = f_tmp_170;
		Boolean[] f_tmp_171 = intLib.add(pc,__tmp145);
		Boolean[] __tmp146 = f_tmp_171;
		Boolean[] f_tmp_172 = intLib.mux(pc, __tmp146,__tmp143);
		Boolean[] __tmp147 = f_tmp_172;
		pc = __tmp147;
		Boolean f_tmp_173 = intLib.not(__tmp142);
		Boolean __tmp148 = f_tmp_173;
		Boolean f_tmp_174 = intLib.and(__tmp137,__tmp148);
		Boolean __tmp149 = f_tmp_174;
		Boolean f_tmp_175 = intLib.not(__tmp136);
		Boolean __tmp150 = f_tmp_175;
		Boolean f_tmp_176 = intLib.and(__tmp134,__tmp150);
		Boolean __tmp151 = f_tmp_176;
		int f_tmp_177 = 3;
		int __tmp152 = f_tmp_177;
		Boolean[] f_tmp_179 = env.inputOfAlice(Utils.fromInt(__tmp152, 32));
		Boolean f_tmp_178 = intLib.eq(op, f_tmp_179);
		Boolean __tmp153 = f_tmp_178;
		int f_tmp_180 = 1;
		int __tmp154 = f_tmp_180;
		Boolean[] f_tmp_182 = env.inputOfAlice(Utils.fromInt(__tmp154, 32));
		Boolean f_tmp_181 = intLib.eq(op, f_tmp_182);
		Boolean __tmp155 = f_tmp_181;
		Boolean f_tmp_183 = intLib.or(__tmp153,__tmp155);
		Boolean __tmp156 = f_tmp_183;
		Boolean f_tmp_184 = intLib.and(__tmp121,__tmp156);
		Boolean __tmp157 = f_tmp_184;
		int f_tmp_185 = 31;
		int __tmp158 = f_tmp_185;
		Boolean[] f_tmp_187 = env.inputOfAlice(Utils.fromInt(__tmp158, 32));
		Boolean[] f_tmp_186 = reg.read(f_tmp_187);
		Boolean[] __tmp159 = f_tmp_186;
		Boolean[] f_tmp_188 = intLib.mux(__tmp159, reg_31,__tmp157);
		Boolean[] __tmp160 = f_tmp_188;
		Boolean[] f_tmp_189 = env.inputOfAlice(Utils.fromInt(__tmp158, 32));
		reg.write(f_tmp_189,__tmp160);
		Boolean f_tmp_190 = intLib.not(__tmp156);
		Boolean __tmp161 = f_tmp_190;
		Boolean f_tmp_191 = intLib.and(__tmp121,__tmp161);
		Boolean __tmp162 = f_tmp_191;
		int f_tmp_192 = 0;
		int __tmp163 = f_tmp_192;
		Boolean[] f_tmp_194 = env.inputOfAlice(Utils.fromInt(__tmp163, 32));
		Boolean f_tmp_193 = intLib.eq(op, f_tmp_194);
		Boolean __tmp164 = f_tmp_193;
		int f_tmp_195 = 8;
		int __tmp165 = f_tmp_195;
		Boolean[] f_tmp_197 = env.inputOfAlice(Utils.fromInt(__tmp165, 32));
		Boolean f_tmp_196 = intLib.eq(funct, f_tmp_197);
		Boolean __tmp166 = f_tmp_196;
		Boolean f_tmp_198 = intLib.and(__tmp164,__tmp166);
		Boolean __tmp167 = f_tmp_198;
		Boolean[] f_tmp_199 = intLib.mux(pc, reg_rs,__tmp167);
		Boolean[] __tmp168 = f_tmp_199;
		pc = __tmp168;
		Boolean f_tmp_200 = intLib.not(__tmp167);
		Boolean __tmp169 = f_tmp_200;
		int f_tmp_201 = 3;
		int __tmp170 = f_tmp_201;
		Boolean[] f_tmp_203 = env.inputOfAlice(Utils.fromInt(__tmp170, 32));
		Boolean f_tmp_202 = intLib.eq(op, f_tmp_203);
		Boolean __tmp171 = f_tmp_202;
		Boolean f_tmp_204 = intLib.and(__tmp169,__tmp171);
		Boolean __tmp172 = f_tmp_204;
		int f_tmp_205 = 6;
		int __tmp173 = f_tmp_205;
		Boolean[] f_tmp_206 = intLib.leftPublicShift(inst, __tmp173);
		Boolean[] __tmp174 = f_tmp_206;
		int f_tmp_207 = 6;
		int __tmp175 = f_tmp_207;
		Boolean[] f_tmp_208 = intLib.rightPublicShift(__tmp174, __tmp175);
		Boolean[] __tmp176 = f_tmp_208;
		Boolean[] f_tmp_209 = intLib.mux(pc, __tmp176,__tmp172);
		Boolean[] __tmp177 = f_tmp_209;
		pc = __tmp177;
		Boolean f_tmp_210 = intLib.not(__tmp171);
		Boolean __tmp178 = f_tmp_210;
		Boolean f_tmp_211 = intLib.and(__tmp169,__tmp178);
		Boolean __tmp179 = f_tmp_211;
		int f_tmp_212 = 5;
		int __tmp180 = f_tmp_212;
		Boolean[] f_tmp_214 = env.inputOfAlice(Utils.fromInt(__tmp180, 32));
		Boolean f_tmp_213 = intLib.eq(op, f_tmp_214);
		Boolean __tmp181 = f_tmp_213;
		Boolean f_tmp_215 = intLib.not(intLib.eq(reg_rs, reg_rt));
		Boolean __tmp182 = f_tmp_215;
		Boolean f_tmp_216 = intLib.and(__tmp181,__tmp182);
		Boolean __tmp183 = f_tmp_216;
		int f_tmp_217 = 4;
		int __tmp184 = f_tmp_217;
		Boolean[] f_tmp_219 = env.inputOfAlice(Utils.fromInt(__tmp184, 32));
		Boolean f_tmp_218 = intLib.eq(op, f_tmp_219);
		Boolean __tmp185 = f_tmp_218;
		Boolean f_tmp_220 = intLib.eq(reg_rs, reg_rt);
		Boolean __tmp186 = f_tmp_220;
		Boolean f_tmp_221 = intLib.and(__tmp185,__tmp186);
		Boolean __tmp187 = f_tmp_221;
		Boolean f_tmp_222 = intLib.or(__tmp183,__tmp187);
		Boolean __tmp188 = f_tmp_222;
		Boolean f_tmp_223 = intLib.and(__tmp179,__tmp188);
		Boolean __tmp189 = f_tmp_223;
		int f_tmp_224 = 2;
		int __tmp190 = f_tmp_224;
		Boolean[] f_tmp_225 = intLib.leftPublicShift(unsignExt, __tmp190);
		Boolean[] __tmp191 = f_tmp_225;
		Boolean[] f_tmp_226 = intLib.add(pc,__tmp191);
		Boolean[] __tmp192 = f_tmp_226;
		Boolean[] f_tmp_227 = intLib.mux(pc, __tmp192,__tmp189);
		Boolean[] __tmp193 = f_tmp_227;
		pc = __tmp193;
		Boolean f_tmp_228 = intLib.not(__tmp188);
		Boolean __tmp194 = f_tmp_228;
		Boolean f_tmp_229 = intLib.and(__tmp179,__tmp194);
		Boolean __tmp195 = f_tmp_229;
		int f_tmp_230 = 4;
		int __tmp196 = f_tmp_230;
		Boolean[] f_tmp_232 = env.inputOfAlice(Utils.fromInt(__tmp196, 32));
		Boolean[] f_tmp_231 = intLib.add(pc,f_tmp_232);
		Boolean[] __tmp197 = f_tmp_231;
		Boolean[] f_tmp_233 = intLib.mux(pc, __tmp197,__tmp195);
		Boolean[] __tmp198 = f_tmp_233;
		pc = __tmp198;
		return pc;
	}
}
