package compiledlib.dov;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class CPU implements IWritable<CPU, Boolean> {

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	public FloatLib<Boolean> floatLib;

	public CPU(CompEnv<Boolean> env) throws Exception {
		this.env = env;
		this.intLib = new IntegerLib<Boolean>(env);
		this.floatLib = new FloatLib<Boolean>(env, 24, 8);
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp_b;
		Boolean tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = intLib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] i = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		i = env.inputOfAlice(Utils.fromInt(__tmp0, 32));
		int f_tmp_1 = 26;
		int __tmp1 = f_tmp_1;
		Boolean[] f_tmp_2 = intLib.rightPublicShift(inst, __tmp1);
		Boolean[] __tmp2 = f_tmp_2;
		op = __tmp2;
		int f_tmp_3 = 11;
		int __tmp3 = f_tmp_3;
		Boolean[] f_tmp_4 = intLib.leftPublicShift(inst, __tmp3);
		Boolean[] __tmp4 = f_tmp_4;
		int f_tmp_5 = 27;
		int __tmp5 = f_tmp_5;
		Boolean[] f_tmp_6 = intLib.rightPublicShift(__tmp4, __tmp5);
		Boolean[] __tmp6 = f_tmp_6;
		rt = __tmp6;
		int f_tmp_7 = 6;
		int __tmp7 = f_tmp_7;
		Boolean[] f_tmp_8 = intLib.leftPublicShift(inst, __tmp7);
		Boolean[] __tmp8 = f_tmp_8;
		int f_tmp_9 = 27;
		int __tmp9 = f_tmp_9;
		Boolean[] f_tmp_10 = intLib.rightPublicShift(__tmp8, __tmp9);
		Boolean[] __tmp10 = f_tmp_10;
		rs = __tmp10;
		int f_tmp_11 = 16;
		int __tmp11 = f_tmp_11;
		Boolean[] f_tmp_12 = intLib.leftPublicShift(inst, __tmp11);
		Boolean[] __tmp12 = f_tmp_12;
		int f_tmp_13 = 27;
		int __tmp13 = f_tmp_13;
		Boolean[] f_tmp_14 = intLib.rightPublicShift(__tmp12, __tmp13);
		Boolean[] __tmp14 = f_tmp_14;
		rd = __tmp14;
		int f_tmp_15 = 16;
		int __tmp15 = f_tmp_15;
		Boolean[] f_tmp_16 = intLib.leftPublicShift(inst, __tmp15);
		Boolean[] __tmp16 = f_tmp_16;
		int f_tmp_17 = 16;
		int __tmp17 = f_tmp_17;
		Boolean[] f_tmp_18 = intLib.rightPublicShift(__tmp16, __tmp17);
		Boolean[] __tmp18 = f_tmp_18;
		unsignExt = __tmp18;
		zeroExt = unsignExt;
		int f_tmp_19 = 0;
		int __tmp19 = f_tmp_19;
		funct = env.inputOfAlice(Utils.fromInt(__tmp19, 32));
		int f_tmp_20 = 15;
		int __tmp20 = f_tmp_20;
		Boolean[] f_tmp_21 = intLib.rightPublicShift(unsignExt, __tmp20);
		Boolean[] __tmp21 = f_tmp_21;
		int f_tmp_22 = 0;
		int __tmp22 = f_tmp_22;
		Boolean[] f_tmp_24 = env.inputOfAlice(Utils.fromInt(__tmp22, 32));
		Boolean f_tmp_23 = intLib.not(intLib.eq(__tmp21, f_tmp_24));
		Boolean __tmp23 = f_tmp_23;
		int f_tmp_25 = -65536;
		int __tmp24 = f_tmp_25;
		Boolean[] f_tmp_27 = env.inputOfAlice(Utils.fromInt(__tmp24, 32));
		Boolean[] f_tmp_26 = intLib.add(unsignExt,f_tmp_27);
		Boolean[] __tmp25 = f_tmp_26;
		Boolean[] f_tmp_28 = intLib.mux(unsignExt, __tmp25,__tmp23);
		Boolean[] __tmp26 = f_tmp_28;
		unsignExt = __tmp26;
		Boolean f_tmp_29 = intLib.not(__tmp23);
		Boolean __tmp27 = f_tmp_29;
		int f_tmp_30 = 9;
		int __tmp28 = f_tmp_30;
		Boolean[] f_tmp_32 = env.inputOfAlice(Utils.fromInt(__tmp28, 32));
		Boolean f_tmp_31 = intLib.eq(op, f_tmp_32);
		Boolean __tmp29 = f_tmp_31;
		Boolean[] f_tmp_33 = reg.read(rs);
		Boolean[] __tmp30 = f_tmp_33;
		Boolean[] f_tmp_34 = intLib.add(__tmp30,unsignExt);
		Boolean[] __tmp31 = f_tmp_34;
		Boolean[] f_tmp_35 = reg.read(rt);
		Boolean[] __tmp32 = f_tmp_35;
		Boolean[] f_tmp_36 = intLib.mux(__tmp32, __tmp31,__tmp29);
		Boolean[] __tmp33 = f_tmp_36;
		reg.write(rt,__tmp33);
		Boolean f_tmp_37 = intLib.not(__tmp29);
		Boolean __tmp34 = f_tmp_37;
		int f_tmp_38 = 3;
		int __tmp35 = f_tmp_38;
		Boolean[] f_tmp_40 = env.inputOfAlice(Utils.fromInt(__tmp35, 32));
		Boolean f_tmp_39 = intLib.eq(op, f_tmp_40);
		Boolean __tmp36 = f_tmp_39;
		int f_tmp_41 = 1;
		int __tmp37 = f_tmp_41;
		Boolean[] f_tmp_43 = env.inputOfAlice(Utils.fromInt(__tmp37, 32));
		Boolean f_tmp_42 = intLib.eq(op, f_tmp_43);
		Boolean __tmp38 = f_tmp_42;
		Boolean f_tmp_44 = intLib.or(__tmp36,__tmp38);
		Boolean __tmp39 = f_tmp_44;
		Boolean f_tmp_45 = intLib.and(__tmp34,__tmp39);
		Boolean __tmp40 = f_tmp_45;
		int f_tmp_46 = 8;
		int __tmp41 = f_tmp_46;
		Boolean[] f_tmp_48 = env.inputOfAlice(Utils.fromInt(__tmp41, 32));
		Boolean[] f_tmp_47 = intLib.add(pc,f_tmp_48);
		Boolean[] __tmp42 = f_tmp_47;
		int f_tmp_49 = 31;
		int __tmp43 = f_tmp_49;
		Boolean[] f_tmp_51 = env.inputOfAlice(Utils.fromInt(__tmp43, 32));
		Boolean[] f_tmp_50 = reg.read(f_tmp_51);
		Boolean[] __tmp44 = f_tmp_50;
		Boolean[] f_tmp_52 = intLib.mux(__tmp44, __tmp42,__tmp40);
		Boolean[] __tmp45 = f_tmp_52;
		Boolean[] f_tmp_53 = env.inputOfAlice(Utils.fromInt(__tmp43, 32));
		reg.write(f_tmp_53,__tmp45);
		Boolean f_tmp_54 = intLib.not(__tmp39);
		Boolean __tmp46 = f_tmp_54;
		Boolean f_tmp_55 = intLib.and(__tmp34,__tmp46);
		Boolean __tmp47 = f_tmp_55;
		int f_tmp_56 = 12;
		int __tmp48 = f_tmp_56;
		Boolean[] f_tmp_58 = env.inputOfAlice(Utils.fromInt(__tmp48, 32));
		Boolean f_tmp_57 = intLib.eq(op, f_tmp_58);
		Boolean __tmp49 = f_tmp_57;
		Boolean f_tmp_59 = intLib.and(__tmp47,__tmp49);
		Boolean __tmp50 = f_tmp_59;
		Boolean[] f_tmp_60 = reg.read(rs);
		Boolean[] __tmp51 = f_tmp_60;
		Boolean[] f_tmp_61 = intLib.and(__tmp51,zeroExt);
		Boolean[] __tmp52 = f_tmp_61;
		Boolean[] f_tmp_62 = reg.read(rt);
		Boolean[] __tmp53 = f_tmp_62;
		Boolean[] f_tmp_63 = intLib.mux(__tmp53, __tmp52,__tmp50);
		Boolean[] __tmp54 = f_tmp_63;
		reg.write(rt,__tmp54);
		Boolean f_tmp_64 = intLib.not(__tmp49);
		Boolean __tmp55 = f_tmp_64;
		Boolean f_tmp_65 = intLib.and(__tmp47,__tmp55);
		Boolean __tmp56 = f_tmp_65;
		int f_tmp_66 = 0;
		int __tmp57 = f_tmp_66;
		Boolean[] f_tmp_68 = env.inputOfAlice(Utils.fromInt(__tmp57, 32));
		Boolean f_tmp_67 = intLib.eq(op, f_tmp_68);
		Boolean __tmp58 = f_tmp_67;
		Boolean f_tmp_69 = intLib.and(__tmp56,__tmp58);
		Boolean __tmp59 = f_tmp_69;
		int f_tmp_70 = 26;
		int __tmp60 = f_tmp_70;
		Boolean[] f_tmp_71 = intLib.leftPublicShift(inst, __tmp60);
		Boolean[] __tmp61 = f_tmp_71;
		int f_tmp_72 = 26;
		int __tmp62 = f_tmp_72;
		Boolean[] f_tmp_73 = intLib.rightPublicShift(__tmp61, __tmp62);
		Boolean[] __tmp63 = f_tmp_73;
		Boolean[] f_tmp_74 = intLib.mux(funct, __tmp63,__tmp59);
		Boolean[] __tmp64 = f_tmp_74;
		funct = __tmp64;
		int f_tmp_75 = 33;
		int __tmp65 = f_tmp_75;
		Boolean[] f_tmp_77 = env.inputOfAlice(Utils.fromInt(__tmp65, 32));
		Boolean f_tmp_76 = intLib.eq(funct, f_tmp_77);
		Boolean __tmp66 = f_tmp_76;
		Boolean f_tmp_78 = intLib.and(__tmp59,__tmp66);
		Boolean __tmp67 = f_tmp_78;
		Boolean[] f_tmp_79 = reg.read(rs);
		Boolean[] __tmp68 = f_tmp_79;
		Boolean[] f_tmp_80 = reg.read(rt);
		Boolean[] __tmp69 = f_tmp_80;
		Boolean[] f_tmp_81 = intLib.add(__tmp68,__tmp69);
		Boolean[] __tmp70 = f_tmp_81;
		Boolean[] f_tmp_82 = reg.read(rd);
		Boolean[] __tmp71 = f_tmp_82;
		Boolean[] f_tmp_83 = intLib.mux(__tmp71, __tmp70,__tmp67);
		Boolean[] __tmp72 = f_tmp_83;
		reg.write(rd,__tmp72);
		Boolean f_tmp_84 = intLib.not(__tmp66);
		Boolean __tmp73 = f_tmp_84;
		Boolean f_tmp_85 = intLib.and(__tmp59,__tmp73);
		Boolean __tmp74 = f_tmp_85;
		int f_tmp_86 = 38;
		int __tmp75 = f_tmp_86;
		Boolean[] f_tmp_88 = env.inputOfAlice(Utils.fromInt(__tmp75, 32));
		Boolean f_tmp_87 = intLib.eq(funct, f_tmp_88);
		Boolean __tmp76 = f_tmp_87;
		Boolean f_tmp_89 = intLib.and(__tmp74,__tmp76);
		Boolean __tmp77 = f_tmp_89;
		Boolean[] f_tmp_90 = reg.read(rs);
		Boolean[] __tmp78 = f_tmp_90;
		Boolean[] f_tmp_91 = reg.read(rt);
		Boolean[] __tmp79 = f_tmp_91;
		Boolean[] f_tmp_92 = intLib.xor(__tmp78,__tmp79);
		Boolean[] __tmp80 = f_tmp_92;
		Boolean[] f_tmp_93 = reg.read(rd);
		Boolean[] __tmp81 = f_tmp_93;
		Boolean[] f_tmp_94 = intLib.mux(__tmp81, __tmp80,__tmp77);
		Boolean[] __tmp82 = f_tmp_94;
		reg.write(rd,__tmp82);
		Boolean f_tmp_95 = intLib.not(__tmp76);
		Boolean __tmp83 = f_tmp_95;
		Boolean f_tmp_96 = intLib.and(__tmp74,__tmp83);
		Boolean __tmp84 = f_tmp_96;
		int f_tmp_97 = 42;
		int __tmp85 = f_tmp_97;
		Boolean[] f_tmp_99 = env.inputOfAlice(Utils.fromInt(__tmp85, 32));
		Boolean f_tmp_98 = intLib.eq(funct, f_tmp_99);
		Boolean __tmp86 = f_tmp_98;
		Boolean f_tmp_100 = intLib.and(__tmp84,__tmp86);
		Boolean __tmp87 = f_tmp_100;
		Boolean[] f_tmp_101 = reg.read(rs);
		Boolean[] __tmp88 = f_tmp_101;
		Boolean[] f_tmp_102 = reg.read(rt);
		Boolean[] __tmp89 = f_tmp_102;
		Boolean f_tmp_103 = intLib.not(intLib.geq(__tmp88, __tmp89));
		Boolean __tmp90 = f_tmp_103;
		Boolean f_tmp_104 = intLib.and(__tmp87,__tmp90);
		Boolean __tmp91 = f_tmp_104;
		int f_tmp_105 = 1;
		int __tmp92 = f_tmp_105;
		Boolean[] f_tmp_106 = reg.read(rd);
		Boolean[] __tmp93 = f_tmp_106;
		Boolean[] f_tmp_108 = env.inputOfAlice(Utils.fromInt(__tmp92, 32));
		Boolean[] f_tmp_107 = intLib.mux(__tmp93, f_tmp_108,__tmp91);
		Boolean[] __tmp94 = f_tmp_107;
		reg.write(rd,__tmp94);
		Boolean f_tmp_109 = intLib.not(__tmp90);
		Boolean __tmp95 = f_tmp_109;
		Boolean f_tmp_110 = intLib.and(__tmp87,__tmp95);
		Boolean __tmp96 = f_tmp_110;
		int f_tmp_111 = 0;
		int __tmp97 = f_tmp_111;
		Boolean[] f_tmp_112 = reg.read(rd);
		Boolean[] __tmp98 = f_tmp_112;
		Boolean[] f_tmp_114 = env.inputOfAlice(Utils.fromInt(__tmp97, 32));
		Boolean[] f_tmp_113 = intLib.mux(__tmp98, f_tmp_114,__tmp96);
		Boolean[] __tmp99 = f_tmp_113;
		reg.write(rd,__tmp99);
		Boolean f_tmp_115 = intLib.not(__tmp86);
		Boolean __tmp100 = f_tmp_115;
		Boolean f_tmp_116 = intLib.and(__tmp84,__tmp100);
		Boolean __tmp101 = f_tmp_116;
		int f_tmp_117 = 35;
		int __tmp102 = f_tmp_117;
		Boolean[] f_tmp_119 = env.inputOfAlice(Utils.fromInt(__tmp102, 32));
		Boolean f_tmp_118 = intLib.eq(funct, f_tmp_119);
		Boolean __tmp103 = f_tmp_118;
		Boolean f_tmp_120 = intLib.and(__tmp101,__tmp103);
		Boolean __tmp104 = f_tmp_120;
		Boolean[] f_tmp_121 = reg.read(rs);
		Boolean[] __tmp105 = f_tmp_121;
		Boolean[] f_tmp_122 = reg.read(rt);
		Boolean[] __tmp106 = f_tmp_122;
		Boolean[] f_tmp_123 = intLib.sub(__tmp105,__tmp106);
		Boolean[] __tmp107 = f_tmp_123;
		Boolean[] f_tmp_124 = reg.read(rd);
		Boolean[] __tmp108 = f_tmp_124;
		Boolean[] f_tmp_125 = intLib.mux(__tmp108, __tmp107,__tmp104);
		Boolean[] __tmp109 = f_tmp_125;
		reg.write(rd,__tmp109);
		Boolean f_tmp_126 = intLib.not(__tmp103);
		Boolean __tmp110 = f_tmp_126;
		Boolean f_tmp_127 = intLib.and(__tmp101,__tmp110);
		Boolean __tmp111 = f_tmp_127;
		Boolean f_tmp_128 = intLib.not(__tmp58);
		Boolean __tmp112 = f_tmp_128;
		Boolean f_tmp_129 = intLib.and(__tmp56,__tmp112);
		Boolean __tmp113 = f_tmp_129;
		int f_tmp_130 = 8;
		int __tmp114 = f_tmp_130;
		Boolean[] f_tmp_132 = env.inputOfAlice(Utils.fromInt(__tmp114, 32));
		Boolean f_tmp_131 = intLib.eq(op, f_tmp_132);
		Boolean __tmp115 = f_tmp_131;
		Boolean[] f_tmp_133 = reg.read(rs);
		Boolean[] __tmp116 = f_tmp_133;
		Boolean[] f_tmp_134 = intLib.mux(pc, __tmp116,__tmp115);
		Boolean[] __tmp117 = f_tmp_134;
		pc = __tmp117;
		Boolean f_tmp_135 = intLib.not(__tmp115);
		Boolean __tmp118 = f_tmp_135;
		int f_tmp_136 = 3;
		int __tmp119 = f_tmp_136;
		Boolean[] f_tmp_138 = env.inputOfAlice(Utils.fromInt(__tmp119, 32));
		Boolean f_tmp_137 = intLib.eq(op, f_tmp_138);
		Boolean __tmp120 = f_tmp_137;
		Boolean f_tmp_139 = intLib.and(__tmp118,__tmp120);
		Boolean __tmp121 = f_tmp_139;
		int f_tmp_140 = 6;
		int __tmp122 = f_tmp_140;
		Boolean[] f_tmp_141 = intLib.leftPublicShift(inst, __tmp122);
		Boolean[] __tmp123 = f_tmp_141;
		int f_tmp_142 = 6;
		int __tmp124 = f_tmp_142;
		Boolean[] f_tmp_143 = intLib.rightPublicShift(__tmp123, __tmp124);
		Boolean[] __tmp125 = f_tmp_143;
		Boolean[] f_tmp_144 = intLib.mux(pc, __tmp125,__tmp121);
		Boolean[] __tmp126 = f_tmp_144;
		pc = __tmp126;
		Boolean f_tmp_145 = intLib.not(__tmp120);
		Boolean __tmp127 = f_tmp_145;
		Boolean f_tmp_146 = intLib.and(__tmp118,__tmp127);
		Boolean __tmp128 = f_tmp_146;
		int f_tmp_147 = 5;
		int __tmp129 = f_tmp_147;
		Boolean[] f_tmp_149 = env.inputOfAlice(Utils.fromInt(__tmp129, 32));
		Boolean f_tmp_148 = intLib.eq(op, f_tmp_149);
		Boolean __tmp130 = f_tmp_148;
		Boolean[] f_tmp_150 = reg.read(rs);
		Boolean[] __tmp131 = f_tmp_150;
		Boolean[] f_tmp_151 = reg.read(rt);
		Boolean[] __tmp132 = f_tmp_151;
		Boolean f_tmp_152 = intLib.not(intLib.eq(__tmp131, __tmp132));
		Boolean __tmp133 = f_tmp_152;
		Boolean f_tmp_153 = intLib.and(__tmp130,__tmp133);
		Boolean __tmp134 = f_tmp_153;
		int f_tmp_154 = 4;
		int __tmp135 = f_tmp_154;
		Boolean[] f_tmp_156 = env.inputOfAlice(Utils.fromInt(__tmp135, 32));
		Boolean f_tmp_155 = intLib.eq(op, f_tmp_156);
		Boolean __tmp136 = f_tmp_155;
		Boolean[] f_tmp_157 = reg.read(rs);
		Boolean[] __tmp137 = f_tmp_157;
		Boolean[] f_tmp_158 = reg.read(rt);
		Boolean[] __tmp138 = f_tmp_158;
		Boolean f_tmp_159 = intLib.eq(__tmp137, __tmp138);
		Boolean __tmp139 = f_tmp_159;
		Boolean f_tmp_160 = intLib.and(__tmp136,__tmp139);
		Boolean __tmp140 = f_tmp_160;
		Boolean f_tmp_161 = intLib.or(__tmp134,__tmp140);
		Boolean __tmp141 = f_tmp_161;
		Boolean f_tmp_162 = intLib.and(__tmp128,__tmp141);
		Boolean __tmp142 = f_tmp_162;
		int f_tmp_163 = 2;
		int __tmp143 = f_tmp_163;
		Boolean[] f_tmp_164 = intLib.leftPublicShift(unsignExt, __tmp143);
		Boolean[] __tmp144 = f_tmp_164;
		Boolean[] f_tmp_165 = intLib.add(pc,__tmp144);
		Boolean[] __tmp145 = f_tmp_165;
		Boolean[] f_tmp_166 = intLib.mux(pc, __tmp145,__tmp142);
		Boolean[] __tmp146 = f_tmp_166;
		pc = __tmp146;
		Boolean f_tmp_167 = intLib.not(__tmp141);
		Boolean __tmp147 = f_tmp_167;
		Boolean f_tmp_168 = intLib.and(__tmp128,__tmp147);
		Boolean __tmp148 = f_tmp_168;
		int f_tmp_169 = 4;
		int __tmp149 = f_tmp_169;
		Boolean[] f_tmp_171 = env.inputOfAlice(Utils.fromInt(__tmp149, 32));
		Boolean[] f_tmp_170 = intLib.add(pc,f_tmp_171);
		Boolean[] __tmp150 = f_tmp_170;
		Boolean[] f_tmp_172 = intLib.mux(pc, __tmp150,__tmp148);
		Boolean[] __tmp151 = f_tmp_172;
		pc = __tmp151;
		return pc;
	}
}
