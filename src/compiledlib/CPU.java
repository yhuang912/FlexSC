package compiledlib;
import oram.SecureArray;
import util.Utils;
import circuits.IntegerLib;
import flexsc.CompEnv;
import flexsc.IWritable;
public class CPU implements IWritable<CPU, Boolean> {

	private CompEnv<Boolean> env;
	private IntegerLib<Boolean> lib;

	public CPU(CompEnv<Boolean> env, IntegerLib<Boolean> lib) throws Exception {
		this.env = env;
		this.lib = lib;
	}

	public int numBits() {
		return 0;
	}
	public Boolean[] getBits() {
		Boolean[] ret = new Boolean[this.numBits()];
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public CPU newObj(Boolean[] data) throws Exception {
		if(data == null) {
			data = new Boolean[this.numBits()];
			for(int i=0; i<this.numBits(); ++i) { data[i] = lib.SIGNAL_ZERO; }
		}
		if(data.length != this.numBits()) return null;
		CPU ret = new CPU(env, lib);
		Boolean[] tmp;
		int now = 0;
		return ret;
}

	public Boolean[] function(SecureArray<Boolean> reg, Boolean[] inst, Boolean[] pc) throws Exception {
		Boolean[] i = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] op = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rs = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] rd = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] unsignExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] zeroExt = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] funct = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_0 = 0;
		int __tmp0 = f_tmp_0;
		i = env.inputOfAlice(Utils.fromInt(__tmp0, 32));
		Boolean[] f_tmp_1 = lib.rightPublicShift(inst, 26);
		Boolean[] __tmp1 = f_tmp_1;
		op = __tmp1;
		Boolean[] f_tmp_2 = lib.leftPublicShift(inst, 11);
		Boolean[] __tmp2 = f_tmp_2;
		Boolean[] f_tmp_3 = lib.rightPublicShift(__tmp2, 27);
		Boolean[] __tmp3 = f_tmp_3;
		rt = __tmp3;
		Boolean[] f_tmp_4 = lib.leftPublicShift(inst, 6);
		Boolean[] __tmp4 = f_tmp_4;
		Boolean[] f_tmp_5 = lib.rightPublicShift(__tmp4, 27);
		Boolean[] __tmp5 = f_tmp_5;
		rs = __tmp5;
		Boolean[] f_tmp_6 = lib.leftPublicShift(inst, 16);
		Boolean[] __tmp6 = f_tmp_6;
		Boolean[] f_tmp_7 = lib.rightPublicShift(__tmp6, 27);
		Boolean[] __tmp7 = f_tmp_7;
		rd = __tmp7;
		Boolean[] f_tmp_8 = lib.leftPublicShift(inst, 16);
		Boolean[] __tmp8 = f_tmp_8;
		Boolean[] f_tmp_9 = lib.rightPublicShift(__tmp8, 16);
		Boolean[] __tmp9 = f_tmp_9;
		unsignExt = __tmp9;
		zeroExt = unsignExt;
		int f_tmp_10 = 0;
		int __tmp10 = f_tmp_10;
		funct = env.inputOfAlice(Utils.fromInt(__tmp10, 32));
		Boolean[] f_tmp_11 = lib.rightPublicShift(unsignExt, 15);
		Boolean[] __tmp11 = f_tmp_11;
		int f_tmp_12 = 0;
		int __tmp12 = f_tmp_12;
		Boolean[] f_tmp_14 = env.inputOfAlice(Utils.fromInt(__tmp12, 32));
		Boolean f_tmp_13 = lib.not(lib.eq(__tmp11, f_tmp_14));
		Boolean __tmp13 = f_tmp_13;
		int f_tmp_15 = -65536;
		int __tmp14 = f_tmp_15;
		Boolean[] f_tmp_17 = env.inputOfAlice(Utils.fromInt(__tmp14, 32));
		Boolean[] f_tmp_16 = lib.add(unsignExt,f_tmp_17);
		Boolean[] __tmp15 = f_tmp_16;
		Boolean[] f_tmp_18 = lib.mux(unsignExt, __tmp15,__tmp13);
		Boolean[] __tmp16 = f_tmp_18;
		unsignExt = __tmp16;
		Boolean f_tmp_19 = lib.not(__tmp13);
		Boolean __tmp17 = f_tmp_19;
		int f_tmp_20 = 9;
		int __tmp18 = f_tmp_20;
		Boolean[] f_tmp_22 = env.inputOfAlice(Utils.fromInt(__tmp18, 32));
		Boolean f_tmp_21 = lib.eq(op, f_tmp_22);
		Boolean __tmp19 = f_tmp_21;
		Boolean[] f_tmp_23 = reg.read(rs);
		Boolean[] __tmp20 = f_tmp_23;
		Boolean[] f_tmp_24 = lib.add(__tmp20,unsignExt);
		Boolean[] __tmp21 = f_tmp_24;
		Boolean[] f_tmp_25 = reg.read(rt);
		Boolean[] __tmp22 = f_tmp_25;
		Boolean[] f_tmp_26 = lib.mux(__tmp22, __tmp21,__tmp19);
		Boolean[] __tmp23 = f_tmp_26;
		reg.write(rt,__tmp23);
		Boolean f_tmp_27 = lib.not(__tmp19);
		Boolean __tmp24 = f_tmp_27;
		int f_tmp_28 = 3;
		int __tmp25 = f_tmp_28;
		Boolean[] f_tmp_30 = env.inputOfAlice(Utils.fromInt(__tmp25, 32));
		Boolean f_tmp_29 = lib.eq(op, f_tmp_30);
		Boolean __tmp26 = f_tmp_29;
		int f_tmp_31 = 1;
		int __tmp27 = f_tmp_31;
		Boolean[] f_tmp_33 = env.inputOfAlice(Utils.fromInt(__tmp27, 32));
		Boolean f_tmp_32 = lib.eq(op, f_tmp_33);
		Boolean __tmp28 = f_tmp_32;
		Boolean f_tmp_34 = lib.or(__tmp26,__tmp28);
		Boolean __tmp29 = f_tmp_34;
		Boolean f_tmp_35 = lib.and(__tmp24,__tmp29);
		Boolean __tmp30 = f_tmp_35;
		int f_tmp_36 = 8;
		int __tmp31 = f_tmp_36;
		Boolean[] f_tmp_38 = env.inputOfAlice(Utils.fromInt(__tmp31, 32));
		Boolean[] f_tmp_37 = lib.add(pc,f_tmp_38);
		Boolean[] __tmp32 = f_tmp_37;
		int f_tmp_39 = 31;
		int __tmp33 = f_tmp_39;
		Boolean[] f_tmp_41 = env.inputOfAlice(Utils.fromInt(__tmp33, 32));
		Boolean[] f_tmp_40 = reg.read(f_tmp_41);
		Boolean[] __tmp34 = f_tmp_40;
		Boolean[] f_tmp_42 = lib.mux(__tmp34, __tmp32,__tmp30);
		Boolean[] __tmp35 = f_tmp_42;
		Boolean[] f_tmp_43 = env.inputOfAlice(Utils.fromInt(__tmp33, 32));
		reg.write(f_tmp_43,__tmp35);
		Boolean f_tmp_44 = lib.not(__tmp29);
		Boolean __tmp36 = f_tmp_44;
		Boolean f_tmp_45 = lib.and(__tmp24,__tmp36);
		Boolean __tmp37 = f_tmp_45;
		int f_tmp_46 = 12;
		int __tmp38 = f_tmp_46;
		Boolean[] f_tmp_48 = env.inputOfAlice(Utils.fromInt(__tmp38, 32));
		Boolean f_tmp_47 = lib.eq(op, f_tmp_48);
		Boolean __tmp39 = f_tmp_47;
		Boolean f_tmp_49 = lib.and(__tmp37,__tmp39);
		Boolean __tmp40 = f_tmp_49;
		Boolean[] f_tmp_50 = reg.read(rs);
		Boolean[] __tmp41 = f_tmp_50;
		Boolean[] f_tmp_51 = lib.and(__tmp41,zeroExt);
		Boolean[] __tmp42 = f_tmp_51;
		Boolean[] f_tmp_52 = reg.read(rt);
		Boolean[] __tmp43 = f_tmp_52;
		Boolean[] f_tmp_53 = lib.mux(__tmp43, __tmp42,__tmp40);
		Boolean[] __tmp44 = f_tmp_53;
		reg.write(rt,__tmp44);
		Boolean f_tmp_54 = lib.not(__tmp39);
		Boolean __tmp45 = f_tmp_54;
		Boolean f_tmp_55 = lib.and(__tmp37,__tmp45);
		Boolean __tmp46 = f_tmp_55;
		int f_tmp_56 = 0;
		int __tmp47 = f_tmp_56;
		Boolean[] f_tmp_58 = env.inputOfAlice(Utils.fromInt(__tmp47, 32));
		Boolean f_tmp_57 = lib.eq(op, f_tmp_58);
		Boolean __tmp48 = f_tmp_57;
		Boolean f_tmp_59 = lib.and(__tmp46,__tmp48);
		Boolean __tmp49 = f_tmp_59;
		Boolean[] f_tmp_60 = lib.leftPublicShift(inst, 26);
		Boolean[] __tmp50 = f_tmp_60;
		Boolean[] f_tmp_61 = lib.rightPublicShift(__tmp50, 26);
		Boolean[] __tmp51 = f_tmp_61;
		Boolean[] f_tmp_62 = lib.mux(funct, __tmp51,__tmp49);
		Boolean[] __tmp52 = f_tmp_62;
		funct = __tmp52;
		int f_tmp_63 = 33;
		int __tmp53 = f_tmp_63;
		Boolean[] f_tmp_65 = env.inputOfAlice(Utils.fromInt(__tmp53, 32));
		Boolean f_tmp_64 = lib.eq(funct, f_tmp_65);
		Boolean __tmp54 = f_tmp_64;
		Boolean f_tmp_66 = lib.and(__tmp49,__tmp54);
		Boolean __tmp55 = f_tmp_66;
		Boolean[] f_tmp_67 = reg.read(rs);
		Boolean[] __tmp56 = f_tmp_67;
		Boolean[] f_tmp_68 = reg.read(rt);
		Boolean[] __tmp57 = f_tmp_68;
		Boolean[] f_tmp_69 = lib.add(__tmp56,__tmp57);
		Boolean[] __tmp58 = f_tmp_69;
		Boolean[] f_tmp_70 = reg.read(rd);
		Boolean[] __tmp59 = f_tmp_70;
		Boolean[] f_tmp_71 = lib.mux(__tmp59, __tmp58,__tmp55);
		Boolean[] __tmp60 = f_tmp_71;
		reg.write(rd,__tmp60);
		Boolean f_tmp_72 = lib.not(__tmp54);
		Boolean __tmp61 = f_tmp_72;
		Boolean f_tmp_73 = lib.and(__tmp49,__tmp61);
		Boolean __tmp62 = f_tmp_73;
		int f_tmp_74 = 38;
		int __tmp63 = f_tmp_74;
		Boolean[] f_tmp_76 = env.inputOfAlice(Utils.fromInt(__tmp63, 32));
		Boolean f_tmp_75 = lib.eq(funct, f_tmp_76);
		Boolean __tmp64 = f_tmp_75;
		Boolean f_tmp_77 = lib.and(__tmp62,__tmp64);
		Boolean __tmp65 = f_tmp_77;
		Boolean[] f_tmp_78 = reg.read(rs);
		Boolean[] __tmp66 = f_tmp_78;
		Boolean[] f_tmp_79 = reg.read(rt);
		Boolean[] __tmp67 = f_tmp_79;
		Boolean[] f_tmp_80 = lib.xor(__tmp66,__tmp67);
		Boolean[] __tmp68 = f_tmp_80;
		Boolean[] f_tmp_81 = reg.read(rd);
		Boolean[] __tmp69 = f_tmp_81;
		Boolean[] f_tmp_82 = lib.mux(__tmp69, __tmp68,__tmp65);
		Boolean[] __tmp70 = f_tmp_82;
		reg.write(rd,__tmp70);
		Boolean f_tmp_83 = lib.not(__tmp64);
		Boolean __tmp71 = f_tmp_83;
		Boolean f_tmp_84 = lib.and(__tmp62,__tmp71);
		Boolean __tmp72 = f_tmp_84;
		int f_tmp_85 = 42;
		int __tmp73 = f_tmp_85;
		Boolean[] f_tmp_87 = env.inputOfAlice(Utils.fromInt(__tmp73, 32));
		Boolean f_tmp_86 = lib.eq(funct, f_tmp_87);
		Boolean __tmp74 = f_tmp_86;
		Boolean f_tmp_88 = lib.and(__tmp72,__tmp74);
		Boolean __tmp75 = f_tmp_88;
		Boolean[] f_tmp_89 = reg.read(rs);
		Boolean[] __tmp76 = f_tmp_89;
		Boolean[] f_tmp_90 = reg.read(rt);
		Boolean[] __tmp77 = f_tmp_90;
		Boolean f_tmp_91 = lib.not(lib.geq(__tmp76, __tmp77));
		Boolean __tmp78 = f_tmp_91;
		Boolean f_tmp_92 = lib.and(__tmp75,__tmp78);
		Boolean __tmp79 = f_tmp_92;
		int f_tmp_93 = 1;
		int __tmp80 = f_tmp_93;
		Boolean[] f_tmp_94 = reg.read(rd);
		Boolean[] __tmp81 = f_tmp_94;
		Boolean[] f_tmp_96 = env.inputOfAlice(Utils.fromInt(__tmp80, 32));
		Boolean[] f_tmp_95 = lib.mux(__tmp81, f_tmp_96,__tmp79);
		Boolean[] __tmp82 = f_tmp_95;
		reg.write(rd,__tmp82);
		Boolean f_tmp_97 = lib.not(__tmp78);
		Boolean __tmp83 = f_tmp_97;
		Boolean f_tmp_98 = lib.and(__tmp75,__tmp83);
		Boolean __tmp84 = f_tmp_98;
		int f_tmp_99 = 0;
		int __tmp85 = f_tmp_99;
		Boolean[] f_tmp_100 = reg.read(rd);
		Boolean[] __tmp86 = f_tmp_100;
		Boolean[] f_tmp_102 = env.inputOfAlice(Utils.fromInt(__tmp85, 32));
		Boolean[] f_tmp_101 = lib.mux(__tmp86, f_tmp_102,__tmp84);
		Boolean[] __tmp87 = f_tmp_101;
		reg.write(rd,__tmp87);
		Boolean f_tmp_103 = lib.not(__tmp74);
		Boolean __tmp88 = f_tmp_103;
		Boolean f_tmp_104 = lib.and(__tmp72,__tmp88);
		Boolean __tmp89 = f_tmp_104;
		int f_tmp_105 = 35;
		int __tmp90 = f_tmp_105;
		Boolean[] f_tmp_107 = env.inputOfAlice(Utils.fromInt(__tmp90, 32));
		Boolean f_tmp_106 = lib.eq(funct, f_tmp_107);
		Boolean __tmp91 = f_tmp_106;
		Boolean f_tmp_108 = lib.and(__tmp89,__tmp91);
		Boolean __tmp92 = f_tmp_108;
		Boolean[] f_tmp_109 = reg.read(rs);
		Boolean[] __tmp93 = f_tmp_109;
		Boolean[] f_tmp_110 = reg.read(rt);
		Boolean[] __tmp94 = f_tmp_110;
		Boolean[] f_tmp_111 = lib.sub(__tmp93,__tmp94);
		Boolean[] __tmp95 = f_tmp_111;
		Boolean[] f_tmp_112 = reg.read(rd);
		Boolean[] __tmp96 = f_tmp_112;
		Boolean[] f_tmp_113 = lib.mux(__tmp96, __tmp95,__tmp92);
		Boolean[] __tmp97 = f_tmp_113;
		reg.write(rd,__tmp97);
		Boolean f_tmp_114 = lib.not(__tmp91);
		Boolean __tmp98 = f_tmp_114;
		Boolean f_tmp_115 = lib.and(__tmp89,__tmp98);
		Boolean __tmp99 = f_tmp_115;
		Boolean f_tmp_116 = lib.not(__tmp48);
		Boolean __tmp100 = f_tmp_116;
		Boolean f_tmp_117 = lib.and(__tmp46,__tmp100);
		Boolean __tmp101 = f_tmp_117;
		int f_tmp_118 = 8;
		int __tmp102 = f_tmp_118;
		Boolean[] f_tmp_120 = env.inputOfAlice(Utils.fromInt(__tmp102, 32));
		Boolean f_tmp_119 = lib.eq(op, f_tmp_120);
		Boolean __tmp103 = f_tmp_119;
		Boolean[] f_tmp_121 = reg.read(rs);
		Boolean[] __tmp104 = f_tmp_121;
		Boolean[] f_tmp_122 = lib.mux(pc, __tmp104,__tmp103);
		Boolean[] __tmp105 = f_tmp_122;
		pc = __tmp105;
		Boolean f_tmp_123 = lib.not(__tmp103);
		Boolean __tmp106 = f_tmp_123;
		int f_tmp_124 = 3;
		int __tmp107 = f_tmp_124;
		Boolean[] f_tmp_126 = env.inputOfAlice(Utils.fromInt(__tmp107, 32));
		Boolean f_tmp_125 = lib.eq(op, f_tmp_126);
		Boolean __tmp108 = f_tmp_125;
		Boolean f_tmp_127 = lib.and(__tmp106,__tmp108);
		Boolean __tmp109 = f_tmp_127;
		Boolean[] f_tmp_128 = lib.leftPublicShift(inst, 6);
		Boolean[] __tmp110 = f_tmp_128;
		Boolean[] f_tmp_129 = lib.rightPublicShift(__tmp110, 6);
		Boolean[] __tmp111 = f_tmp_129;
		Boolean[] f_tmp_130 = lib.mux(pc, __tmp111,__tmp109);
		Boolean[] __tmp112 = f_tmp_130;
		pc = __tmp112;
		Boolean f_tmp_131 = lib.not(__tmp108);
		Boolean __tmp113 = f_tmp_131;
		Boolean f_tmp_132 = lib.and(__tmp106,__tmp113);
		Boolean __tmp114 = f_tmp_132;
		int f_tmp_133 = 5;
		int __tmp115 = f_tmp_133;
		Boolean[] f_tmp_135 = env.inputOfAlice(Utils.fromInt(__tmp115, 32));
		Boolean f_tmp_134 = lib.eq(op, f_tmp_135);
		Boolean __tmp116 = f_tmp_134;
		Boolean[] f_tmp_136 = reg.read(rs);
		Boolean[] __tmp117 = f_tmp_136;
		Boolean[] f_tmp_137 = reg.read(rt);
		Boolean[] __tmp118 = f_tmp_137;
		Boolean f_tmp_138 = lib.not(lib.eq(__tmp117, __tmp118));
		Boolean __tmp119 = f_tmp_138;
		Boolean f_tmp_139 = lib.and(__tmp116,__tmp119);
		Boolean __tmp120 = f_tmp_139;
		int f_tmp_140 = 4;
		int __tmp121 = f_tmp_140;
		Boolean[] f_tmp_142 = env.inputOfAlice(Utils.fromInt(__tmp121, 32));
		Boolean f_tmp_141 = lib.eq(op, f_tmp_142);
		Boolean __tmp122 = f_tmp_141;
		Boolean[] f_tmp_143 = reg.read(rs);
		Boolean[] __tmp123 = f_tmp_143;
		Boolean[] f_tmp_144 = reg.read(rt);
		Boolean[] __tmp124 = f_tmp_144;
		Boolean f_tmp_145 = lib.eq(__tmp123, __tmp124);
		Boolean __tmp125 = f_tmp_145;
		Boolean f_tmp_146 = lib.and(__tmp122,__tmp125);
		Boolean __tmp126 = f_tmp_146;
		Boolean f_tmp_147 = lib.or(__tmp120,__tmp126);
		Boolean __tmp127 = f_tmp_147;
		Boolean f_tmp_148 = lib.and(__tmp114,__tmp127);
		Boolean __tmp128 = f_tmp_148;
		Boolean[] f_tmp_149 = lib.leftPublicShift(unsignExt, 2);
		Boolean[] __tmp129 = f_tmp_149;
		Boolean[] f_tmp_150 = lib.add(pc,__tmp129);
		Boolean[] __tmp130 = f_tmp_150;
		Boolean[] f_tmp_151 = lib.mux(pc, __tmp130,__tmp128);
		Boolean[] __tmp131 = f_tmp_151;
		pc = __tmp131;
		Boolean f_tmp_152 = lib.not(__tmp127);
		Boolean __tmp132 = f_tmp_152;
		Boolean f_tmp_153 = lib.and(__tmp114,__tmp132);
		Boolean __tmp133 = f_tmp_153;
		int f_tmp_154 = 4;
		int __tmp134 = f_tmp_154;
		Boolean[] f_tmp_156 = env.inputOfAlice(Utils.fromInt(__tmp134, 32));
		Boolean[] f_tmp_155 = lib.add(pc,f_tmp_156);
		Boolean[] __tmp135 = f_tmp_155;
		Boolean[] f_tmp_157 = lib.mux(pc, __tmp135,__tmp133);
		Boolean[] __tmp136 = f_tmp_157;
		pc = __tmp136;
		return pc;
	}
}
