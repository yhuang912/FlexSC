# Sanity checks

# Where things go
OUTDIR=../../src
LIBDIR=../../lib

if test ! -d $OUTDIR/compiledlib/dov
then
    echo "The output directory $OUTDIR/compiledlib/dov does not exist"
    OUTDIR=../../../src
    if test ! -d $OUTDIR/compiledlib/dov
    then
	echo "The output directory $OUTDIR/compiledlib/dov does not exist either.  Exiting."
    	exit 1
    fi
    # If the source is in the wrong place, assume the libraries are also displaced.
    LIBDIR=../../../lib
fi

C=../../bin
if test -d $C
then
	if test ! -d $LIBDIR
	then
		echo "Found $C but not $LIBDIR.  This is too confusing."
		exit 1
	fi
else
	C2=../../build/classes
	if test -d $C2
	then
		if test -d $LIBDIR
		then
			echo "Warning - $C is missing.  Trying $C2" 
			C="$C2"
		else
			echo "Found $C2 but not $LIBDIR.  This is too confusing."
			exit 1
		fi
	else
		echo "$C and $C2 both missing.  Giving up"
		exit 1
	fi
fi

F=CpuFactory.class
X=`find $C -name "$F" -print -quit`
if test "X$X" = "X"
then
    echo "Did not find $F in $C.  This may not work."
fi

J=SCVM2.jar
if test ! -f $LIBDIR/$J
then
    echo "Did not find $J in $LIBDIR.  This may not work.  Did you build the compiler?"
fi

CP="$C:$LIBDIR/*"


# Binary
B="$1"
if test "X$B" = "X"
then
    B=../../SimpleBinaryReader/data/func1
    if test ! -f $B
    then
	echo "$B does not exist. Are you running this in the right place?"
	B=../SimpleBinaryReader/data/func1
	if test -f $B
	then
	    echo "OK.  Found $B.  You could still be in trouble though."
	else
	    echo "Did not find $B either.  Giving up."
	    exit 1
	fi
    fi
fi

# First, some hacking to build an omnibus CPU

if /bin/false
then

# This is turned off because the unimplemented bits
# cause indigestion (as designed)

java -classpath $CP \
	com/appcomsci.mips.cpu.CpuBuilder \
	--class=AllCpu \
	--output.directory=$OUTDIR

if test -f AllCpu.cpp
then
	sed 's+MISSING+// MISSING+' <AllCpu.cpp >dov/AllCpu.cpp
	rm AllCpu.cpp
else
	if test ! -f dov/AllCpu.cpp
	then
		echo 'AllCpu.cpp is missing'
	fi
fi

fi

# Now build a complete CPU for the binary

java -classpath $CP \
	com/appcomsci.mips.cpu.CpuBuilder \
	--class=BigCpu \
	--output.directory=$OUTDIR \
	--entry.point=sfe_main \
	--function.load.list=sfe_main,func_a,func_b $B

# Now build individual CPUs

# uncomment to clean up
# better to use ant to do this: ant cleangenerated
# rm -rf $OUTDIR/compiledlib/dov/*.cpp $OUTDIR/compiledlib/dov/Cpu_*.java $OUTDIR/compiledlib/dov/CpuImpl_*.java

java -classpath $CP \
	com.appcomsci.mips.cpu.CpuFactory \
	--output.directory=$OUTDIR \
	--entry.point=sfe_main \
	--function.load.list=sfe_main,func_a,func_b $B
