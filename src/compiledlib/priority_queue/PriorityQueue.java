package compiledlib.priority_queue;
import java.security.SecureRandom;
import oram.SecureArray;
import oram.CircuitOram;
import flexsc.Mode;
import flexsc.Party;
import flexsc.CompEnv;
import java.util.BitSet;
import circuits.arithmetic.IntegerLib;
import circuits.arithmetic.FloatLib;
import util.Utils;
import gc.regular.GCEva;
import gc.regular.GCGen;
import gc.GCSignal;
import java.util.Arrays;
import java.util.Random;
import flexsc.IWritable;
import flexsc.Comparator;
import java.lang.reflect.Array;
public class PriorityQueue<T extends IWritable<T,Boolean>> {
	public CircuitOram<Boolean> poram;
	public Boolean[] size;
	public NodeId root;

	public CompEnv<Boolean> env;
	public IntegerLib<Boolean> intLib;
	private T factoryT;
	private int m;

	public PriorityQueue(CompEnv<Boolean> env, IntegerLib<Boolean> intLib, int m, T factoryT, CircuitOram<Boolean> poram) throws Exception {
		this.env = env;
		this.intLib = intLib;
		this.m = m;
		this.factoryT = factoryT;
		this.poram = poram;
		this.size = env.inputOfAlice(Utils.fromInt(0, m));
		this.root = new NodeId(env, intLib, m);
	}

	public void init() throws Exception {
		Boolean[] f_tmp_0 = intLib.randBools(m);
		Boolean[] __tmp0 = f_tmp_0;
		NodeId f_tmp_1 = this.root;
		NodeId __tmp1 = f_tmp_1;
		__tmp1.pos = __tmp0;
		int f_tmp_2 = 0;
		int __tmp2 = f_tmp_2;
		Boolean[] f_tmp_3 = env.inputOfAlice(Utils.fromInt(__tmp2, m));
		this.size = f_tmp_3;
		int f_tmp_4 = 0;
		int __tmp3 = f_tmp_4;
		NodeId f_tmp_5 = this.root;
		NodeId __tmp4 = f_tmp_5;
		Boolean[] f_tmp_6 = env.inputOfAlice(Utils.fromInt(__tmp3, m));
		__tmp4.id = f_tmp_6;

	}
	public KeyValue<T> pqueue_op(Boolean[] key, T operand, Boolean op) throws Exception {
		KeyValue<T> ret = new KeyValue<T>(env, intLib, m, factoryT);
		KeyValue<T> d = new KeyValue<T>(env, intLib, m, factoryT);
		Boolean insert_dummy_bit = env.inputOfAlice(false);
		Boolean pop_dummy_bit = env.inputOfAlice(false);
		KeyValue<T> f_tmp_7 = new KeyValue<T>(env, intLib, m, factoryT);
		f_tmp_7.value = operand;
		f_tmp_7.key = key;
		KeyValue<T> __tmp5 = f_tmp_7;
		d = __tmp5;
		boolean f_tmp_8 = true;
		boolean __tmp6 = f_tmp_8;
		Boolean f_tmp_10 = env.inputOfAlice(__tmp6);
		Boolean f_tmp_9 = intLib.eq(op, f_tmp_10);
		Boolean __tmp7 = f_tmp_9;
		boolean f_tmp_11 = false;
		boolean __tmp8 = f_tmp_11;
		Boolean f_tmp_13 = env.inputOfAlice(__tmp8);
		Boolean f_tmp_12 = intLib.mux(insert_dummy_bit, f_tmp_13,__tmp7);
		Boolean __tmp9 = f_tmp_12;
		insert_dummy_bit = __tmp9;
		boolean f_tmp_14 = true;
		boolean __tmp10 = f_tmp_14;
		Boolean f_tmp_16 = env.inputOfAlice(__tmp10);
		Boolean f_tmp_15 = intLib.mux(pop_dummy_bit, f_tmp_16,__tmp7);
		Boolean __tmp11 = f_tmp_15;
		pop_dummy_bit = __tmp11;
		Boolean f_tmp_17 = intLib.not(__tmp7);
		Boolean __tmp12 = f_tmp_17;
		boolean f_tmp_18 = true;
		boolean __tmp13 = f_tmp_18;
		Boolean f_tmp_20 = env.inputOfAlice(__tmp13);
		Boolean f_tmp_19 = intLib.mux(insert_dummy_bit, f_tmp_20,__tmp12);
		Boolean __tmp14 = f_tmp_19;
		insert_dummy_bit = __tmp14;
		boolean f_tmp_21 = false;
		boolean __tmp15 = f_tmp_21;
		Boolean f_tmp_23 = env.inputOfAlice(__tmp15);
		Boolean f_tmp_22 = intLib.mux(pop_dummy_bit, f_tmp_23,__tmp12);
		Boolean __tmp16 = f_tmp_22;
		pop_dummy_bit = __tmp16;
		KeyValue<T> f_tmp_24 = this.extractMax(pop_dummy_bit);
		KeyValue<T> __tmp17 = f_tmp_24;
		ret = __tmp17;
		this.insert(d, insert_dummy_bit);
		return ret;
	}
	public void push(Boolean[] key, T operand, Boolean dummy_bit) throws Exception {
		KeyValue<T> d = new KeyValue<T>(env, intLib, m, factoryT);
		KeyValue<T> f_tmp_26 = new KeyValue<T>(env, intLib, m, factoryT);
		f_tmp_26.value = operand;
		f_tmp_26.key = key;
		KeyValue<T> __tmp19 = f_tmp_26;
		d = __tmp19;
		this.insert(d, dummy_bit);

	}
	public KeyValue<T> pop(Boolean dummy_bit) throws Exception {
		KeyValue<T> ret = new KeyValue<T>(env, intLib, m, factoryT);
		KeyValue<T> f_tmp_28 = this.extractMax(dummy_bit);
		KeyValue<T> __tmp21 = f_tmp_28;
		ret = __tmp21;
		return ret;
	}
	public Boolean[] right_shift(Boolean[] id, int s) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, m));
		int i = 0;
		ret = id;
		int f_tmp_29 = 0;
		int __tmp22 = f_tmp_29;
		i = __tmp22;
		boolean f_tmp_30 = i < s;
		boolean __tmp23 = f_tmp_30;
		while(__tmp23) {
			int f_tmp_31 = 1;
			int __tmp24 = f_tmp_31;
			Boolean[] f_tmp_32 = intLib.rightPublicShift(ret, __tmp24);
			Boolean[] __tmp25 = f_tmp_32;
			ret = __tmp25;
			int f_tmp_33 = 1;
			int __tmp26 = f_tmp_33;
			int f_tmp_34 = i + __tmp26;
			int __tmp27 = f_tmp_34;
			i = __tmp27;
			boolean f_tmp_35 = i < s;
			__tmp23 = f_tmp_35;
		}
		return ret;
	}
	public Boolean should_go_left(Boolean[] id, int level) throws Exception {
		Boolean ret = env.inputOfAlice(false);
		Boolean[] res = env.inputOfAlice(Utils.fromInt(0, m));
		Boolean[] tmpid = env.inputOfAlice(Utils.fromInt(0, m));
		int i = 0;
		Boolean[] toshift = env.inputOfAlice(Utils.fromInt(0, m));
		int f_tmp_36 = 1;
		int __tmp28 = f_tmp_36;
		int f_tmp_37 = m - __tmp28;
		int __tmp29 = f_tmp_37;
		boolean f_tmp_38 = level >= __tmp29;
		boolean __tmp30 = f_tmp_38;
		if(__tmp30) {
			boolean f_tmp_39 = true;
			boolean __tmp31 = f_tmp_39;
			ret = env.inputOfAlice(__tmp31);
		} else {
			int f_tmp_40 = 0;
			int __tmp32 = f_tmp_40;
			res = env.inputOfAlice(Utils.fromInt(__tmp32, m));
			tmpid = id;
			int f_tmp_41 = 0;
			int __tmp33 = f_tmp_41;
			i = __tmp33;
			int f_tmp_42 = 0;
			int __tmp34 = f_tmp_42;
			i = __tmp34;
			boolean f_tmp_43 = i < m;
			boolean __tmp35 = f_tmp_43;
			while(__tmp35) {
				int f_tmp_44 = 1;
				int __tmp36 = f_tmp_44;
				Boolean[] f_tmp_46 = env.inputOfAlice(Utils.fromInt(__tmp36, m));
				Boolean f_tmp_45 = intLib.eq(tmpid, f_tmp_46);
				Boolean __tmp37 = f_tmp_45;
				Boolean[] f_tmp_48 = env.inputOfAlice(Utils.fromInt(i, m));
				Boolean[] f_tmp_47 = intLib.mux(res, f_tmp_48,__tmp37);
				Boolean[] __tmp38 = f_tmp_47;
				res = __tmp38;
				Boolean f_tmp_49 = intLib.not(__tmp37);
				Boolean __tmp39 = f_tmp_49;
				int f_tmp_50 = 1;
				int __tmp40 = f_tmp_50;
				Boolean[] f_tmp_51 = intLib.rightPublicShift(tmpid, __tmp40);
				Boolean[] __tmp41 = f_tmp_51;
				tmpid = __tmp41;
				int f_tmp_52 = 1;
				int __tmp42 = f_tmp_52;
				int f_tmp_53 = i + __tmp42;
				int __tmp43 = f_tmp_53;
				i = __tmp43;
				boolean f_tmp_54 = i < m;
				__tmp35 = f_tmp_54;
			}
			tmpid = id;
			Boolean[] f_tmp_56 = env.inputOfAlice(Utils.fromInt(level, m));
			Boolean[] f_tmp_55 = intLib.sub(res,f_tmp_56);
			Boolean[] __tmp44 = f_tmp_55;
			toshift = __tmp44;
			int f_tmp_57 = 0;
			int __tmp45 = f_tmp_57;
			i = __tmp45;
			boolean f_tmp_58 = i < m;
			boolean __tmp46 = f_tmp_58;
			while(__tmp46) {
				int f_tmp_59 = 0;
				int __tmp47 = f_tmp_59;
				Boolean[] f_tmp_61 = env.inputOfAlice(Utils.fromInt(__tmp47, m));
				Boolean f_tmp_60 = intLib.not(intLib.leq(toshift, f_tmp_61));
				Boolean __tmp48 = f_tmp_60;
				int f_tmp_62 = 1;
				int __tmp49 = f_tmp_62;
				Boolean[] f_tmp_63 = intLib.rightPublicShift(tmpid, __tmp49);
				Boolean[] __tmp50 = f_tmp_63;
				Boolean[] f_tmp_64 = intLib.mux(tmpid, __tmp50,__tmp48);
				Boolean[] __tmp51 = f_tmp_64;
				tmpid = __tmp51;
				int f_tmp_65 = 1;
				int __tmp52 = f_tmp_65;
				Boolean[] f_tmp_67 = env.inputOfAlice(Utils.fromInt(__tmp52, m));
				Boolean[] f_tmp_66 = intLib.sub(toshift,f_tmp_67);
				Boolean[] __tmp53 = f_tmp_66;
				Boolean[] f_tmp_68 = intLib.mux(toshift, __tmp53,__tmp48);
				Boolean[] __tmp54 = f_tmp_68;
				toshift = __tmp54;
				Boolean f_tmp_69 = intLib.not(__tmp48);
				Boolean __tmp55 = f_tmp_69;
				int f_tmp_70 = 1;
				int __tmp56 = f_tmp_70;
				int f_tmp_71 = i + __tmp56;
				int __tmp57 = f_tmp_71;
				i = __tmp57;
				boolean f_tmp_72 = i < m;
				__tmp46 = f_tmp_72;
			}
			int f_tmp_73 = 1;
			int __tmp58 = f_tmp_73;
			Boolean[] f_tmp_75 = env.inputOfAlice(Utils.fromInt(__tmp58, m));
			Boolean f_tmp_74 = intLib.eq(id, f_tmp_75);
			Boolean __tmp59 = f_tmp_74;
			boolean f_tmp_76 = true;
			boolean __tmp60 = f_tmp_76;
			Boolean f_tmp_78 = env.inputOfAlice(__tmp60);
			Boolean f_tmp_77 = intLib.mux(ret, f_tmp_78,__tmp59);
			Boolean __tmp61 = f_tmp_77;
			ret = __tmp61;
			Boolean f_tmp_79 = intLib.not(__tmp59);
			Boolean __tmp62 = f_tmp_79;
			int f_tmp_80 = 1;
			int __tmp63 = f_tmp_80;
			Boolean[] f_tmp_82 = env.inputOfAlice(Utils.fromInt(__tmp63, m));
			Boolean[] f_tmp_81 = intLib.and(tmpid,f_tmp_82);
			Boolean[] __tmp64 = f_tmp_81;
			int f_tmp_83 = 0;
			int __tmp65 = f_tmp_83;
			Boolean[] f_tmp_85 = env.inputOfAlice(Utils.fromInt(__tmp65, m));
			Boolean f_tmp_84 = intLib.eq(__tmp64, f_tmp_85);
			Boolean __tmp66 = f_tmp_84;
			Boolean f_tmp_86 = intLib.and(__tmp62,__tmp66);
			Boolean __tmp67 = f_tmp_86;
			boolean f_tmp_87 = true;
			boolean __tmp68 = f_tmp_87;
			Boolean f_tmp_89 = env.inputOfAlice(__tmp68);
			Boolean f_tmp_88 = intLib.mux(ret, f_tmp_89,__tmp67);
			Boolean __tmp69 = f_tmp_88;
			ret = __tmp69;
			Boolean f_tmp_90 = intLib.not(__tmp66);
			Boolean __tmp70 = f_tmp_90;
			Boolean f_tmp_91 = intLib.and(__tmp62,__tmp70);
			Boolean __tmp71 = f_tmp_91;
			boolean f_tmp_92 = false;
			boolean __tmp72 = f_tmp_92;
			Boolean f_tmp_94 = env.inputOfAlice(__tmp72);
			Boolean f_tmp_93 = intLib.mux(ret, f_tmp_94,__tmp71);
			Boolean __tmp73 = f_tmp_93;
			ret = __tmp73;
		}
		return ret;
	}
	public KeyValue<T> extractMax(Boolean dummy_bit) throws Exception {
		KeyValue<T> ret = new KeyValue<T>(env, intLib, m, factoryT);
		PriorityQueueNode<T> last_node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		Boolean newdummy_bit = env.inputOfAlice(false);
		PriorityQueueNode<T> root_node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		NodeId f_tmp_95 = this.root;
		NodeId __tmp74 = f_tmp_95;
		int f_tmp_96 = 1;
		int __tmp75 = f_tmp_96;
		PriorityQueueNode<T> f_tmp_97 = this.get_last(__tmp74, __tmp75, dummy_bit);
		PriorityQueueNode<T> __tmp76 = f_tmp_97;
		last_node = __tmp76;
		boolean f_tmp_98 = false;
		boolean __tmp77 = f_tmp_98;
		newdummy_bit = env.inputOfAlice(__tmp77);
		boolean f_tmp_99 = true;
		boolean __tmp78 = f_tmp_99;
		Boolean f_tmp_101 = env.inputOfAlice(__tmp78);
		Boolean f_tmp_100 = intLib.eq(dummy_bit, f_tmp_101);
		Boolean __tmp79 = f_tmp_100;
		int f_tmp_102 = 1;
		int __tmp80 = f_tmp_102;
		NodeId f_tmp_103 = this.root;
		NodeId __tmp81 = f_tmp_103;
		Boolean[] f_tmp_104 = __tmp81.id;
		Boolean[] __tmp82 = f_tmp_104;
		Boolean[] f_tmp_106 = env.inputOfAlice(Utils.fromInt(__tmp80, m));
		Boolean[] f_tmp_105 = intLib.mux(__tmp82, f_tmp_106,__tmp79);
		Boolean[] __tmp83 = f_tmp_105;
		__tmp81.id = __tmp83;
		Boolean[] f_tmp_107 = this.size;
		Boolean[] __tmp84 = f_tmp_107;
		int f_tmp_108 = 1;
		int __tmp85 = f_tmp_108;
		Boolean[] f_tmp_110 = env.inputOfAlice(Utils.fromInt(__tmp85, m));
		Boolean[] f_tmp_109 = intLib.sub(__tmp84,f_tmp_110);
		Boolean[] __tmp86 = f_tmp_109;
		Boolean[] f_tmp_111 = this.size;
		Boolean[] __tmp87 = f_tmp_111;
		Boolean[] f_tmp_112 = intLib.mux(__tmp87, __tmp86,__tmp79);
		Boolean[] __tmp88 = f_tmp_112;
		this.size = __tmp88;
		Boolean[] f_tmp_113 = this.size;
		Boolean[] __tmp89 = f_tmp_113;
		int f_tmp_114 = 0;
		int __tmp90 = f_tmp_114;
		Boolean[] f_tmp_116 = env.inputOfAlice(Utils.fromInt(__tmp90, m));
		Boolean f_tmp_115 = intLib.not(intLib.leq(__tmp89, f_tmp_116));
		Boolean __tmp91 = f_tmp_115;
		Boolean f_tmp_117 = intLib.and(__tmp79,__tmp91);
		Boolean __tmp92 = f_tmp_117;
		Boolean[] f_tmp_118 = this.size;
		Boolean[] __tmp93 = f_tmp_118;
		int f_tmp_119 = 0;
		int __tmp94 = f_tmp_119;
		Boolean[] f_tmp_121 = env.inputOfAlice(Utils.fromInt(__tmp94, m));
		Boolean f_tmp_120 = intLib.not(intLib.leq(__tmp93, f_tmp_121));
		Boolean __tmp95 = f_tmp_120;
		boolean f_tmp_122 = true;
		boolean __tmp96 = f_tmp_122;
		Boolean f_tmp_124 = env.inputOfAlice(__tmp96);
		Boolean f_tmp_123 = intLib.eq(dummy_bit, f_tmp_124);
		Boolean __tmp97 = f_tmp_123;
		Boolean f_tmp_125 = intLib.and(__tmp95,__tmp97);
		Boolean __tmp98 = f_tmp_125;
		Boolean f_tmp_126 = intLib.and(__tmp92,__tmp98);
		Boolean __tmp99 = f_tmp_126;
		boolean f_tmp_127 = true;
		boolean __tmp100 = f_tmp_127;
		Boolean f_tmp_129 = env.inputOfAlice(__tmp100);
		Boolean f_tmp_128 = intLib.mux(newdummy_bit, f_tmp_129,__tmp99);
		Boolean __tmp101 = f_tmp_128;
		newdummy_bit = __tmp101;
		Boolean f_tmp_130 = intLib.not(__tmp98);
		Boolean __tmp102 = f_tmp_130;
		Boolean f_tmp_131 = intLib.and(__tmp92,__tmp102);
		Boolean __tmp103 = f_tmp_131;
		boolean f_tmp_132 = false;
		boolean __tmp104 = f_tmp_132;
		Boolean f_tmp_134 = env.inputOfAlice(__tmp104);
		Boolean f_tmp_133 = intLib.mux(newdummy_bit, f_tmp_134,__tmp103);
		Boolean __tmp105 = f_tmp_133;
		newdummy_bit = __tmp105;
		NodeId f_tmp_135 = last_node.left;
		NodeId __tmp106 = f_tmp_135;
		Boolean[] f_tmp_136 = __tmp106.pos;
		Boolean[] __tmp107 = f_tmp_136;
		NodeId f_tmp_137 = this.root;
		NodeId __tmp108 = f_tmp_137;
		Boolean[] f_tmp_138 = __tmp108.pos;
		Boolean[] __tmp109 = f_tmp_138;
		Boolean[] f_tmp_139 = intLib.mux(__tmp109, __tmp107,__tmp92);
		Boolean[] __tmp110 = f_tmp_139;
		__tmp108.pos = __tmp110;
		NodeId f_tmp_140 = this.root;
		NodeId __tmp111 = f_tmp_140;
		Boolean[] f_tmp_141 = __tmp111.id;
		Boolean[] __tmp112 = f_tmp_141;
		NodeId f_tmp_142 = this.root;
		NodeId __tmp113 = f_tmp_142;
		Boolean[] f_tmp_143 = __tmp113.pos;
		Boolean[] __tmp114 = f_tmp_143;
		CircuitOram<Boolean> f_tmp_144 = this.poram;
		CircuitOram<Boolean> __tmp115 = f_tmp_144;
		PriorityQueueNode<T> f_tmp_145 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(__tmp115.conditionalReadAndRemove(__tmp112, __tmp114, __tmp92));
		PriorityQueueNode<T> __tmp116 = f_tmp_145;
		PriorityQueueNode<T> f_tmp_146 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(root_node.getBits(), __tmp116.getBits(),__tmp92));
		PriorityQueueNode<T> __tmp117 = f_tmp_146;
		root_node = __tmp117;
		KeyValue<T> f_tmp_147 = root_node.keyvalue;
		KeyValue<T> __tmp118 = f_tmp_147;
		KeyValue<T> f_tmp_148 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(ret.getBits(), __tmp118.getBits(),__tmp92));
		KeyValue<T> __tmp119 = f_tmp_148;
		ret = __tmp119;
		KeyValue<T> f_tmp_149 = last_node.keyvalue;
		KeyValue<T> __tmp120 = f_tmp_149;
		KeyValue<T> f_tmp_150 = root_node.keyvalue;
		KeyValue<T> __tmp121 = f_tmp_150;
		KeyValue<T> f_tmp_151 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp121.getBits(), __tmp120.getBits(),__tmp92));
		KeyValue<T> __tmp122 = f_tmp_151;
		root_node.keyvalue = __tmp122;
		NodeId f_tmp_152 = this.root;
		NodeId __tmp123 = f_tmp_152;
		Boolean[] f_tmp_153 = __tmp123.id;
		Boolean[] __tmp124 = f_tmp_153;
		int f_tmp_154 = 1;
		int __tmp125 = f_tmp_154;
		Boolean[] f_tmp_155 = this.heapify(__tmp124, root_node, __tmp125, newdummy_bit);
		Boolean[] __tmp126 = f_tmp_155;
		NodeId f_tmp_156 = this.root;
		NodeId __tmp127 = f_tmp_156;
		Boolean[] f_tmp_157 = __tmp127.pos;
		Boolean[] __tmp128 = f_tmp_157;
		Boolean[] f_tmp_158 = intLib.mux(__tmp128, __tmp126,__tmp92);
		Boolean[] __tmp129 = f_tmp_158;
		__tmp127.pos = __tmp129;
		Boolean f_tmp_159 = intLib.not(__tmp91);
		Boolean __tmp130 = f_tmp_159;
		Boolean f_tmp_160 = intLib.and(__tmp79,__tmp130);
		Boolean __tmp131 = f_tmp_160;
		KeyValue<T> f_tmp_161 = last_node.keyvalue;
		KeyValue<T> __tmp132 = f_tmp_161;
		KeyValue<T> f_tmp_162 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(ret.getBits(), __tmp132.getBits(),__tmp131));
		KeyValue<T> __tmp133 = f_tmp_162;
		ret = __tmp133;
		int f_tmp_163 = 30;
		int __tmp134 = f_tmp_163;
		Boolean[] f_tmp_164 = intLib.randBools(__tmp134);
		Boolean[] __tmp135 = f_tmp_164;
		NodeId f_tmp_165 = this.root;
		NodeId __tmp136 = f_tmp_165;
		Boolean[] f_tmp_166 = __tmp136.pos;
		Boolean[] __tmp137 = f_tmp_166;
		Boolean[] f_tmp_167 = intLib.mux(__tmp137, __tmp135,__tmp131);
		Boolean[] __tmp138 = f_tmp_167;
		__tmp136.pos = __tmp138;
		Boolean f_tmp_168 = intLib.not(__tmp79);
		Boolean __tmp139 = f_tmp_168;
		return ret;
	}
	public Boolean[] heapify(Boolean[] top_id, PriorityQueueNode<T> top_node, int level, Boolean dummy_bit) throws Exception {
		Boolean[] ret = intLib.randBools(m);
		Boolean newdummy_bit = env.inputOfAlice(false);
		Boolean go_left = env.inputOfAlice(false);
		Boolean[] child_iter = intLib.randBools(m);
		Boolean[] id_to_use = env.inputOfAlice(Utils.fromInt(0, m));
		Boolean[] pos_to_use = intLib.randBools(m);
		PriorityQueueNode<T> node_to_use = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		PriorityQueueNode<T> left_node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		PriorityQueueNode<T> right_node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		KeyValue<T> tmp_kv = new KeyValue<T>(env, intLib, m, factoryT);
		boolean f_tmp_169 = false;
		boolean __tmp140 = f_tmp_169;
		newdummy_bit = env.inputOfAlice(__tmp140);
		boolean f_tmp_170 = false;
		boolean __tmp141 = f_tmp_170;
		go_left = env.inputOfAlice(__tmp141);
		boolean f_tmp_171 = level < m;
		boolean __tmp142 = f_tmp_171;
		if(__tmp142) {
			boolean f_tmp_172 = true;
			boolean __tmp143 = f_tmp_172;
			Boolean f_tmp_174 = env.inputOfAlice(__tmp143);
			Boolean f_tmp_173 = intLib.eq(dummy_bit, f_tmp_174);
			Boolean __tmp144 = f_tmp_173;
			Boolean[] f_tmp_175 = this.size;
			Boolean[] __tmp145 = f_tmp_175;
			Boolean f_tmp_176 = intLib.leq(top_id, __tmp145);
			Boolean __tmp146 = f_tmp_176;
			Boolean f_tmp_177 = intLib.and(__tmp144,__tmp146);
			Boolean __tmp147 = f_tmp_177;
			Boolean[] f_tmp_178 = this.size;
			Boolean[] __tmp148 = f_tmp_178;
			int f_tmp_179 = 1;
			int __tmp149 = f_tmp_179;
			Boolean[] f_tmp_180 = intLib.rightPublicShift(__tmp148, __tmp149);
			Boolean[] __tmp150 = f_tmp_180;
			Boolean f_tmp_181 = intLib.leq(top_id, __tmp150);
			Boolean __tmp151 = f_tmp_181;
			Boolean f_tmp_182 = intLib.and(__tmp147,__tmp151);
			Boolean __tmp152 = f_tmp_182;
			NodeId f_tmp_183 = top_node.left;
			NodeId __tmp153 = f_tmp_183;
			Boolean[] f_tmp_184 = __tmp153.id;
			Boolean[] __tmp154 = f_tmp_184;
			NodeId f_tmp_185 = top_node.left;
			NodeId __tmp155 = f_tmp_185;
			Boolean[] f_tmp_186 = __tmp155.pos;
			Boolean[] __tmp156 = f_tmp_186;
			CircuitOram<Boolean> f_tmp_187 = this.poram;
			CircuitOram<Boolean> __tmp157 = f_tmp_187;
			PriorityQueueNode<T> f_tmp_188 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(__tmp157.conditionalReadAndRemove(__tmp154, __tmp156, __tmp152));
			PriorityQueueNode<T> __tmp158 = f_tmp_188;
			PriorityQueueNode<T> f_tmp_189 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(left_node.getBits(), __tmp158.getBits(),__tmp152));
			PriorityQueueNode<T> __tmp159 = f_tmp_189;
			left_node = __tmp159;
			NodeId f_tmp_190 = top_node.right;
			NodeId __tmp160 = f_tmp_190;
			Boolean[] f_tmp_191 = __tmp160.id;
			Boolean[] __tmp161 = f_tmp_191;
			NodeId f_tmp_192 = top_node.right;
			NodeId __tmp162 = f_tmp_192;
			Boolean[] f_tmp_193 = __tmp162.pos;
			Boolean[] __tmp163 = f_tmp_193;
			CircuitOram<Boolean> f_tmp_194 = this.poram;
			CircuitOram<Boolean> __tmp164 = f_tmp_194;
			PriorityQueueNode<T> f_tmp_195 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(__tmp164.conditionalReadAndRemove(__tmp161, __tmp163, __tmp152));
			PriorityQueueNode<T> __tmp165 = f_tmp_195;
			PriorityQueueNode<T> f_tmp_196 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(right_node.getBits(), __tmp165.getBits(),__tmp152));
			PriorityQueueNode<T> __tmp166 = f_tmp_196;
			right_node = __tmp166;
			KeyValue<T> f_tmp_197 = left_node.keyvalue;
			KeyValue<T> __tmp167 = f_tmp_197;
			Boolean[] f_tmp_198 = __tmp167.key;
			Boolean[] __tmp168 = f_tmp_198;
			KeyValue<T> f_tmp_199 = right_node.keyvalue;
			KeyValue<T> __tmp169 = f_tmp_199;
			Boolean[] f_tmp_200 = __tmp169.key;
			Boolean[] __tmp170 = f_tmp_200;
			Boolean f_tmp_201 = intLib.not(intLib.leq(__tmp168, __tmp170));
			Boolean __tmp171 = f_tmp_201;
			Boolean f_tmp_202 = intLib.and(__tmp152,__tmp171);
			Boolean __tmp172 = f_tmp_202;
			KeyValue<T> f_tmp_203 = left_node.keyvalue;
			KeyValue<T> __tmp173 = f_tmp_203;
			Boolean[] f_tmp_204 = __tmp173.key;
			Boolean[] __tmp174 = f_tmp_204;
			KeyValue<T> f_tmp_205 = top_node.keyvalue;
			KeyValue<T> __tmp175 = f_tmp_205;
			Boolean[] f_tmp_206 = __tmp175.key;
			Boolean[] __tmp176 = f_tmp_206;
			Boolean f_tmp_207 = intLib.not(intLib.leq(__tmp174, __tmp176));
			Boolean __tmp177 = f_tmp_207;
			Boolean f_tmp_208 = intLib.and(__tmp172,__tmp177);
			Boolean __tmp178 = f_tmp_208;
			KeyValue<T> f_tmp_209 = top_node.keyvalue;
			KeyValue<T> __tmp179 = f_tmp_209;
			KeyValue<T> f_tmp_210 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(tmp_kv.getBits(), __tmp179.getBits(),__tmp178));
			KeyValue<T> __tmp180 = f_tmp_210;
			tmp_kv = __tmp180;
			KeyValue<T> f_tmp_211 = left_node.keyvalue;
			KeyValue<T> __tmp181 = f_tmp_211;
			KeyValue<T> f_tmp_212 = top_node.keyvalue;
			KeyValue<T> __tmp182 = f_tmp_212;
			KeyValue<T> f_tmp_213 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp182.getBits(), __tmp181.getBits(),__tmp178));
			KeyValue<T> __tmp183 = f_tmp_213;
			top_node.keyvalue = __tmp183;
			KeyValue<T> f_tmp_214 = left_node.keyvalue;
			KeyValue<T> __tmp184 = f_tmp_214;
			KeyValue<T> f_tmp_215 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp184.getBits(), tmp_kv.getBits(),__tmp178));
			KeyValue<T> __tmp185 = f_tmp_215;
			left_node.keyvalue = __tmp185;
			boolean f_tmp_216 = true;
			boolean __tmp186 = f_tmp_216;
			Boolean f_tmp_218 = env.inputOfAlice(__tmp186);
			Boolean f_tmp_217 = intLib.mux(go_left, f_tmp_218,__tmp178);
			Boolean __tmp187 = f_tmp_217;
			go_left = __tmp187;
			Boolean f_tmp_219 = intLib.not(__tmp177);
			Boolean __tmp188 = f_tmp_219;
			Boolean f_tmp_220 = intLib.and(__tmp172,__tmp188);
			Boolean __tmp189 = f_tmp_220;
			Boolean f_tmp_221 = intLib.not(__tmp171);
			Boolean __tmp190 = f_tmp_221;
			Boolean f_tmp_222 = intLib.and(__tmp152,__tmp190);
			Boolean __tmp191 = f_tmp_222;
			KeyValue<T> f_tmp_223 = right_node.keyvalue;
			KeyValue<T> __tmp192 = f_tmp_223;
			Boolean[] f_tmp_224 = __tmp192.key;
			Boolean[] __tmp193 = f_tmp_224;
			KeyValue<T> f_tmp_225 = top_node.keyvalue;
			KeyValue<T> __tmp194 = f_tmp_225;
			Boolean[] f_tmp_226 = __tmp194.key;
			Boolean[] __tmp195 = f_tmp_226;
			Boolean f_tmp_227 = intLib.not(intLib.leq(__tmp193, __tmp195));
			Boolean __tmp196 = f_tmp_227;
			Boolean f_tmp_228 = intLib.and(__tmp191,__tmp196);
			Boolean __tmp197 = f_tmp_228;
			KeyValue<T> f_tmp_229 = top_node.keyvalue;
			KeyValue<T> __tmp198 = f_tmp_229;
			KeyValue<T> f_tmp_230 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(tmp_kv.getBits(), __tmp198.getBits(),__tmp197));
			KeyValue<T> __tmp199 = f_tmp_230;
			tmp_kv = __tmp199;
			KeyValue<T> f_tmp_231 = right_node.keyvalue;
			KeyValue<T> __tmp200 = f_tmp_231;
			KeyValue<T> f_tmp_232 = top_node.keyvalue;
			KeyValue<T> __tmp201 = f_tmp_232;
			KeyValue<T> f_tmp_233 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp201.getBits(), __tmp200.getBits(),__tmp197));
			KeyValue<T> __tmp202 = f_tmp_233;
			top_node.keyvalue = __tmp202;
			KeyValue<T> f_tmp_234 = right_node.keyvalue;
			KeyValue<T> __tmp203 = f_tmp_234;
			KeyValue<T> f_tmp_235 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp203.getBits(), tmp_kv.getBits(),__tmp197));
			KeyValue<T> __tmp204 = f_tmp_235;
			right_node.keyvalue = __tmp204;
			boolean f_tmp_236 = false;
			boolean __tmp205 = f_tmp_236;
			Boolean f_tmp_238 = env.inputOfAlice(__tmp205);
			Boolean f_tmp_237 = intLib.mux(go_left, f_tmp_238,__tmp197);
			Boolean __tmp206 = f_tmp_237;
			go_left = __tmp206;
			Boolean f_tmp_239 = intLib.not(__tmp196);
			Boolean __tmp207 = f_tmp_239;
			Boolean f_tmp_240 = intLib.and(__tmp191,__tmp207);
			Boolean __tmp208 = f_tmp_240;
			boolean f_tmp_241 = true;
			boolean __tmp209 = f_tmp_241;
			Boolean f_tmp_243 = env.inputOfAlice(__tmp209);
			Boolean f_tmp_242 = intLib.eq(go_left, f_tmp_243);
			Boolean __tmp210 = f_tmp_242;
			Boolean f_tmp_244 = intLib.and(__tmp152,__tmp210);
			Boolean __tmp211 = f_tmp_244;
			PriorityQueueNode<T> f_tmp_245 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node_to_use.getBits(), left_node.getBits(),__tmp211));
			PriorityQueueNode<T> __tmp212 = f_tmp_245;
			node_to_use = __tmp212;
			NodeId f_tmp_246 = top_node.left;
			NodeId __tmp213 = f_tmp_246;
			Boolean[] f_tmp_247 = __tmp213.id;
			Boolean[] __tmp214 = f_tmp_247;
			Boolean[] f_tmp_248 = intLib.mux(id_to_use, __tmp214,__tmp211);
			Boolean[] __tmp215 = f_tmp_248;
			id_to_use = __tmp215;
			Boolean f_tmp_249 = intLib.not(__tmp210);
			Boolean __tmp216 = f_tmp_249;
			Boolean f_tmp_250 = intLib.and(__tmp152,__tmp216);
			Boolean __tmp217 = f_tmp_250;
			PriorityQueueNode<T> f_tmp_251 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node_to_use.getBits(), right_node.getBits(),__tmp217));
			PriorityQueueNode<T> __tmp218 = f_tmp_251;
			node_to_use = __tmp218;
			NodeId f_tmp_252 = top_node.right;
			NodeId __tmp219 = f_tmp_252;
			Boolean[] f_tmp_253 = __tmp219.id;
			Boolean[] __tmp220 = f_tmp_253;
			Boolean[] f_tmp_254 = intLib.mux(id_to_use, __tmp220,__tmp217);
			Boolean[] __tmp221 = f_tmp_254;
			id_to_use = __tmp221;
			boolean f_tmp_255 = true;
			boolean __tmp222 = f_tmp_255;
			Boolean f_tmp_257 = env.inputOfAlice(__tmp222);
			Boolean f_tmp_256 = intLib.eq(dummy_bit, f_tmp_257);
			Boolean __tmp223 = f_tmp_256;
			Boolean[] f_tmp_258 = this.size;
			Boolean[] __tmp224 = f_tmp_258;
			int f_tmp_259 = 1;
			int __tmp225 = f_tmp_259;
			Boolean[] f_tmp_260 = intLib.rightPublicShift(__tmp224, __tmp225);
			Boolean[] __tmp226 = f_tmp_260;
			Boolean f_tmp_261 = intLib.leq(top_id, __tmp226);
			Boolean __tmp227 = f_tmp_261;
			Boolean f_tmp_262 = intLib.and(__tmp223,__tmp227);
			Boolean __tmp228 = f_tmp_262;
			Boolean f_tmp_263 = intLib.and(__tmp152,__tmp228);
			Boolean __tmp229 = f_tmp_263;
			boolean f_tmp_264 = true;
			boolean __tmp230 = f_tmp_264;
			Boolean f_tmp_266 = env.inputOfAlice(__tmp230);
			Boolean f_tmp_265 = intLib.mux(newdummy_bit, f_tmp_266,__tmp229);
			Boolean __tmp231 = f_tmp_265;
			newdummy_bit = __tmp231;
			Boolean f_tmp_267 = intLib.not(__tmp228);
			Boolean __tmp232 = f_tmp_267;
			Boolean f_tmp_268 = intLib.and(__tmp152,__tmp232);
			Boolean __tmp233 = f_tmp_268;
			boolean f_tmp_269 = false;
			boolean __tmp234 = f_tmp_269;
			Boolean f_tmp_271 = env.inputOfAlice(__tmp234);
			Boolean f_tmp_270 = intLib.mux(newdummy_bit, f_tmp_271,__tmp233);
			Boolean __tmp235 = f_tmp_270;
			newdummy_bit = __tmp235;
			int f_tmp_272 = 1;
			int __tmp236 = f_tmp_272;
			int f_tmp_273 = level + __tmp236;
			int __tmp237 = f_tmp_273;
			Boolean[] f_tmp_274 = this.heapify(id_to_use, node_to_use, __tmp237, newdummy_bit);
			Boolean[] __tmp238 = f_tmp_274;
			Boolean[] f_tmp_275 = intLib.mux(child_iter, __tmp238,__tmp152);
			Boolean[] __tmp239 = f_tmp_275;
			child_iter = __tmp239;
			NodeId f_tmp_276 = top_node.left;
			NodeId __tmp240 = f_tmp_276;
			Boolean[] f_tmp_277 = __tmp240.id;
			Boolean[] __tmp241 = f_tmp_277;
			Boolean[] f_tmp_278 = intLib.mux(id_to_use, __tmp241,__tmp152);
			Boolean[] __tmp242 = f_tmp_278;
			id_to_use = __tmp242;
			PriorityQueueNode<T> f_tmp_279 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node_to_use.getBits(), left_node.getBits(),__tmp152));
			PriorityQueueNode<T> __tmp243 = f_tmp_279;
			node_to_use = __tmp243;
			boolean f_tmp_280 = true;
			boolean __tmp244 = f_tmp_280;
			Boolean f_tmp_282 = env.inputOfAlice(__tmp244);
			Boolean f_tmp_281 = intLib.eq(go_left, f_tmp_282);
			Boolean __tmp245 = f_tmp_281;
			Boolean f_tmp_283 = intLib.and(__tmp152,__tmp245);
			Boolean __tmp246 = f_tmp_283;
			NodeId f_tmp_284 = top_node.left;
			NodeId __tmp247 = f_tmp_284;
			Boolean[] f_tmp_285 = __tmp247.pos;
			Boolean[] __tmp248 = f_tmp_285;
			Boolean[] f_tmp_286 = intLib.mux(__tmp248, child_iter,__tmp246);
			Boolean[] __tmp249 = f_tmp_286;
			__tmp247.pos = __tmp249;
			int f_tmp_287 = 30;
			int __tmp250 = f_tmp_287;
			Boolean[] f_tmp_288 = intLib.randBools(__tmp250);
			Boolean[] __tmp251 = f_tmp_288;
			NodeId f_tmp_289 = top_node.right;
			NodeId __tmp252 = f_tmp_289;
			Boolean[] f_tmp_290 = __tmp252.pos;
			Boolean[] __tmp253 = f_tmp_290;
			Boolean[] f_tmp_291 = intLib.mux(__tmp253, __tmp251,__tmp246);
			Boolean[] __tmp254 = f_tmp_291;
			__tmp252.pos = __tmp254;
			NodeId f_tmp_292 = top_node.right;
			NodeId __tmp255 = f_tmp_292;
			Boolean[] f_tmp_293 = __tmp255.id;
			Boolean[] __tmp256 = f_tmp_293;
			Boolean[] f_tmp_294 = intLib.mux(id_to_use, __tmp256,__tmp246);
			Boolean[] __tmp257 = f_tmp_294;
			id_to_use = __tmp257;
			NodeId f_tmp_295 = top_node.right;
			NodeId __tmp258 = f_tmp_295;
			Boolean[] f_tmp_296 = __tmp258.pos;
			Boolean[] __tmp259 = f_tmp_296;
			Boolean[] f_tmp_297 = intLib.mux(pos_to_use, __tmp259,__tmp246);
			Boolean[] __tmp260 = f_tmp_297;
			pos_to_use = __tmp260;
			PriorityQueueNode<T> f_tmp_298 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node_to_use.getBits(), right_node.getBits(),__tmp246));
			PriorityQueueNode<T> __tmp261 = f_tmp_298;
			node_to_use = __tmp261;
			Boolean f_tmp_299 = intLib.not(__tmp245);
			Boolean __tmp262 = f_tmp_299;
			Boolean f_tmp_300 = intLib.and(__tmp152,__tmp262);
			Boolean __tmp263 = f_tmp_300;
			NodeId f_tmp_301 = top_node.right;
			NodeId __tmp264 = f_tmp_301;
			Boolean[] f_tmp_302 = __tmp264.pos;
			Boolean[] __tmp265 = f_tmp_302;
			Boolean[] f_tmp_303 = intLib.mux(__tmp265, child_iter,__tmp263);
			Boolean[] __tmp266 = f_tmp_303;
			__tmp264.pos = __tmp266;
			int f_tmp_304 = 30;
			int __tmp267 = f_tmp_304;
			Boolean[] f_tmp_305 = intLib.randBools(__tmp267);
			Boolean[] __tmp268 = f_tmp_305;
			NodeId f_tmp_306 = top_node.left;
			NodeId __tmp269 = f_tmp_306;
			Boolean[] f_tmp_307 = __tmp269.pos;
			Boolean[] __tmp270 = f_tmp_307;
			Boolean[] f_tmp_308 = intLib.mux(__tmp270, __tmp268,__tmp263);
			Boolean[] __tmp271 = f_tmp_308;
			__tmp269.pos = __tmp271;
			NodeId f_tmp_309 = top_node.left;
			NodeId __tmp272 = f_tmp_309;
			Boolean[] f_tmp_310 = __tmp272.pos;
			Boolean[] __tmp273 = f_tmp_310;
			Boolean[] f_tmp_311 = intLib.mux(pos_to_use, __tmp273,__tmp263);
			Boolean[] __tmp274 = f_tmp_311;
			pos_to_use = __tmp274;
			CircuitOram<Boolean> f_tmp_312 = this.poram;
			CircuitOram<Boolean> __tmp275 = f_tmp_312;
			__tmp275.conditionalPutBack(id_to_use, pos_to_use, node_to_use.getBits(), __tmp152);
			Boolean f_tmp_314 = intLib.not(__tmp151);
			Boolean __tmp277 = f_tmp_314;
			Boolean f_tmp_315 = intLib.and(__tmp147,__tmp277);
			Boolean __tmp278 = f_tmp_315;
			Boolean[] f_tmp_316 = this.size;
			Boolean[] __tmp279 = f_tmp_316;
			Boolean f_tmp_317 = intLib.leq(top_id, __tmp279);
			Boolean __tmp280 = f_tmp_317;
			Boolean f_tmp_318 = intLib.and(__tmp147,__tmp280);
			Boolean __tmp281 = f_tmp_318;
			int f_tmp_319 = 30;
			int __tmp282 = f_tmp_319;
			Boolean[] f_tmp_320 = intLib.randBools(__tmp282);
			Boolean[] __tmp283 = f_tmp_320;
			Boolean[] f_tmp_321 = intLib.mux(ret, __tmp283,__tmp281);
			Boolean[] __tmp284 = f_tmp_321;
			ret = __tmp284;
			CircuitOram<Boolean> f_tmp_322 = this.poram;
			CircuitOram<Boolean> __tmp285 = f_tmp_322;
			__tmp285.conditionalPutBack(top_id, ret, top_node.getBits(), __tmp281);
			Boolean f_tmp_324 = intLib.not(__tmp280);
			Boolean __tmp287 = f_tmp_324;
			Boolean f_tmp_325 = intLib.and(__tmp147,__tmp287);
			Boolean __tmp288 = f_tmp_325;
			Boolean f_tmp_326 = intLib.not(__tmp147);
			Boolean __tmp289 = f_tmp_326;
		} else {
		}
		return ret;
	}
	public PriorityQueueNode<T> get_last(NodeId top, int level, Boolean dummy_bit) throws Exception {
		PriorityQueueNode<T> ret = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		Boolean newdummy_bit = env.inputOfAlice(false);
		PriorityQueueNode<T> node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		PriorityQueueNode<T> child = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		Boolean go_left = env.inputOfAlice(false);
		NodeId next = new NodeId(env, intLib, m);
		boolean f_tmp_327 = false;
		boolean __tmp290 = f_tmp_327;
		newdummy_bit = env.inputOfAlice(__tmp290);
		boolean f_tmp_328 = level < m;
		boolean __tmp291 = f_tmp_328;
		if(__tmp291) {
			boolean f_tmp_329 = true;
			boolean __tmp292 = f_tmp_329;
			Boolean f_tmp_331 = env.inputOfAlice(__tmp292);
			Boolean f_tmp_330 = intLib.eq(dummy_bit, f_tmp_331);
			Boolean __tmp293 = f_tmp_330;
			Boolean[] f_tmp_332 = top.id;
			Boolean[] __tmp294 = f_tmp_332;
			Boolean[] f_tmp_333 = this.size;
			Boolean[] __tmp295 = f_tmp_333;
			Boolean f_tmp_334 = intLib.leq(__tmp294, __tmp295);
			Boolean __tmp296 = f_tmp_334;
			Boolean f_tmp_335 = intLib.and(__tmp293,__tmp296);
			Boolean __tmp297 = f_tmp_335;
			Boolean[] f_tmp_336 = top.id;
			Boolean[] __tmp298 = f_tmp_336;
			Boolean[] f_tmp_337 = top.pos;
			Boolean[] __tmp299 = f_tmp_337;
			CircuitOram<Boolean> f_tmp_338 = this.poram;
			CircuitOram<Boolean> __tmp300 = f_tmp_338;
			PriorityQueueNode<T> f_tmp_339 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(__tmp300.conditionalReadAndRemove(__tmp298, __tmp299, __tmp297));
			PriorityQueueNode<T> __tmp301 = f_tmp_339;
			PriorityQueueNode<T> f_tmp_340 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node.getBits(), __tmp301.getBits(),__tmp297));
			PriorityQueueNode<T> __tmp302 = f_tmp_340;
			node = __tmp302;
			Boolean[] f_tmp_341 = top.id;
			Boolean[] __tmp303 = f_tmp_341;
			Boolean[] f_tmp_342 = this.size;
			Boolean[] __tmp304 = f_tmp_342;
			Boolean f_tmp_343 = intLib.eq(__tmp303, __tmp304);
			Boolean __tmp305 = f_tmp_343;
			Boolean f_tmp_344 = intLib.and(__tmp297,__tmp305);
			Boolean __tmp306 = f_tmp_344;
			PriorityQueueNode<T> f_tmp_345 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(ret.getBits(), node.getBits(),__tmp306));
			PriorityQueueNode<T> __tmp307 = f_tmp_345;
			ret = __tmp307;
			Boolean f_tmp_346 = intLib.not(__tmp305);
			Boolean __tmp308 = f_tmp_346;
			Boolean f_tmp_347 = intLib.and(__tmp297,__tmp308);
			Boolean __tmp309 = f_tmp_347;
			Boolean[] f_tmp_348 = this.size;
			Boolean[] __tmp310 = f_tmp_348;
			Boolean f_tmp_349 = this.should_go_left(__tmp310, level);
			Boolean __tmp311 = f_tmp_349;
			Boolean f_tmp_350 = intLib.mux(go_left, __tmp311,__tmp309);
			Boolean __tmp312 = f_tmp_350;
			go_left = __tmp312;
			NodeId f_tmp_351 = node.right;
			NodeId __tmp313 = f_tmp_351;
			NodeId f_tmp_352 = new NodeId(env, intLib, m).newObj(intLib.mux(next.getBits(), __tmp313.getBits(),__tmp309));
			NodeId __tmp314 = f_tmp_352;
			next = __tmp314;
			boolean f_tmp_353 = true;
			boolean __tmp315 = f_tmp_353;
			Boolean f_tmp_355 = env.inputOfAlice(__tmp315);
			Boolean f_tmp_354 = intLib.eq(go_left, f_tmp_355);
			Boolean __tmp316 = f_tmp_354;
			Boolean f_tmp_356 = intLib.and(__tmp309,__tmp316);
			Boolean __tmp317 = f_tmp_356;
			NodeId f_tmp_357 = node.left;
			NodeId __tmp318 = f_tmp_357;
			NodeId f_tmp_358 = new NodeId(env, intLib, m).newObj(intLib.mux(next.getBits(), __tmp318.getBits(),__tmp317));
			NodeId __tmp319 = f_tmp_358;
			next = __tmp319;
			Boolean f_tmp_359 = intLib.not(__tmp316);
			Boolean __tmp320 = f_tmp_359;
			Boolean f_tmp_360 = intLib.and(__tmp309,__tmp320);
			Boolean __tmp321 = f_tmp_360;
			boolean f_tmp_361 = true;
			boolean __tmp322 = f_tmp_361;
			Boolean f_tmp_363 = env.inputOfAlice(__tmp322);
			Boolean f_tmp_362 = intLib.eq(dummy_bit, f_tmp_363);
			Boolean __tmp323 = f_tmp_362;
			Boolean[] f_tmp_364 = top.id;
			Boolean[] __tmp324 = f_tmp_364;
			Boolean[] f_tmp_365 = this.size;
			Boolean[] __tmp325 = f_tmp_365;
			Boolean f_tmp_366 = intLib.not(intLib.geq(__tmp324, __tmp325));
			Boolean __tmp326 = f_tmp_366;
			Boolean f_tmp_367 = intLib.and(__tmp323,__tmp326);
			Boolean __tmp327 = f_tmp_367;
			Boolean f_tmp_368 = intLib.and(__tmp309,__tmp327);
			Boolean __tmp328 = f_tmp_368;
			boolean f_tmp_369 = true;
			boolean __tmp329 = f_tmp_369;
			Boolean f_tmp_371 = env.inputOfAlice(__tmp329);
			Boolean f_tmp_370 = intLib.mux(newdummy_bit, f_tmp_371,__tmp328);
			Boolean __tmp330 = f_tmp_370;
			newdummy_bit = __tmp330;
			Boolean f_tmp_372 = intLib.not(__tmp327);
			Boolean __tmp331 = f_tmp_372;
			Boolean f_tmp_373 = intLib.and(__tmp309,__tmp331);
			Boolean __tmp332 = f_tmp_373;
			boolean f_tmp_374 = false;
			boolean __tmp333 = f_tmp_374;
			Boolean f_tmp_376 = env.inputOfAlice(__tmp333);
			Boolean f_tmp_375 = intLib.mux(newdummy_bit, f_tmp_376,__tmp332);
			Boolean __tmp334 = f_tmp_375;
			newdummy_bit = __tmp334;
			int f_tmp_377 = 1;
			int __tmp335 = f_tmp_377;
			int f_tmp_378 = level + __tmp335;
			int __tmp336 = f_tmp_378;
			PriorityQueueNode<T> f_tmp_379 = this.get_last(next, __tmp336, newdummy_bit);
			PriorityQueueNode<T> __tmp337 = f_tmp_379;
			PriorityQueueNode<T> f_tmp_380 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(child.getBits(), __tmp337.getBits(),__tmp309));
			PriorityQueueNode<T> __tmp338 = f_tmp_380;
			child = __tmp338;
			boolean f_tmp_381 = true;
			boolean __tmp339 = f_tmp_381;
			Boolean f_tmp_383 = env.inputOfAlice(__tmp339);
			Boolean f_tmp_382 = intLib.eq(go_left, f_tmp_383);
			Boolean __tmp340 = f_tmp_382;
			Boolean f_tmp_384 = intLib.and(__tmp309,__tmp340);
			Boolean __tmp341 = f_tmp_384;
			NodeId f_tmp_385 = child.left;
			NodeId __tmp342 = f_tmp_385;
			Boolean[] f_tmp_386 = __tmp342.pos;
			Boolean[] __tmp343 = f_tmp_386;
			NodeId f_tmp_387 = node.left;
			NodeId __tmp344 = f_tmp_387;
			Boolean[] f_tmp_388 = __tmp344.pos;
			Boolean[] __tmp345 = f_tmp_388;
			Boolean[] f_tmp_389 = intLib.mux(__tmp345, __tmp343,__tmp341);
			Boolean[] __tmp346 = f_tmp_389;
			__tmp344.pos = __tmp346;
			Boolean f_tmp_390 = intLib.not(__tmp340);
			Boolean __tmp347 = f_tmp_390;
			Boolean f_tmp_391 = intLib.and(__tmp309,__tmp347);
			Boolean __tmp348 = f_tmp_391;
			NodeId f_tmp_392 = child.left;
			NodeId __tmp349 = f_tmp_392;
			Boolean[] f_tmp_393 = __tmp349.pos;
			Boolean[] __tmp350 = f_tmp_393;
			NodeId f_tmp_394 = node.right;
			NodeId __tmp351 = f_tmp_394;
			Boolean[] f_tmp_395 = __tmp351.pos;
			Boolean[] __tmp352 = f_tmp_395;
			Boolean[] f_tmp_396 = intLib.mux(__tmp352, __tmp350,__tmp348);
			Boolean[] __tmp353 = f_tmp_396;
			__tmp351.pos = __tmp353;
			int f_tmp_397 = 30;
			int __tmp354 = f_tmp_397;
			Boolean[] f_tmp_398 = intLib.randBools(__tmp354);
			Boolean[] __tmp355 = f_tmp_398;
			Boolean[] f_tmp_399 = top.pos;
			Boolean[] __tmp356 = f_tmp_399;
			Boolean[] f_tmp_400 = intLib.mux(__tmp356, __tmp355,__tmp309);
			Boolean[] __tmp357 = f_tmp_400;
			top.pos = __tmp357;
			Boolean[] f_tmp_401 = top.id;
			Boolean[] __tmp358 = f_tmp_401;
			Boolean[] f_tmp_402 = top.pos;
			Boolean[] __tmp359 = f_tmp_402;
			CircuitOram<Boolean> f_tmp_403 = this.poram;
			CircuitOram<Boolean> __tmp360 = f_tmp_403;
			__tmp360.conditionalPutBack(__tmp358, __tmp359, node.getBits(), __tmp309);
			Boolean[] f_tmp_405 = top.pos;
			Boolean[] __tmp362 = f_tmp_405;
			NodeId f_tmp_406 = child.left;
			NodeId __tmp363 = f_tmp_406;
			Boolean[] f_tmp_407 = __tmp363.pos;
			Boolean[] __tmp364 = f_tmp_407;
			Boolean[] f_tmp_408 = intLib.mux(__tmp364, __tmp362,__tmp309);
			Boolean[] __tmp365 = f_tmp_408;
			__tmp363.pos = __tmp365;
			PriorityQueueNode<T> f_tmp_409 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(ret.getBits(), child.getBits(),__tmp309));
			PriorityQueueNode<T> __tmp366 = f_tmp_409;
			ret = __tmp366;
			Boolean f_tmp_410 = intLib.not(__tmp297);
			Boolean __tmp367 = f_tmp_410;
		} else {
		}
		return ret;
	}
	public void insert(KeyValue<T> kv, Boolean dummy_bit) throws Exception {
		KeyValue<T> parent_kv = new KeyValue<T>(env, intLib, m, factoryT);
		int f_tmp_411 = 1;
		int __tmp368 = f_tmp_411;
		int f_tmp_412 = 15;
		int __tmp369 = f_tmp_412;
		int f_tmp_413 = 1;
		int __tmp370 = f_tmp_413;
		int f_tmp_414 = __tmp369 - __tmp370;
		int __tmp371 = f_tmp_414;
		int f_tmp_415 = __tmp368 << __tmp371;
		int __tmp372 = f_tmp_415;
		Boolean[] f_tmp_416 = env.inputOfAlice(Utils.fromInt(__tmp372, 16));
		parent_kv.key = f_tmp_416;
		boolean f_tmp_417 = true;
		boolean __tmp373 = f_tmp_417;
		Boolean f_tmp_419 = env.inputOfAlice(__tmp373);
		Boolean f_tmp_418 = intLib.eq(dummy_bit, f_tmp_419);
		Boolean __tmp374 = f_tmp_418;
		Boolean[] f_tmp_420 = this.size;
		Boolean[] __tmp375 = f_tmp_420;
		int f_tmp_421 = 1;
		int __tmp376 = f_tmp_421;
		Boolean[] f_tmp_423 = env.inputOfAlice(Utils.fromInt(__tmp376, m));
		Boolean[] f_tmp_422 = intLib.add(__tmp375,f_tmp_423);
		Boolean[] __tmp377 = f_tmp_422;
		Boolean[] f_tmp_424 = this.size;
		Boolean[] __tmp378 = f_tmp_424;
		Boolean[] f_tmp_425 = intLib.mux(__tmp378, __tmp377,__tmp374);
		Boolean[] __tmp379 = f_tmp_425;
		this.size = __tmp379;
		NodeId f_tmp_426 = this.root;
		NodeId __tmp380 = f_tmp_426;
		Boolean[] f_tmp_427 = __tmp380.id;
		Boolean[] __tmp381 = f_tmp_427;
		NodeId f_tmp_428 = this.root;
		NodeId __tmp382 = f_tmp_428;
		Boolean[] f_tmp_429 = __tmp382.pos;
		Boolean[] __tmp383 = f_tmp_429;
		int f_tmp_430 = 1;
		int __tmp384 = f_tmp_430;
		Boolean[] f_tmp_431 = this.insert_internal(kv, parent_kv, __tmp381, __tmp383, __tmp384, dummy_bit);
		Boolean[] __tmp385 = f_tmp_431;
		NodeId f_tmp_432 = this.root;
		NodeId __tmp386 = f_tmp_432;
		Boolean[] f_tmp_433 = __tmp386.pos;
		Boolean[] __tmp387 = f_tmp_433;
		Boolean[] f_tmp_434 = intLib.mux(__tmp387, __tmp385,__tmp374);
		Boolean[] __tmp388 = f_tmp_434;
		__tmp386.pos = __tmp388;
		Boolean f_tmp_435 = intLib.not(__tmp374);
		Boolean __tmp389 = f_tmp_435;

	}
	public Boolean[] insert_internal(KeyValue<T> kv, KeyValue<T> parent_kv, Boolean[] iter_id, Boolean[] iter_pos, int level, Boolean dummy_bit) throws Exception {
		Boolean[] ret = intLib.randBools(m);
		Boolean newdummy_bit = env.inputOfAlice(false);
		PriorityQueueNode<T> node = new PriorityQueueNode<T>(env, intLib, m, factoryT);
		Boolean go_left = env.inputOfAlice(false);
		NodeId next = new NodeId(env, intLib, m);
		Boolean[] newId = intLib.randBools(m);
		boolean f_tmp_436 = false;
		boolean __tmp390 = f_tmp_436;
		newdummy_bit = env.inputOfAlice(__tmp390);
		boolean f_tmp_437 = level < m;
		boolean __tmp391 = f_tmp_437;
		if(__tmp391) {
			boolean f_tmp_438 = true;
			boolean __tmp392 = f_tmp_438;
			Boolean f_tmp_440 = env.inputOfAlice(__tmp392);
			Boolean f_tmp_439 = intLib.eq(dummy_bit, f_tmp_440);
			Boolean __tmp393 = f_tmp_439;
			Boolean[] f_tmp_441 = this.size;
			Boolean[] __tmp394 = f_tmp_441;
			Boolean f_tmp_442 = intLib.leq(iter_id, __tmp394);
			Boolean __tmp395 = f_tmp_442;
			Boolean f_tmp_443 = intLib.and(__tmp393,__tmp395);
			Boolean __tmp396 = f_tmp_443;
			Boolean[] f_tmp_444 = this.size;
			Boolean[] __tmp397 = f_tmp_444;
			Boolean f_tmp_445 = intLib.eq(iter_id, __tmp397);
			Boolean __tmp398 = f_tmp_445;
			Boolean f_tmp_446 = intLib.and(__tmp396,__tmp398);
			Boolean __tmp399 = f_tmp_446;
			KeyValue<T> f_tmp_447 = node.keyvalue;
			KeyValue<T> __tmp400 = f_tmp_447;
			KeyValue<T> f_tmp_448 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp400.getBits(), kv.getBits(),__tmp399));
			KeyValue<T> __tmp401 = f_tmp_448;
			node.keyvalue = __tmp401;
			Boolean[] f_tmp_449 = parent_kv.key;
			Boolean[] __tmp402 = f_tmp_449;
			Boolean[] f_tmp_450 = kv.key;
			Boolean[] __tmp403 = f_tmp_450;
			Boolean f_tmp_451 = intLib.not(intLib.geq(__tmp402, __tmp403));
			Boolean __tmp404 = f_tmp_451;
			Boolean f_tmp_452 = intLib.and(__tmp399,__tmp404);
			Boolean __tmp405 = f_tmp_452;
			KeyValue<T> f_tmp_453 = node.keyvalue;
			KeyValue<T> __tmp406 = f_tmp_453;
			KeyValue<T> f_tmp_454 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp406.getBits(), parent_kv.getBits(),__tmp405));
			KeyValue<T> __tmp407 = f_tmp_454;
			node.keyvalue = __tmp407;
			Boolean f_tmp_455 = intLib.not(__tmp404);
			Boolean __tmp408 = f_tmp_455;
			Boolean f_tmp_456 = intLib.and(__tmp399,__tmp408);
			Boolean __tmp409 = f_tmp_456;
			Boolean f_tmp_457 = intLib.not(__tmp398);
			Boolean __tmp410 = f_tmp_457;
			Boolean f_tmp_458 = intLib.and(__tmp396,__tmp410);
			Boolean __tmp411 = f_tmp_458;
			CircuitOram<Boolean> f_tmp_459 = this.poram;
			CircuitOram<Boolean> __tmp412 = f_tmp_459;
			PriorityQueueNode<T> f_tmp_460 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(__tmp412.conditionalReadAndRemove(iter_id, iter_pos, __tmp411));
			PriorityQueueNode<T> __tmp413 = f_tmp_460;
			PriorityQueueNode<T> f_tmp_461 = new PriorityQueueNode<T>(env, intLib, m, factoryT).newObj(intLib.mux(node.getBits(), __tmp413.getBits(),__tmp411));
			PriorityQueueNode<T> __tmp414 = f_tmp_461;
			node = __tmp414;
			Boolean[] f_tmp_462 = this.size;
			Boolean[] __tmp415 = f_tmp_462;
			Boolean f_tmp_463 = this.should_go_left(__tmp415, level);
			Boolean __tmp416 = f_tmp_463;
			Boolean f_tmp_464 = intLib.mux(go_left, __tmp416,__tmp411);
			Boolean __tmp417 = f_tmp_464;
			go_left = __tmp417;
			NodeId f_tmp_465 = node.right;
			NodeId __tmp418 = f_tmp_465;
			NodeId f_tmp_466 = new NodeId(env, intLib, m).newObj(intLib.mux(next.getBits(), __tmp418.getBits(),__tmp411));
			NodeId __tmp419 = f_tmp_466;
			next = __tmp419;
			boolean f_tmp_467 = true;
			boolean __tmp420 = f_tmp_467;
			Boolean f_tmp_469 = env.inputOfAlice(__tmp420);
			Boolean f_tmp_468 = intLib.eq(go_left, f_tmp_469);
			Boolean __tmp421 = f_tmp_468;
			Boolean f_tmp_470 = intLib.and(__tmp411,__tmp421);
			Boolean __tmp422 = f_tmp_470;
			NodeId f_tmp_471 = node.left;
			NodeId __tmp423 = f_tmp_471;
			NodeId f_tmp_472 = new NodeId(env, intLib, m).newObj(intLib.mux(next.getBits(), __tmp423.getBits(),__tmp422));
			NodeId __tmp424 = f_tmp_472;
			next = __tmp424;
			Boolean f_tmp_473 = intLib.not(__tmp421);
			Boolean __tmp425 = f_tmp_473;
			Boolean f_tmp_474 = intLib.and(__tmp411,__tmp425);
			Boolean __tmp426 = f_tmp_474;
			boolean f_tmp_475 = true;
			boolean __tmp427 = f_tmp_475;
			Boolean f_tmp_477 = env.inputOfAlice(__tmp427);
			Boolean f_tmp_476 = intLib.eq(dummy_bit, f_tmp_477);
			Boolean __tmp428 = f_tmp_476;
			Boolean[] f_tmp_478 = this.size;
			Boolean[] __tmp429 = f_tmp_478;
			Boolean f_tmp_479 = intLib.not(intLib.geq(iter_id, __tmp429));
			Boolean __tmp430 = f_tmp_479;
			Boolean f_tmp_480 = intLib.and(__tmp428,__tmp430);
			Boolean __tmp431 = f_tmp_480;
			Boolean f_tmp_481 = intLib.and(__tmp411,__tmp431);
			Boolean __tmp432 = f_tmp_481;
			boolean f_tmp_482 = true;
			boolean __tmp433 = f_tmp_482;
			Boolean f_tmp_484 = env.inputOfAlice(__tmp433);
			Boolean f_tmp_483 = intLib.mux(newdummy_bit, f_tmp_484,__tmp432);
			Boolean __tmp434 = f_tmp_483;
			newdummy_bit = __tmp434;
			Boolean f_tmp_485 = intLib.not(__tmp431);
			Boolean __tmp435 = f_tmp_485;
			Boolean f_tmp_486 = intLib.and(__tmp411,__tmp435);
			Boolean __tmp436 = f_tmp_486;
			boolean f_tmp_487 = false;
			boolean __tmp437 = f_tmp_487;
			Boolean f_tmp_489 = env.inputOfAlice(__tmp437);
			Boolean f_tmp_488 = intLib.mux(newdummy_bit, f_tmp_489,__tmp436);
			Boolean __tmp438 = f_tmp_488;
			newdummy_bit = __tmp438;
			KeyValue<T> f_tmp_490 = node.keyvalue;
			KeyValue<T> __tmp439 = f_tmp_490;
			Boolean[] f_tmp_491 = next.id;
			Boolean[] __tmp440 = f_tmp_491;
			Boolean[] f_tmp_492 = next.pos;
			Boolean[] __tmp441 = f_tmp_492;
			int f_tmp_493 = 1;
			int __tmp442 = f_tmp_493;
			int f_tmp_494 = level + __tmp442;
			int __tmp443 = f_tmp_494;
			Boolean[] f_tmp_495 = this.insert_internal(kv, __tmp439, __tmp440, __tmp441, __tmp443, newdummy_bit);
			Boolean[] __tmp444 = f_tmp_495;
			Boolean[] f_tmp_496 = intLib.mux(newId, __tmp444,__tmp411);
			Boolean[] __tmp445 = f_tmp_496;
			newId = __tmp445;
			KeyValue<T> f_tmp_497 = node.keyvalue;
			KeyValue<T> __tmp446 = f_tmp_497;
			Boolean[] f_tmp_498 = __tmp446.key;
			Boolean[] __tmp447 = f_tmp_498;
			Boolean[] f_tmp_499 = kv.key;
			Boolean[] __tmp448 = f_tmp_499;
			Boolean f_tmp_500 = intLib.not(intLib.geq(__tmp447, __tmp448));
			Boolean __tmp449 = f_tmp_500;
			Boolean f_tmp_501 = intLib.and(__tmp411,__tmp449);
			Boolean __tmp450 = f_tmp_501;
			KeyValue<T> f_tmp_502 = node.keyvalue;
			KeyValue<T> __tmp451 = f_tmp_502;
			KeyValue<T> f_tmp_503 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp451.getBits(), kv.getBits(),__tmp450));
			KeyValue<T> __tmp452 = f_tmp_503;
			node.keyvalue = __tmp452;
			Boolean[] f_tmp_504 = kv.key;
			Boolean[] __tmp453 = f_tmp_504;
			Boolean[] f_tmp_505 = parent_kv.key;
			Boolean[] __tmp454 = f_tmp_505;
			Boolean f_tmp_506 = intLib.not(intLib.leq(__tmp453, __tmp454));
			Boolean __tmp455 = f_tmp_506;
			Boolean f_tmp_507 = intLib.and(__tmp450,__tmp455);
			Boolean __tmp456 = f_tmp_507;
			KeyValue<T> f_tmp_508 = node.keyvalue;
			KeyValue<T> __tmp457 = f_tmp_508;
			KeyValue<T> f_tmp_509 = new KeyValue<T>(env, intLib, m, factoryT).newObj(intLib.mux(__tmp457.getBits(), parent_kv.getBits(),__tmp456));
			KeyValue<T> __tmp458 = f_tmp_509;
			node.keyvalue = __tmp458;
			Boolean f_tmp_510 = intLib.not(__tmp455);
			Boolean __tmp459 = f_tmp_510;
			Boolean f_tmp_511 = intLib.and(__tmp450,__tmp459);
			Boolean __tmp460 = f_tmp_511;
			Boolean f_tmp_512 = intLib.not(__tmp449);
			Boolean __tmp461 = f_tmp_512;
			Boolean f_tmp_513 = intLib.and(__tmp411,__tmp461);
			Boolean __tmp462 = f_tmp_513;
			boolean f_tmp_514 = true;
			boolean __tmp463 = f_tmp_514;
			Boolean f_tmp_516 = env.inputOfAlice(__tmp463);
			Boolean f_tmp_515 = intLib.eq(go_left, f_tmp_516);
			Boolean __tmp464 = f_tmp_515;
			Boolean f_tmp_517 = intLib.and(__tmp411,__tmp464);
			Boolean __tmp465 = f_tmp_517;
			NodeId f_tmp_518 = node.left;
			NodeId __tmp466 = f_tmp_518;
			Boolean[] f_tmp_519 = __tmp466.pos;
			Boolean[] __tmp467 = f_tmp_519;
			Boolean[] f_tmp_520 = intLib.mux(__tmp467, newId,__tmp465);
			Boolean[] __tmp468 = f_tmp_520;
			__tmp466.pos = __tmp468;
			Boolean f_tmp_521 = intLib.not(__tmp464);
			Boolean __tmp469 = f_tmp_521;
			Boolean f_tmp_522 = intLib.and(__tmp411,__tmp469);
			Boolean __tmp470 = f_tmp_522;
			NodeId f_tmp_523 = node.right;
			NodeId __tmp471 = f_tmp_523;
			Boolean[] f_tmp_524 = __tmp471.pos;
			Boolean[] __tmp472 = f_tmp_524;
			Boolean[] f_tmp_525 = intLib.mux(__tmp472, newId,__tmp470);
			Boolean[] __tmp473 = f_tmp_525;
			__tmp471.pos = __tmp473;
			int f_tmp_526 = 1;
			int __tmp474 = f_tmp_526;
			Boolean[] f_tmp_527 = intLib.leftPublicShift(iter_id, __tmp474);
			Boolean[] __tmp475 = f_tmp_527;
			NodeId f_tmp_528 = node.left;
			NodeId __tmp476 = f_tmp_528;
			Boolean[] f_tmp_529 = __tmp476.id;
			Boolean[] __tmp477 = f_tmp_529;
			Boolean[] f_tmp_530 = intLib.mux(__tmp477, __tmp475,__tmp396);
			Boolean[] __tmp478 = f_tmp_530;
			__tmp476.id = __tmp478;
			NodeId f_tmp_531 = node.left;
			NodeId __tmp479 = f_tmp_531;
			Boolean[] f_tmp_532 = __tmp479.id;
			Boolean[] __tmp480 = f_tmp_532;
			int f_tmp_533 = 1;
			int __tmp481 = f_tmp_533;
			Boolean[] f_tmp_535 = env.inputOfAlice(Utils.fromInt(__tmp481, m));
			Boolean[] f_tmp_534 = intLib.add(__tmp480,f_tmp_535);
			Boolean[] __tmp482 = f_tmp_534;
			NodeId f_tmp_536 = node.right;
			NodeId __tmp483 = f_tmp_536;
			Boolean[] f_tmp_537 = __tmp483.id;
			Boolean[] __tmp484 = f_tmp_537;
			Boolean[] f_tmp_538 = intLib.mux(__tmp484, __tmp482,__tmp396);
			Boolean[] __tmp485 = f_tmp_538;
			__tmp483.id = __tmp485;
			int f_tmp_539 = 30;
			int __tmp486 = f_tmp_539;
			Boolean[] f_tmp_540 = intLib.randBools(__tmp486);
			Boolean[] __tmp487 = f_tmp_540;
			Boolean[] f_tmp_541 = intLib.mux(ret, __tmp487,__tmp396);
			Boolean[] __tmp488 = f_tmp_541;
			ret = __tmp488;
			CircuitOram<Boolean> f_tmp_542 = this.poram;
			CircuitOram<Boolean> __tmp489 = f_tmp_542;
			__tmp489.conditionalPutBack(iter_id, ret, node.getBits(), __tmp396);
			Boolean f_tmp_544 = intLib.not(__tmp396);
			Boolean __tmp491 = f_tmp_544;
		} else {
		}
		return ret;
	}
}
