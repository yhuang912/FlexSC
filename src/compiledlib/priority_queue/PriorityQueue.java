package compiledlib.priority_queue;
import oram.CircuitOram;
import util.Utils;
import circuits.IntegerLib;
import flexsc.CompEnv;
import flexsc.IWritable;
class PriorityQueue<T extends IWritable<T,Boolean>> {
	NodeId root;
	CircuitOram<Boolean> poram;
	Boolean[] size;

	private CompEnv<Boolean> env;
	private IntegerLib<Boolean> lib;
	private T factoryT;

	public PriorityQueue(CompEnv<Boolean> env, IntegerLib<Boolean> lib, T factoryT, CircuitOram<Boolean> poram) throws Exception {
		this.env = env;
		this.lib = lib;
		this.factoryT = factoryT;
		this.root = new NodeId(env, lib);
		this.poram = poram;
		this.size = env.inputOfAlice(Utils.fromInt(0, 32));
	}

	public KeyValue<T> pqueue_op(Boolean[] key, T operand, Boolean[] op) throws Exception {
		KeyValue<T> ret = new KeyValue<T>(env, lib, factoryT);
		KeyValue<T> d = new KeyValue<T>(env, lib, factoryT);
		Boolean[] insert_dummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] pop_dummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		KeyValue<T> f_tmp_0 = new KeyValue<T>(env, lib, factoryT);
		f_tmp_0.value = operand;
		f_tmp_0.key = key;
		KeyValue<T> __tmp0 = f_tmp_0;
		d = __tmp0;
		int f_tmp_1 = 1;
		int __tmp1 = f_tmp_1;
		Boolean[] f_tmp_3 = env.inputOfAlice(Utils.fromInt(__tmp1, 2));
		Boolean f_tmp_2 = lib.eq(op, f_tmp_3);
		Boolean __tmp2 = f_tmp_2;
		int f_tmp_4 = 1;
		int __tmp3 = f_tmp_4;
		Boolean[] f_tmp_6 = env.inputOfAlice(Utils.fromInt(__tmp3, 2));
		Boolean[] f_tmp_5 = lib.mux(insert_dummy_bit, f_tmp_6,__tmp2);
		Boolean[] __tmp4 = f_tmp_5;
		insert_dummy_bit = __tmp4;
		int f_tmp_7 = 0;
		int __tmp5 = f_tmp_7;
		Boolean[] f_tmp_9 = env.inputOfAlice(Utils.fromInt(__tmp5, 2));
		Boolean[] f_tmp_8 = lib.mux(pop_dummy_bit, f_tmp_9,__tmp2);
		Boolean[] __tmp6 = f_tmp_8;
		pop_dummy_bit = __tmp6;
		Boolean f_tmp_10 = lib.not(__tmp2);
		Boolean __tmp7 = f_tmp_10;
		int f_tmp_11 = 0;
		int __tmp8 = f_tmp_11;
		Boolean[] f_tmp_13 = env.inputOfAlice(Utils.fromInt(__tmp8, 2));
		Boolean[] f_tmp_12 = lib.mux(insert_dummy_bit, f_tmp_13,__tmp7);
		Boolean[] __tmp9 = f_tmp_12;
		insert_dummy_bit = __tmp9;
		int f_tmp_14 = 1;
		int __tmp10 = f_tmp_14;
		Boolean[] f_tmp_16 = env.inputOfAlice(Utils.fromInt(__tmp10, 2));
		Boolean[] f_tmp_15 = lib.mux(pop_dummy_bit, f_tmp_16,__tmp7);
		Boolean[] __tmp11 = f_tmp_15;
		pop_dummy_bit = __tmp11;
		KeyValue<T> f_tmp_17 = this.extractMax(pop_dummy_bit);
		KeyValue<T> __tmp12 = f_tmp_17;
		ret = __tmp12;
		this.insert(d, insert_dummy_bit);
		return ret;
	}
	public Boolean[] right_shift(Boolean[] id, int s) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 32));
		int i = 0;
		ret = id;
		int f_tmp_19 = 0;
		int __tmp14 = f_tmp_19;
		i = __tmp14;
		boolean f_tmp_20 = i < s;
		boolean __tmp15 = f_tmp_20;
		while(__tmp15) {
			Boolean[] f_tmp_21 = lib.rightPublicShift(ret, 1);
			Boolean[] __tmp16 = f_tmp_21;
			ret = __tmp16;
			int f_tmp_22 = 1;
			int __tmp17 = f_tmp_22;
			int f_tmp_23 = i + __tmp17;
			int __tmp18 = f_tmp_23;
			i = __tmp18;
			boolean f_tmp_24 = i < s;
			__tmp15 = f_tmp_24;
		}
		return ret;
	}
	public Boolean[] should_go_left(Boolean[] id, int level) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] res = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] tmpid = env.inputOfAlice(Utils.fromInt(0, 32));
		int i = 0;
		Boolean[] toshift = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_25 = 10;
		int __tmp19 = f_tmp_25;
		int f_tmp_26 = 1;
		int __tmp20 = f_tmp_26;
		int f_tmp_27 = __tmp19 - __tmp20;
		int __tmp21 = f_tmp_27;
		boolean f_tmp_28 = level >= __tmp21;
		boolean __tmp22 = f_tmp_28;
		if(__tmp22) {
			int f_tmp_29 = 0;
			int __tmp23 = f_tmp_29;
			ret = env.inputOfAlice(Utils.fromInt(__tmp23, 2));
		} else {
			int f_tmp_30 = 0;
			int __tmp24 = f_tmp_30;
			res = env.inputOfAlice(Utils.fromInt(__tmp24, 32));
			tmpid = id;
			int f_tmp_31 = 0;
			int __tmp25 = f_tmp_31;
			i = __tmp25;
			int f_tmp_32 = 10;
			int __tmp26 = f_tmp_32;
			boolean f_tmp_33 = i < __tmp26;
			boolean __tmp27 = f_tmp_33;
			while(__tmp27) {
				int f_tmp_34 = 1;
				int __tmp28 = f_tmp_34;
				Boolean[] f_tmp_36 = env.inputOfAlice(Utils.fromInt(__tmp28, 32));
				Boolean f_tmp_35 = lib.eq(tmpid, f_tmp_36);
				Boolean __tmp29 = f_tmp_35;
				Boolean[] f_tmp_38 = env.inputOfAlice(Utils.fromInt(i, 32));
				Boolean[] f_tmp_37 = lib.mux(res, f_tmp_38,__tmp29);
				Boolean[] __tmp30 = f_tmp_37;
				res = __tmp30;
				Boolean f_tmp_39 = lib.not(__tmp29);
				Boolean __tmp31 = f_tmp_39;
				Boolean[] f_tmp_40 = lib.rightPublicShift(tmpid, 1);
				Boolean[] __tmp32 = f_tmp_40;
				tmpid = __tmp32;
				int f_tmp_41 = 1;
				int __tmp33 = f_tmp_41;
				int f_tmp_42 = i + __tmp33;
				int __tmp34 = f_tmp_42;
				i = __tmp34;
				int f_tmp_43 = 10;
				__tmp26 = f_tmp_43;
				boolean f_tmp_44 = i < __tmp26;
				__tmp27 = f_tmp_44;
			}
			tmpid = id;
			Boolean[] f_tmp_46 = env.inputOfAlice(Utils.fromInt(level, 32));
			Boolean[] f_tmp_45 = lib.sub(res,f_tmp_46);
			Boolean[] __tmp35 = f_tmp_45;
			toshift = __tmp35;
			int f_tmp_47 = 0;
			int __tmp36 = f_tmp_47;
			i = __tmp36;
			int f_tmp_48 = 10;
			int __tmp37 = f_tmp_48;
			boolean f_tmp_49 = i < __tmp37;
			boolean __tmp38 = f_tmp_49;
			while(__tmp38) {
				int f_tmp_50 = 0;
				int __tmp39 = f_tmp_50;
				Boolean[] f_tmp_52 = env.inputOfAlice(Utils.fromInt(__tmp39, 32));
				Boolean f_tmp_51 = lib.not(lib.leq(toshift, f_tmp_52));
				Boolean __tmp40 = f_tmp_51;
				Boolean[] f_tmp_53 = lib.rightPublicShift(tmpid, 1);
				Boolean[] __tmp41 = f_tmp_53;
				Boolean[] f_tmp_54 = lib.mux(tmpid, __tmp41,__tmp40);
				Boolean[] __tmp42 = f_tmp_54;
				tmpid = __tmp42;
				int f_tmp_55 = 1;
				int __tmp43 = f_tmp_55;
				Boolean[] f_tmp_57 = env.inputOfAlice(Utils.fromInt(__tmp43, 32));
				Boolean[] f_tmp_56 = lib.sub(toshift,f_tmp_57);
				Boolean[] __tmp44 = f_tmp_56;
				Boolean[] f_tmp_58 = lib.mux(toshift, __tmp44,__tmp40);
				Boolean[] __tmp45 = f_tmp_58;
				toshift = __tmp45;
				Boolean f_tmp_59 = lib.not(__tmp40);
				Boolean __tmp46 = f_tmp_59;
				int f_tmp_60 = 1;
				int __tmp47 = f_tmp_60;
				int f_tmp_61 = i + __tmp47;
				int __tmp48 = f_tmp_61;
				i = __tmp48;
				int f_tmp_62 = 10;
				__tmp37 = f_tmp_62;
				boolean f_tmp_63 = i < __tmp37;
				__tmp38 = f_tmp_63;
			}
			int f_tmp_64 = 1;
			int __tmp49 = f_tmp_64;
			Boolean[] f_tmp_66 = env.inputOfAlice(Utils.fromInt(__tmp49, 32));
			Boolean f_tmp_65 = lib.eq(id, f_tmp_66);
			Boolean __tmp50 = f_tmp_65;
			int f_tmp_67 = 0;
			int __tmp51 = f_tmp_67;
			Boolean[] f_tmp_69 = env.inputOfAlice(Utils.fromInt(__tmp51, 2));
			Boolean[] f_tmp_68 = lib.mux(ret, f_tmp_69,__tmp50);
			Boolean[] __tmp52 = f_tmp_68;
			ret = __tmp52;
			Boolean f_tmp_70 = lib.not(__tmp50);
			Boolean __tmp53 = f_tmp_70;
			int f_tmp_71 = 1;
			int __tmp54 = f_tmp_71;
			Boolean[] f_tmp_73 = env.inputOfAlice(Utils.fromInt(__tmp54, 32));
			Boolean[] f_tmp_72 = lib.and(tmpid,f_tmp_73);
			Boolean[] __tmp55 = f_tmp_72;
			int f_tmp_74 = 0;
			int __tmp56 = f_tmp_74;
			Boolean[] f_tmp_76 = env.inputOfAlice(Utils.fromInt(__tmp56, 32));
			Boolean f_tmp_75 = lib.eq(__tmp55, f_tmp_76);
			Boolean __tmp57 = f_tmp_75;
			Boolean f_tmp_77 = lib.and(__tmp53,__tmp57);
			Boolean __tmp58 = f_tmp_77;
			int f_tmp_78 = 0;
			int __tmp59 = f_tmp_78;
			Boolean[] f_tmp_80 = env.inputOfAlice(Utils.fromInt(__tmp59, 2));
			Boolean[] f_tmp_79 = lib.mux(ret, f_tmp_80,__tmp58);
			Boolean[] __tmp60 = f_tmp_79;
			ret = __tmp60;
			Boolean f_tmp_81 = lib.not(__tmp57);
			Boolean __tmp61 = f_tmp_81;
			Boolean f_tmp_82 = lib.and(__tmp53,__tmp61);
			Boolean __tmp62 = f_tmp_82;
			int f_tmp_83 = 1;
			int __tmp63 = f_tmp_83;
			Boolean[] f_tmp_85 = env.inputOfAlice(Utils.fromInt(__tmp63, 2));
			Boolean[] f_tmp_84 = lib.mux(ret, f_tmp_85,__tmp62);
			Boolean[] __tmp64 = f_tmp_84;
			ret = __tmp64;
		}
		return ret;
	}
	public KeyValue<T> extractMax(Boolean[] dummy_bit) throws Exception {
		KeyValue<T> ret = new KeyValue<T>(env, lib, factoryT);
		PriorityQueueNode<T> last_node = new PriorityQueueNode<T>(env, lib, factoryT);
		Boolean[] newdummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		PriorityQueueNode<T> root_node = new PriorityQueueNode<T>(env, lib, factoryT);
		NodeId f_tmp_86 = this.root;
		NodeId __tmp65 = f_tmp_86;
		int f_tmp_87 = 1;
		int __tmp66 = f_tmp_87;
		PriorityQueueNode<T> f_tmp_88 = this.get_last(__tmp65, __tmp66, dummy_bit);
		PriorityQueueNode<T> __tmp67 = f_tmp_88;
		last_node = __tmp67;
		int f_tmp_89 = 1;
		int __tmp68 = f_tmp_89;
		newdummy_bit = env.inputOfAlice(Utils.fromInt(__tmp68, 2));
		int f_tmp_90 = 0;
		int __tmp69 = f_tmp_90;
		Boolean[] f_tmp_92 = env.inputOfAlice(Utils.fromInt(__tmp69, 2));
		Boolean f_tmp_91 = lib.eq(dummy_bit, f_tmp_92);
		Boolean __tmp70 = f_tmp_91;
		int f_tmp_93 = 1;
		int __tmp71 = f_tmp_93;
		NodeId f_tmp_94 = this.root;
		NodeId __tmp72 = f_tmp_94;
		Boolean[] f_tmp_95 = __tmp72.id;
		Boolean[] __tmp73 = f_tmp_95;
		Boolean[] f_tmp_97 = env.inputOfAlice(Utils.fromInt(__tmp71, 32));
		Boolean[] f_tmp_96 = lib.mux(__tmp73, f_tmp_97,__tmp70);
		Boolean[] __tmp74 = f_tmp_96;
		__tmp72.id = __tmp74;
		Boolean[] f_tmp_98 = this.size;
		Boolean[] __tmp75 = f_tmp_98;
		int f_tmp_99 = 1;
		int __tmp76 = f_tmp_99;
		Boolean[] f_tmp_101 = env.inputOfAlice(Utils.fromInt(__tmp76, 32));
		Boolean[] f_tmp_100 = lib.sub(__tmp75,f_tmp_101);
		Boolean[] __tmp77 = f_tmp_100;
		Boolean[] f_tmp_102 = this.size;
		Boolean[] __tmp78 = f_tmp_102;
		Boolean[] f_tmp_103 = lib.mux(__tmp78, __tmp77,__tmp70);
		Boolean[] __tmp79 = f_tmp_103;
		this.size = __tmp79;
		Boolean[] f_tmp_104 = this.size;
		Boolean[] __tmp80 = f_tmp_104;
		int f_tmp_105 = 0;
		int __tmp81 = f_tmp_105;
		Boolean[] f_tmp_107 = env.inputOfAlice(Utils.fromInt(__tmp81, 32));
		Boolean f_tmp_106 = lib.not(lib.leq(__tmp80, f_tmp_107));
		Boolean __tmp82 = f_tmp_106;
		Boolean f_tmp_108 = lib.and(__tmp70,__tmp82);
		Boolean __tmp83 = f_tmp_108;
		Boolean[] f_tmp_109 = this.size;
		Boolean[] __tmp84 = f_tmp_109;
		int f_tmp_110 = 0;
		int __tmp85 = f_tmp_110;
		Boolean[] f_tmp_112 = env.inputOfAlice(Utils.fromInt(__tmp85, 32));
		Boolean f_tmp_111 = lib.not(lib.leq(__tmp84, f_tmp_112));
		Boolean __tmp86 = f_tmp_111;
		int f_tmp_113 = 0;
		int __tmp87 = f_tmp_113;
		Boolean[] f_tmp_115 = env.inputOfAlice(Utils.fromInt(__tmp87, 2));
		Boolean f_tmp_114 = lib.eq(dummy_bit, f_tmp_115);
		Boolean __tmp88 = f_tmp_114;
		Boolean f_tmp_116 = lib.and(__tmp86,__tmp88);
		Boolean __tmp89 = f_tmp_116;
		Boolean f_tmp_117 = lib.and(__tmp83,__tmp89);
		Boolean __tmp90 = f_tmp_117;
		int f_tmp_118 = 0;
		int __tmp91 = f_tmp_118;
		Boolean[] f_tmp_120 = env.inputOfAlice(Utils.fromInt(__tmp91, 2));
		Boolean[] f_tmp_119 = lib.mux(newdummy_bit, f_tmp_120,__tmp90);
		Boolean[] __tmp92 = f_tmp_119;
		newdummy_bit = __tmp92;
		Boolean f_tmp_121 = lib.not(__tmp89);
		Boolean __tmp93 = f_tmp_121;
		Boolean f_tmp_122 = lib.and(__tmp83,__tmp93);
		Boolean __tmp94 = f_tmp_122;
		int f_tmp_123 = 1;
		int __tmp95 = f_tmp_123;
		Boolean[] f_tmp_125 = env.inputOfAlice(Utils.fromInt(__tmp95, 2));
		Boolean[] f_tmp_124 = lib.mux(newdummy_bit, f_tmp_125,__tmp94);
		Boolean[] __tmp96 = f_tmp_124;
		newdummy_bit = __tmp96;
		NodeId f_tmp_126 = last_node.left;
		NodeId __tmp97 = f_tmp_126;
		Boolean[] f_tmp_127 = __tmp97.pos;
		Boolean[] __tmp98 = f_tmp_127;
		NodeId f_tmp_128 = this.root;
		NodeId __tmp99 = f_tmp_128;
		Boolean[] f_tmp_129 = __tmp99.pos;
		Boolean[] __tmp100 = f_tmp_129;
		Boolean[] f_tmp_130 = lib.mux(__tmp100, __tmp98,__tmp83);
		Boolean[] __tmp101 = f_tmp_130;
		__tmp99.pos = __tmp101;
		NodeId f_tmp_131 = this.root;
		NodeId __tmp102 = f_tmp_131;
		Boolean[] f_tmp_132 = __tmp102.id;
		Boolean[] __tmp103 = f_tmp_132;
		NodeId f_tmp_133 = this.root;
		NodeId __tmp104 = f_tmp_133;
		Boolean[] f_tmp_134 = __tmp104.pos;
		Boolean[] __tmp105 = f_tmp_134;
		CircuitOram<Boolean> f_tmp_135 = this.poram;
		CircuitOram<Boolean> __tmp106 = f_tmp_135;
		PriorityQueueNode<T> f_tmp_136 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(__tmp106.conditionalReadAndRemove(__tmp103, __tmp105, __tmp83));
		PriorityQueueNode<T> __tmp107 = f_tmp_136;
		PriorityQueueNode<T> f_tmp_137 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(root_node.getBits(), __tmp107.getBits(),__tmp83));
		PriorityQueueNode<T> __tmp108 = f_tmp_137;
		root_node = __tmp108;
		KeyValue<T> f_tmp_138 = root_node.keyvalue;
		KeyValue<T> __tmp109 = f_tmp_138;
		KeyValue<T> f_tmp_139 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(ret.getBits(), __tmp109.getBits(),__tmp83));
		KeyValue<T> __tmp110 = f_tmp_139;
		ret = __tmp110;
		KeyValue<T> f_tmp_140 = last_node.keyvalue;
		KeyValue<T> __tmp111 = f_tmp_140;
		KeyValue<T> f_tmp_141 = root_node.keyvalue;
		KeyValue<T> __tmp112 = f_tmp_141;
		KeyValue<T> f_tmp_142 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp112.getBits(), __tmp111.getBits(),__tmp83));
		KeyValue<T> __tmp113 = f_tmp_142;
		root_node.keyvalue = __tmp113;
		NodeId f_tmp_143 = this.root;
		NodeId __tmp114 = f_tmp_143;
		Boolean[] f_tmp_144 = __tmp114.id;
		Boolean[] __tmp115 = f_tmp_144;
		int f_tmp_145 = 1;
		int __tmp116 = f_tmp_145;
		Boolean[] f_tmp_146 = this.heapify(__tmp115, root_node, __tmp116, newdummy_bit);
		Boolean[] __tmp117 = f_tmp_146;
		NodeId f_tmp_147 = this.root;
		NodeId __tmp118 = f_tmp_147;
		Boolean[] f_tmp_148 = __tmp118.pos;
		Boolean[] __tmp119 = f_tmp_148;
		Boolean[] f_tmp_149 = lib.mux(__tmp119, __tmp117,__tmp83);
		Boolean[] __tmp120 = f_tmp_149;
		__tmp118.pos = __tmp120;
		Boolean f_tmp_150 = lib.not(__tmp82);
		Boolean __tmp121 = f_tmp_150;
		Boolean f_tmp_151 = lib.and(__tmp70,__tmp121);
		Boolean __tmp122 = f_tmp_151;
		KeyValue<T> f_tmp_152 = last_node.keyvalue;
		KeyValue<T> __tmp123 = f_tmp_152;
		KeyValue<T> f_tmp_153 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(ret.getBits(), __tmp123.getBits(),__tmp122));
		KeyValue<T> __tmp124 = f_tmp_153;
		ret = __tmp124;
		int f_tmp_154 = 32;
		int __tmp125 = f_tmp_154;
		Boolean[] f_tmp_155 = lib.randBools(__tmp125);
		Boolean[] __tmp126 = f_tmp_155;
		NodeId f_tmp_156 = this.root;
		NodeId __tmp127 = f_tmp_156;
		Boolean[] f_tmp_157 = __tmp127.pos;
		Boolean[] __tmp128 = f_tmp_157;
		Boolean[] f_tmp_158 = lib.mux(__tmp128, __tmp126,__tmp122);
		Boolean[] __tmp129 = f_tmp_158;
		__tmp127.pos = __tmp129;
		Boolean f_tmp_159 = lib.not(__tmp70);
		Boolean __tmp130 = f_tmp_159;
		return ret;
	}
	public Boolean[] heapify(Boolean[] top_id, PriorityQueueNode<T> top_node, int level, Boolean[] dummy_bit) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] newdummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] go_left = env.inputOfAlice(Utils.fromInt(0, 2));
		Boolean[] child_iter = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] id_to_use = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] pos_to_use = env.inputOfAlice(Utils.fromInt(0, 32));
		PriorityQueueNode<T> node_to_use = new PriorityQueueNode<T>(env, lib, factoryT);
		PriorityQueueNode<T> left_node = new PriorityQueueNode<T>(env, lib, factoryT);
		PriorityQueueNode<T> right_node = new PriorityQueueNode<T>(env, lib, factoryT);
		KeyValue<T> tmp_kv = new KeyValue<T>(env, lib, factoryT);
		int f_tmp_160 = 1;
		int __tmp131 = f_tmp_160;
		newdummy_bit = env.inputOfAlice(Utils.fromInt(__tmp131, 2));
		int f_tmp_161 = 1;
		int __tmp132 = f_tmp_161;
		go_left = env.inputOfAlice(Utils.fromInt(__tmp132, 2));
		int f_tmp_162 = 10;
		int __tmp133 = f_tmp_162;
		boolean f_tmp_163 = level < __tmp133;
		boolean __tmp134 = f_tmp_163;
		if(__tmp134) {
			int f_tmp_164 = 0;
			int __tmp135 = f_tmp_164;
			Boolean[] f_tmp_166 = env.inputOfAlice(Utils.fromInt(__tmp135, 2));
			Boolean f_tmp_165 = lib.eq(dummy_bit, f_tmp_166);
			Boolean __tmp136 = f_tmp_165;
			Boolean[] f_tmp_167 = this.size;
			Boolean[] __tmp137 = f_tmp_167;
			Boolean f_tmp_168 = lib.leq(top_id, __tmp137);
			Boolean __tmp138 = f_tmp_168;
			Boolean f_tmp_169 = lib.and(__tmp136,__tmp138);
			Boolean __tmp139 = f_tmp_169;
			Boolean[] f_tmp_170 = this.size;
			Boolean[] __tmp140 = f_tmp_170;
			Boolean[] f_tmp_171 = lib.rightPublicShift(__tmp140, 1);
			Boolean[] __tmp141 = f_tmp_171;
			Boolean f_tmp_172 = lib.leq(top_id, __tmp141);
			Boolean __tmp142 = f_tmp_172;
			Boolean f_tmp_173 = lib.and(__tmp139,__tmp142);
			Boolean __tmp143 = f_tmp_173;
			NodeId f_tmp_174 = top_node.left;
			NodeId __tmp144 = f_tmp_174;
			Boolean[] f_tmp_175 = __tmp144.id;
			Boolean[] __tmp145 = f_tmp_175;
			NodeId f_tmp_176 = top_node.left;
			NodeId __tmp146 = f_tmp_176;
			Boolean[] f_tmp_177 = __tmp146.pos;
			Boolean[] __tmp147 = f_tmp_177;
			CircuitOram<Boolean> f_tmp_178 = this.poram;
			CircuitOram<Boolean> __tmp148 = f_tmp_178;
			PriorityQueueNode<T> f_tmp_179 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(__tmp148.conditionalReadAndRemove(__tmp145, __tmp147, __tmp143));
			PriorityQueueNode<T> __tmp149 = f_tmp_179;
			PriorityQueueNode<T> f_tmp_180 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(left_node.getBits(), __tmp149.getBits(),__tmp143));
			PriorityQueueNode<T> __tmp150 = f_tmp_180;
			left_node = __tmp150;
			NodeId f_tmp_181 = top_node.right;
			NodeId __tmp151 = f_tmp_181;
			Boolean[] f_tmp_182 = __tmp151.id;
			Boolean[] __tmp152 = f_tmp_182;
			NodeId f_tmp_183 = top_node.right;
			NodeId __tmp153 = f_tmp_183;
			Boolean[] f_tmp_184 = __tmp153.pos;
			Boolean[] __tmp154 = f_tmp_184;
			CircuitOram<Boolean> f_tmp_185 = this.poram;
			CircuitOram<Boolean> __tmp155 = f_tmp_185;
			PriorityQueueNode<T> f_tmp_186 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(__tmp155.conditionalReadAndRemove(__tmp152, __tmp154, __tmp143));
			PriorityQueueNode<T> __tmp156 = f_tmp_186;
			PriorityQueueNode<T> f_tmp_187 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(right_node.getBits(), __tmp156.getBits(),__tmp143));
			PriorityQueueNode<T> __tmp157 = f_tmp_187;
			right_node = __tmp157;
			KeyValue<T> f_tmp_188 = left_node.keyvalue;
			KeyValue<T> __tmp158 = f_tmp_188;
			Boolean[] f_tmp_189 = __tmp158.key;
			Boolean[] __tmp159 = f_tmp_189;
			KeyValue<T> f_tmp_190 = right_node.keyvalue;
			KeyValue<T> __tmp160 = f_tmp_190;
			Boolean[] f_tmp_191 = __tmp160.key;
			Boolean[] __tmp161 = f_tmp_191;
			Boolean f_tmp_192 = lib.not(lib.leq(__tmp159, __tmp161));
			Boolean __tmp162 = f_tmp_192;
			Boolean f_tmp_193 = lib.and(__tmp143,__tmp162);
			Boolean __tmp163 = f_tmp_193;
			KeyValue<T> f_tmp_194 = left_node.keyvalue;
			KeyValue<T> __tmp164 = f_tmp_194;
			Boolean[] f_tmp_195 = __tmp164.key;
			Boolean[] __tmp165 = f_tmp_195;
			KeyValue<T> f_tmp_196 = top_node.keyvalue;
			KeyValue<T> __tmp166 = f_tmp_196;
			Boolean[] f_tmp_197 = __tmp166.key;
			Boolean[] __tmp167 = f_tmp_197;
			Boolean f_tmp_198 = lib.not(lib.leq(__tmp165, __tmp167));
			Boolean __tmp168 = f_tmp_198;
			Boolean f_tmp_199 = lib.and(__tmp163,__tmp168);
			Boolean __tmp169 = f_tmp_199;
			KeyValue<T> f_tmp_200 = top_node.keyvalue;
			KeyValue<T> __tmp170 = f_tmp_200;
			KeyValue<T> f_tmp_201 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(tmp_kv.getBits(), __tmp170.getBits(),__tmp169));
			KeyValue<T> __tmp171 = f_tmp_201;
			tmp_kv = __tmp171;
			KeyValue<T> f_tmp_202 = left_node.keyvalue;
			KeyValue<T> __tmp172 = f_tmp_202;
			KeyValue<T> f_tmp_203 = top_node.keyvalue;
			KeyValue<T> __tmp173 = f_tmp_203;
			KeyValue<T> f_tmp_204 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp173.getBits(), __tmp172.getBits(),__tmp169));
			KeyValue<T> __tmp174 = f_tmp_204;
			top_node.keyvalue = __tmp174;
			KeyValue<T> f_tmp_205 = left_node.keyvalue;
			KeyValue<T> __tmp175 = f_tmp_205;
			KeyValue<T> f_tmp_206 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp175.getBits(), tmp_kv.getBits(),__tmp169));
			KeyValue<T> __tmp176 = f_tmp_206;
			left_node.keyvalue = __tmp176;
			int f_tmp_207 = 0;
			int __tmp177 = f_tmp_207;
			Boolean[] f_tmp_209 = env.inputOfAlice(Utils.fromInt(__tmp177, 2));
			Boolean[] f_tmp_208 = lib.mux(go_left, f_tmp_209,__tmp169);
			Boolean[] __tmp178 = f_tmp_208;
			go_left = __tmp178;
			Boolean f_tmp_210 = lib.not(__tmp168);
			Boolean __tmp179 = f_tmp_210;
			Boolean f_tmp_211 = lib.and(__tmp163,__tmp179);
			Boolean __tmp180 = f_tmp_211;
			Boolean f_tmp_212 = lib.not(__tmp162);
			Boolean __tmp181 = f_tmp_212;
			Boolean f_tmp_213 = lib.and(__tmp143,__tmp181);
			Boolean __tmp182 = f_tmp_213;
			KeyValue<T> f_tmp_214 = right_node.keyvalue;
			KeyValue<T> __tmp183 = f_tmp_214;
			Boolean[] f_tmp_215 = __tmp183.key;
			Boolean[] __tmp184 = f_tmp_215;
			KeyValue<T> f_tmp_216 = top_node.keyvalue;
			KeyValue<T> __tmp185 = f_tmp_216;
			Boolean[] f_tmp_217 = __tmp185.key;
			Boolean[] __tmp186 = f_tmp_217;
			Boolean f_tmp_218 = lib.not(lib.leq(__tmp184, __tmp186));
			Boolean __tmp187 = f_tmp_218;
			Boolean f_tmp_219 = lib.and(__tmp182,__tmp187);
			Boolean __tmp188 = f_tmp_219;
			KeyValue<T> f_tmp_220 = top_node.keyvalue;
			KeyValue<T> __tmp189 = f_tmp_220;
			KeyValue<T> f_tmp_221 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(tmp_kv.getBits(), __tmp189.getBits(),__tmp188));
			KeyValue<T> __tmp190 = f_tmp_221;
			tmp_kv = __tmp190;
			KeyValue<T> f_tmp_222 = right_node.keyvalue;
			KeyValue<T> __tmp191 = f_tmp_222;
			KeyValue<T> f_tmp_223 = top_node.keyvalue;
			KeyValue<T> __tmp192 = f_tmp_223;
			KeyValue<T> f_tmp_224 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp192.getBits(), __tmp191.getBits(),__tmp188));
			KeyValue<T> __tmp193 = f_tmp_224;
			top_node.keyvalue = __tmp193;
			KeyValue<T> f_tmp_225 = right_node.keyvalue;
			KeyValue<T> __tmp194 = f_tmp_225;
			KeyValue<T> f_tmp_226 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp194.getBits(), tmp_kv.getBits(),__tmp188));
			KeyValue<T> __tmp195 = f_tmp_226;
			right_node.keyvalue = __tmp195;
			int f_tmp_227 = 1;
			int __tmp196 = f_tmp_227;
			Boolean[] f_tmp_229 = env.inputOfAlice(Utils.fromInt(__tmp196, 2));
			Boolean[] f_tmp_228 = lib.mux(go_left, f_tmp_229,__tmp188);
			Boolean[] __tmp197 = f_tmp_228;
			go_left = __tmp197;
			Boolean f_tmp_230 = lib.not(__tmp187);
			Boolean __tmp198 = f_tmp_230;
			Boolean f_tmp_231 = lib.and(__tmp182,__tmp198);
			Boolean __tmp199 = f_tmp_231;
			int f_tmp_232 = 0;
			int __tmp200 = f_tmp_232;
			Boolean[] f_tmp_234 = env.inputOfAlice(Utils.fromInt(__tmp200, 2));
			Boolean f_tmp_233 = lib.eq(go_left, f_tmp_234);
			Boolean __tmp201 = f_tmp_233;
			Boolean f_tmp_235 = lib.and(__tmp143,__tmp201);
			Boolean __tmp202 = f_tmp_235;
			PriorityQueueNode<T> f_tmp_236 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node_to_use.getBits(), left_node.getBits(),__tmp202));
			PriorityQueueNode<T> __tmp203 = f_tmp_236;
			node_to_use = __tmp203;
			NodeId f_tmp_237 = top_node.left;
			NodeId __tmp204 = f_tmp_237;
			Boolean[] f_tmp_238 = __tmp204.id;
			Boolean[] __tmp205 = f_tmp_238;
			Boolean[] f_tmp_239 = lib.mux(id_to_use, __tmp205,__tmp202);
			Boolean[] __tmp206 = f_tmp_239;
			id_to_use = __tmp206;
			Boolean f_tmp_240 = lib.not(__tmp201);
			Boolean __tmp207 = f_tmp_240;
			Boolean f_tmp_241 = lib.and(__tmp143,__tmp207);
			Boolean __tmp208 = f_tmp_241;
			PriorityQueueNode<T> f_tmp_242 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node_to_use.getBits(), right_node.getBits(),__tmp208));
			PriorityQueueNode<T> __tmp209 = f_tmp_242;
			node_to_use = __tmp209;
			NodeId f_tmp_243 = top_node.right;
			NodeId __tmp210 = f_tmp_243;
			Boolean[] f_tmp_244 = __tmp210.id;
			Boolean[] __tmp211 = f_tmp_244;
			Boolean[] f_tmp_245 = lib.mux(id_to_use, __tmp211,__tmp208);
			Boolean[] __tmp212 = f_tmp_245;
			id_to_use = __tmp212;
			int f_tmp_246 = 0;
			int __tmp213 = f_tmp_246;
			Boolean[] f_tmp_248 = env.inputOfAlice(Utils.fromInt(__tmp213, 2));
			Boolean f_tmp_247 = lib.eq(dummy_bit, f_tmp_248);
			Boolean __tmp214 = f_tmp_247;
			Boolean[] f_tmp_249 = this.size;
			Boolean[] __tmp215 = f_tmp_249;
			Boolean[] f_tmp_250 = lib.rightPublicShift(__tmp215, 1);
			Boolean[] __tmp216 = f_tmp_250;
			Boolean f_tmp_251 = lib.leq(top_id, __tmp216);
			Boolean __tmp217 = f_tmp_251;
			Boolean f_tmp_252 = lib.and(__tmp214,__tmp217);
			Boolean __tmp218 = f_tmp_252;
			Boolean f_tmp_253 = lib.and(__tmp143,__tmp218);
			Boolean __tmp219 = f_tmp_253;
			int f_tmp_254 = 0;
			int __tmp220 = f_tmp_254;
			Boolean[] f_tmp_256 = env.inputOfAlice(Utils.fromInt(__tmp220, 2));
			Boolean[] f_tmp_255 = lib.mux(newdummy_bit, f_tmp_256,__tmp219);
			Boolean[] __tmp221 = f_tmp_255;
			newdummy_bit = __tmp221;
			Boolean f_tmp_257 = lib.not(__tmp218);
			Boolean __tmp222 = f_tmp_257;
			Boolean f_tmp_258 = lib.and(__tmp143,__tmp222);
			Boolean __tmp223 = f_tmp_258;
			int f_tmp_259 = 1;
			int __tmp224 = f_tmp_259;
			Boolean[] f_tmp_261 = env.inputOfAlice(Utils.fromInt(__tmp224, 2));
			Boolean[] f_tmp_260 = lib.mux(newdummy_bit, f_tmp_261,__tmp223);
			Boolean[] __tmp225 = f_tmp_260;
			newdummy_bit = __tmp225;
			int f_tmp_262 = 1;
			int __tmp226 = f_tmp_262;
			int f_tmp_263 = level + __tmp226;
			int __tmp227 = f_tmp_263;
			Boolean[] f_tmp_264 = this.heapify(id_to_use, node_to_use, __tmp227, newdummy_bit);
			Boolean[] __tmp228 = f_tmp_264;
			Boolean[] f_tmp_265 = lib.mux(child_iter, __tmp228,__tmp143);
			Boolean[] __tmp229 = f_tmp_265;
			child_iter = __tmp229;
			NodeId f_tmp_266 = top_node.left;
			NodeId __tmp230 = f_tmp_266;
			Boolean[] f_tmp_267 = __tmp230.id;
			Boolean[] __tmp231 = f_tmp_267;
			Boolean[] f_tmp_268 = lib.mux(id_to_use, __tmp231,__tmp143);
			Boolean[] __tmp232 = f_tmp_268;
			id_to_use = __tmp232;
			PriorityQueueNode<T> f_tmp_269 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node_to_use.getBits(), left_node.getBits(),__tmp143));
			PriorityQueueNode<T> __tmp233 = f_tmp_269;
			node_to_use = __tmp233;
			int f_tmp_270 = 0;
			int __tmp234 = f_tmp_270;
			Boolean[] f_tmp_272 = env.inputOfAlice(Utils.fromInt(__tmp234, 2));
			Boolean f_tmp_271 = lib.eq(go_left, f_tmp_272);
			Boolean __tmp235 = f_tmp_271;
			Boolean f_tmp_273 = lib.and(__tmp143,__tmp235);
			Boolean __tmp236 = f_tmp_273;
			NodeId f_tmp_274 = top_node.left;
			NodeId __tmp237 = f_tmp_274;
			Boolean[] f_tmp_275 = __tmp237.pos;
			Boolean[] __tmp238 = f_tmp_275;
			Boolean[] f_tmp_276 = lib.mux(__tmp238, child_iter,__tmp236);
			Boolean[] __tmp239 = f_tmp_276;
			__tmp237.pos = __tmp239;
			int f_tmp_277 = 32;
			int __tmp240 = f_tmp_277;
			Boolean[] f_tmp_278 = lib.randBools(__tmp240);
			Boolean[] __tmp241 = f_tmp_278;
			NodeId f_tmp_279 = top_node.right;
			NodeId __tmp242 = f_tmp_279;
			Boolean[] f_tmp_280 = __tmp242.pos;
			Boolean[] __tmp243 = f_tmp_280;
			Boolean[] f_tmp_281 = lib.mux(__tmp243, __tmp241,__tmp236);
			Boolean[] __tmp244 = f_tmp_281;
			__tmp242.pos = __tmp244;
			NodeId f_tmp_282 = top_node.right;
			NodeId __tmp245 = f_tmp_282;
			Boolean[] f_tmp_283 = __tmp245.id;
			Boolean[] __tmp246 = f_tmp_283;
			Boolean[] f_tmp_284 = lib.mux(id_to_use, __tmp246,__tmp236);
			Boolean[] __tmp247 = f_tmp_284;
			id_to_use = __tmp247;
			NodeId f_tmp_285 = top_node.right;
			NodeId __tmp248 = f_tmp_285;
			Boolean[] f_tmp_286 = __tmp248.pos;
			Boolean[] __tmp249 = f_tmp_286;
			Boolean[] f_tmp_287 = lib.mux(pos_to_use, __tmp249,__tmp236);
			Boolean[] __tmp250 = f_tmp_287;
			pos_to_use = __tmp250;
			PriorityQueueNode<T> f_tmp_288 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node_to_use.getBits(), right_node.getBits(),__tmp236));
			PriorityQueueNode<T> __tmp251 = f_tmp_288;
			node_to_use = __tmp251;
			Boolean f_tmp_289 = lib.not(__tmp235);
			Boolean __tmp252 = f_tmp_289;
			Boolean f_tmp_290 = lib.and(__tmp143,__tmp252);
			Boolean __tmp253 = f_tmp_290;
			NodeId f_tmp_291 = top_node.right;
			NodeId __tmp254 = f_tmp_291;
			Boolean[] f_tmp_292 = __tmp254.pos;
			Boolean[] __tmp255 = f_tmp_292;
			Boolean[] f_tmp_293 = lib.mux(__tmp255, child_iter,__tmp253);
			Boolean[] __tmp256 = f_tmp_293;
			__tmp254.pos = __tmp256;
			int f_tmp_294 = 32;
			int __tmp257 = f_tmp_294;
			Boolean[] f_tmp_295 = lib.randBools(__tmp257);
			Boolean[] __tmp258 = f_tmp_295;
			NodeId f_tmp_296 = top_node.left;
			NodeId __tmp259 = f_tmp_296;
			Boolean[] f_tmp_297 = __tmp259.pos;
			Boolean[] __tmp260 = f_tmp_297;
			Boolean[] f_tmp_298 = lib.mux(__tmp260, __tmp258,__tmp253);
			Boolean[] __tmp261 = f_tmp_298;
			__tmp259.pos = __tmp261;
			NodeId f_tmp_299 = top_node.left;
			NodeId __tmp262 = f_tmp_299;
			Boolean[] f_tmp_300 = __tmp262.pos;
			Boolean[] __tmp263 = f_tmp_300;
			Boolean[] f_tmp_301 = lib.mux(pos_to_use, __tmp263,__tmp253);
			Boolean[] __tmp264 = f_tmp_301;
			pos_to_use = __tmp264;
			CircuitOram<Boolean> f_tmp_302 = this.poram;
			CircuitOram<Boolean> __tmp265 = f_tmp_302;
			__tmp265.conditionalPutBack(id_to_use, pos_to_use, node_to_use.getBits(), __tmp143);
			Boolean f_tmp_304 = lib.not(__tmp142);
			Boolean __tmp267 = f_tmp_304;
			Boolean f_tmp_305 = lib.and(__tmp139,__tmp267);
			Boolean __tmp268 = f_tmp_305;
			Boolean[] f_tmp_306 = this.size;
			Boolean[] __tmp269 = f_tmp_306;
			Boolean f_tmp_307 = lib.leq(top_id, __tmp269);
			Boolean __tmp270 = f_tmp_307;
			Boolean f_tmp_308 = lib.and(__tmp139,__tmp270);
			Boolean __tmp271 = f_tmp_308;
			int f_tmp_309 = 32;
			int __tmp272 = f_tmp_309;
			Boolean[] f_tmp_310 = lib.randBools(__tmp272);
			Boolean[] __tmp273 = f_tmp_310;
			Boolean[] f_tmp_311 = lib.mux(ret, __tmp273,__tmp271);
			Boolean[] __tmp274 = f_tmp_311;
			ret = __tmp274;
			CircuitOram<Boolean> f_tmp_312 = this.poram;
			CircuitOram<Boolean> __tmp275 = f_tmp_312;
			__tmp275.conditionalPutBack(top_id, ret, top_node.getBits(), __tmp271);
			Boolean f_tmp_314 = lib.not(__tmp270);
			Boolean __tmp277 = f_tmp_314;
			Boolean f_tmp_315 = lib.and(__tmp139,__tmp277);
			Boolean __tmp278 = f_tmp_315;
			Boolean f_tmp_316 = lib.not(__tmp139);
			Boolean __tmp279 = f_tmp_316;
		} else {
		}
		return ret;
	}
	public PriorityQueueNode<T> get_last(NodeId top, int level, Boolean[] dummy_bit) throws Exception {
		PriorityQueueNode<T> ret = new PriorityQueueNode<T>(env, lib, factoryT);
		Boolean[] newdummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		PriorityQueueNode<T> node = new PriorityQueueNode<T>(env, lib, factoryT);
		PriorityQueueNode<T> child = new PriorityQueueNode<T>(env, lib, factoryT);
		Boolean[] go_left = env.inputOfAlice(Utils.fromInt(0, 2));
		NodeId next = new NodeId(env, lib);
		int f_tmp_317 = 1;
		int __tmp280 = f_tmp_317;
		newdummy_bit = env.inputOfAlice(Utils.fromInt(__tmp280, 2));
		int f_tmp_318 = 10;
		int __tmp281 = f_tmp_318;
		boolean f_tmp_319 = level < __tmp281;
		boolean __tmp282 = f_tmp_319;
		if(__tmp282) {
			int f_tmp_320 = 0;
			int __tmp283 = f_tmp_320;
			Boolean[] f_tmp_322 = env.inputOfAlice(Utils.fromInt(__tmp283, 2));
			Boolean f_tmp_321 = lib.eq(dummy_bit, f_tmp_322);
			Boolean __tmp284 = f_tmp_321;
			Boolean[] f_tmp_323 = top.id;
			Boolean[] __tmp285 = f_tmp_323;
			Boolean[] f_tmp_324 = this.size;
			Boolean[] __tmp286 = f_tmp_324;
			Boolean f_tmp_325 = lib.leq(__tmp285, __tmp286);
			Boolean __tmp287 = f_tmp_325;
			Boolean f_tmp_326 = lib.and(__tmp284,__tmp287);
			Boolean __tmp288 = f_tmp_326;
			Boolean[] f_tmp_327 = top.id;
			Boolean[] __tmp289 = f_tmp_327;
			Boolean[] f_tmp_328 = top.pos;
			Boolean[] __tmp290 = f_tmp_328;
			CircuitOram<Boolean> f_tmp_329 = this.poram;
			CircuitOram<Boolean> __tmp291 = f_tmp_329;
			PriorityQueueNode<T> f_tmp_330 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(__tmp291.conditionalReadAndRemove(__tmp289, __tmp290, __tmp288));
			PriorityQueueNode<T> __tmp292 = f_tmp_330;
			PriorityQueueNode<T> f_tmp_331 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node.getBits(), __tmp292.getBits(),__tmp288));
			PriorityQueueNode<T> __tmp293 = f_tmp_331;
			node = __tmp293;
			Boolean[] f_tmp_332 = top.id;
			Boolean[] __tmp294 = f_tmp_332;
			Boolean[] f_tmp_333 = this.size;
			Boolean[] __tmp295 = f_tmp_333;
			Boolean f_tmp_334 = lib.eq(__tmp294, __tmp295);
			Boolean __tmp296 = f_tmp_334;
			Boolean f_tmp_335 = lib.and(__tmp288,__tmp296);
			Boolean __tmp297 = f_tmp_335;
			PriorityQueueNode<T> f_tmp_336 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(ret.getBits(), node.getBits(),__tmp297));
			PriorityQueueNode<T> __tmp298 = f_tmp_336;
			ret = __tmp298;
			Boolean f_tmp_337 = lib.not(__tmp296);
			Boolean __tmp299 = f_tmp_337;
			Boolean f_tmp_338 = lib.and(__tmp288,__tmp299);
			Boolean __tmp300 = f_tmp_338;
			Boolean[] f_tmp_339 = this.size;
			Boolean[] __tmp301 = f_tmp_339;
			Boolean[] f_tmp_340 = this.should_go_left(__tmp301, level);
			Boolean[] __tmp302 = f_tmp_340;
			Boolean[] f_tmp_341 = lib.mux(go_left, __tmp302,__tmp300);
			Boolean[] __tmp303 = f_tmp_341;
			go_left = __tmp303;
			NodeId f_tmp_342 = node.right;
			NodeId __tmp304 = f_tmp_342;
			NodeId f_tmp_343 = new NodeId(env, lib).newObj(lib.mux(next.getBits(), __tmp304.getBits(),__tmp300));
			NodeId __tmp305 = f_tmp_343;
			next = __tmp305;
			int f_tmp_344 = 0;
			int __tmp306 = f_tmp_344;
			Boolean[] f_tmp_346 = env.inputOfAlice(Utils.fromInt(__tmp306, 2));
			Boolean f_tmp_345 = lib.eq(go_left, f_tmp_346);
			Boolean __tmp307 = f_tmp_345;
			Boolean f_tmp_347 = lib.and(__tmp300,__tmp307);
			Boolean __tmp308 = f_tmp_347;
			NodeId f_tmp_348 = node.left;
			NodeId __tmp309 = f_tmp_348;
			NodeId f_tmp_349 = new NodeId(env, lib).newObj(lib.mux(next.getBits(), __tmp309.getBits(),__tmp308));
			NodeId __tmp310 = f_tmp_349;
			next = __tmp310;
			Boolean f_tmp_350 = lib.not(__tmp307);
			Boolean __tmp311 = f_tmp_350;
			Boolean f_tmp_351 = lib.and(__tmp300,__tmp311);
			Boolean __tmp312 = f_tmp_351;
			int f_tmp_352 = 0;
			int __tmp313 = f_tmp_352;
			Boolean[] f_tmp_354 = env.inputOfAlice(Utils.fromInt(__tmp313, 2));
			Boolean f_tmp_353 = lib.eq(dummy_bit, f_tmp_354);
			Boolean __tmp314 = f_tmp_353;
			Boolean[] f_tmp_355 = top.id;
			Boolean[] __tmp315 = f_tmp_355;
			Boolean[] f_tmp_356 = this.size;
			Boolean[] __tmp316 = f_tmp_356;
			Boolean f_tmp_357 = lib.not(lib.geq(__tmp315, __tmp316));
			Boolean __tmp317 = f_tmp_357;
			Boolean f_tmp_358 = lib.and(__tmp314,__tmp317);
			Boolean __tmp318 = f_tmp_358;
			Boolean f_tmp_359 = lib.and(__tmp300,__tmp318);
			Boolean __tmp319 = f_tmp_359;
			int f_tmp_360 = 0;
			int __tmp320 = f_tmp_360;
			Boolean[] f_tmp_362 = env.inputOfAlice(Utils.fromInt(__tmp320, 2));
			Boolean[] f_tmp_361 = lib.mux(newdummy_bit, f_tmp_362,__tmp319);
			Boolean[] __tmp321 = f_tmp_361;
			newdummy_bit = __tmp321;
			Boolean f_tmp_363 = lib.not(__tmp318);
			Boolean __tmp322 = f_tmp_363;
			Boolean f_tmp_364 = lib.and(__tmp300,__tmp322);
			Boolean __tmp323 = f_tmp_364;
			int f_tmp_365 = 1;
			int __tmp324 = f_tmp_365;
			Boolean[] f_tmp_367 = env.inputOfAlice(Utils.fromInt(__tmp324, 2));
			Boolean[] f_tmp_366 = lib.mux(newdummy_bit, f_tmp_367,__tmp323);
			Boolean[] __tmp325 = f_tmp_366;
			newdummy_bit = __tmp325;
			int f_tmp_368 = 1;
			int __tmp326 = f_tmp_368;
			int f_tmp_369 = level + __tmp326;
			int __tmp327 = f_tmp_369;
			PriorityQueueNode<T> f_tmp_370 = this.get_last(next, __tmp327, newdummy_bit);
			PriorityQueueNode<T> __tmp328 = f_tmp_370;
			PriorityQueueNode<T> f_tmp_371 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(child.getBits(), __tmp328.getBits(),__tmp300));
			PriorityQueueNode<T> __tmp329 = f_tmp_371;
			child = __tmp329;
			int f_tmp_372 = 0;
			int __tmp330 = f_tmp_372;
			Boolean[] f_tmp_374 = env.inputOfAlice(Utils.fromInt(__tmp330, 2));
			Boolean f_tmp_373 = lib.eq(go_left, f_tmp_374);
			Boolean __tmp331 = f_tmp_373;
			Boolean f_tmp_375 = lib.and(__tmp300,__tmp331);
			Boolean __tmp332 = f_tmp_375;
			NodeId f_tmp_376 = child.left;
			NodeId __tmp333 = f_tmp_376;
			Boolean[] f_tmp_377 = __tmp333.pos;
			Boolean[] __tmp334 = f_tmp_377;
			NodeId f_tmp_378 = node.left;
			NodeId __tmp335 = f_tmp_378;
			Boolean[] f_tmp_379 = __tmp335.pos;
			Boolean[] __tmp336 = f_tmp_379;
			Boolean[] f_tmp_380 = lib.mux(__tmp336, __tmp334,__tmp332);
			Boolean[] __tmp337 = f_tmp_380;
			__tmp335.pos = __tmp337;
			Boolean f_tmp_381 = lib.not(__tmp331);
			Boolean __tmp338 = f_tmp_381;
			Boolean f_tmp_382 = lib.and(__tmp300,__tmp338);
			Boolean __tmp339 = f_tmp_382;
			NodeId f_tmp_383 = child.left;
			NodeId __tmp340 = f_tmp_383;
			Boolean[] f_tmp_384 = __tmp340.pos;
			Boolean[] __tmp341 = f_tmp_384;
			NodeId f_tmp_385 = node.right;
			NodeId __tmp342 = f_tmp_385;
			Boolean[] f_tmp_386 = __tmp342.pos;
			Boolean[] __tmp343 = f_tmp_386;
			Boolean[] f_tmp_387 = lib.mux(__tmp343, __tmp341,__tmp339);
			Boolean[] __tmp344 = f_tmp_387;
			__tmp342.pos = __tmp344;
			int f_tmp_388 = 32;
			int __tmp345 = f_tmp_388;
			Boolean[] f_tmp_389 = lib.randBools(__tmp345);
			Boolean[] __tmp346 = f_tmp_389;
			Boolean[] f_tmp_390 = top.pos;
			Boolean[] __tmp347 = f_tmp_390;
			Boolean[] f_tmp_391 = lib.mux(__tmp347, __tmp346,__tmp300);
			Boolean[] __tmp348 = f_tmp_391;
			top.pos = __tmp348;
			Boolean[] f_tmp_392 = top.id;
			Boolean[] __tmp349 = f_tmp_392;
			Boolean[] f_tmp_393 = top.pos;
			Boolean[] __tmp350 = f_tmp_393;
			CircuitOram<Boolean> f_tmp_394 = this.poram;
			CircuitOram<Boolean> __tmp351 = f_tmp_394;
			__tmp351.conditionalPutBack(__tmp349, __tmp350, node.getBits(), __tmp300);
			Boolean[] f_tmp_396 = top.pos;
			Boolean[] __tmp353 = f_tmp_396;
			NodeId f_tmp_397 = child.left;
			NodeId __tmp354 = f_tmp_397;
			Boolean[] f_tmp_398 = __tmp354.pos;
			Boolean[] __tmp355 = f_tmp_398;
			Boolean[] f_tmp_399 = lib.mux(__tmp355, __tmp353,__tmp300);
			Boolean[] __tmp356 = f_tmp_399;
			__tmp354.pos = __tmp356;
			PriorityQueueNode<T> f_tmp_400 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(ret.getBits(), child.getBits(),__tmp300));
			PriorityQueueNode<T> __tmp357 = f_tmp_400;
			ret = __tmp357;
			Boolean f_tmp_401 = lib.not(__tmp288);
			Boolean __tmp358 = f_tmp_401;
		} else {
		}
		return ret;
	}
	public void insert(KeyValue<T> kv, Boolean[] dummy_bit) throws Exception {
		KeyValue<T> parent_kv = new KeyValue<T>(env, lib, factoryT);
		int f_tmp_402 = 1000;
		int __tmp359 = f_tmp_402;
		Boolean[] f_tmp_403 = env.inputOfAlice(Utils.fromInt(__tmp359, 32));
		parent_kv.key = f_tmp_403;
		int f_tmp_404 = 0;
		int __tmp360 = f_tmp_404;
		Boolean[] f_tmp_406 = env.inputOfAlice(Utils.fromInt(__tmp360, 2));
		Boolean f_tmp_405 = lib.eq(dummy_bit, f_tmp_406);
		Boolean __tmp361 = f_tmp_405;
		Boolean[] f_tmp_407 = this.size;
		Boolean[] __tmp362 = f_tmp_407;
		int f_tmp_408 = 1;
		int __tmp363 = f_tmp_408;
		Boolean[] f_tmp_410 = env.inputOfAlice(Utils.fromInt(__tmp363, 32));
		Boolean[] f_tmp_409 = lib.add(__tmp362,f_tmp_410);
		Boolean[] __tmp364 = f_tmp_409;
		Boolean[] f_tmp_411 = this.size;
		Boolean[] __tmp365 = f_tmp_411;
		Boolean[] f_tmp_412 = lib.mux(__tmp365, __tmp364,__tmp361);
		Boolean[] __tmp366 = f_tmp_412;
		this.size = __tmp366;
		NodeId f_tmp_413 = this.root;
		NodeId __tmp367 = f_tmp_413;
		Boolean[] f_tmp_414 = __tmp367.id;
		Boolean[] __tmp368 = f_tmp_414;
		NodeId f_tmp_415 = this.root;
		NodeId __tmp369 = f_tmp_415;
		Boolean[] f_tmp_416 = __tmp369.pos;
		Boolean[] __tmp370 = f_tmp_416;
		int f_tmp_417 = 1;
		int __tmp371 = f_tmp_417;
		Boolean[] f_tmp_418 = this.insert_internal(kv, parent_kv, __tmp368, __tmp370, __tmp371, dummy_bit);
		Boolean[] __tmp372 = f_tmp_418;
		NodeId f_tmp_419 = this.root;
		NodeId __tmp373 = f_tmp_419;
		Boolean[] f_tmp_420 = __tmp373.pos;
		Boolean[] __tmp374 = f_tmp_420;
		Boolean[] f_tmp_421 = lib.mux(__tmp374, __tmp372,__tmp361);
		Boolean[] __tmp375 = f_tmp_421;
		__tmp373.pos = __tmp375;
		Boolean f_tmp_422 = lib.not(__tmp361);
		Boolean __tmp376 = f_tmp_422;

	}
	public Boolean[] insert_internal(KeyValue<T> kv, KeyValue<T> parent_kv, Boolean[] iter_id, Boolean[] iter_pos, int level, Boolean[] dummy_bit) throws Exception {
		Boolean[] ret = env.inputOfAlice(Utils.fromInt(0, 32));
		Boolean[] newdummy_bit = env.inputOfAlice(Utils.fromInt(0, 2));
		PriorityQueueNode<T> node = new PriorityQueueNode<T>(env, lib, factoryT);
		Boolean[] go_left = env.inputOfAlice(Utils.fromInt(0, 2));
		NodeId next = new NodeId(env, lib);
		Boolean[] newId = env.inputOfAlice(Utils.fromInt(0, 32));
		int f_tmp_423 = 1;
		int __tmp377 = f_tmp_423;
		newdummy_bit = env.inputOfAlice(Utils.fromInt(__tmp377, 2));
		int f_tmp_424 = 10;
		int __tmp378 = f_tmp_424;
		boolean f_tmp_425 = level < __tmp378;
		boolean __tmp379 = f_tmp_425;
		if(__tmp379) {
			int f_tmp_426 = 0;
			int __tmp380 = f_tmp_426;
			Boolean[] f_tmp_428 = env.inputOfAlice(Utils.fromInt(__tmp380, 2));
			Boolean f_tmp_427 = lib.eq(dummy_bit, f_tmp_428);
			Boolean __tmp381 = f_tmp_427;
			Boolean[] f_tmp_429 = this.size;
			Boolean[] __tmp382 = f_tmp_429;
			Boolean f_tmp_430 = lib.leq(iter_id, __tmp382);
			Boolean __tmp383 = f_tmp_430;
			Boolean f_tmp_431 = lib.and(__tmp381,__tmp383);
			Boolean __tmp384 = f_tmp_431;
			Boolean[] f_tmp_432 = this.size;
			Boolean[] __tmp385 = f_tmp_432;
			Boolean f_tmp_433 = lib.eq(iter_id, __tmp385);
			Boolean __tmp386 = f_tmp_433;
			Boolean f_tmp_434 = lib.and(__tmp384,__tmp386);
			Boolean __tmp387 = f_tmp_434;
			KeyValue<T> f_tmp_435 = node.keyvalue;
			KeyValue<T> __tmp388 = f_tmp_435;
			KeyValue<T> f_tmp_436 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp388.getBits(), kv.getBits(),__tmp387));
			KeyValue<T> __tmp389 = f_tmp_436;
			node.keyvalue = __tmp389;
			Boolean[] f_tmp_437 = parent_kv.key;
			Boolean[] __tmp390 = f_tmp_437;
			Boolean[] f_tmp_438 = kv.key;
			Boolean[] __tmp391 = f_tmp_438;
			Boolean f_tmp_439 = lib.not(lib.geq(__tmp390, __tmp391));
			Boolean __tmp392 = f_tmp_439;
			Boolean f_tmp_440 = lib.and(__tmp387,__tmp392);
			Boolean __tmp393 = f_tmp_440;
			KeyValue<T> f_tmp_441 = node.keyvalue;
			KeyValue<T> __tmp394 = f_tmp_441;
			KeyValue<T> f_tmp_442 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp394.getBits(), parent_kv.getBits(),__tmp393));
			KeyValue<T> __tmp395 = f_tmp_442;
			node.keyvalue = __tmp395;
			Boolean f_tmp_443 = lib.not(__tmp392);
			Boolean __tmp396 = f_tmp_443;
			Boolean f_tmp_444 = lib.and(__tmp387,__tmp396);
			Boolean __tmp397 = f_tmp_444;
			Boolean f_tmp_445 = lib.not(__tmp386);
			Boolean __tmp398 = f_tmp_445;
			Boolean f_tmp_446 = lib.and(__tmp384,__tmp398);
			Boolean __tmp399 = f_tmp_446;
			CircuitOram<Boolean> f_tmp_447 = this.poram;
			CircuitOram<Boolean> __tmp400 = f_tmp_447;
			PriorityQueueNode<T> f_tmp_448 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(__tmp400.conditionalReadAndRemove(iter_id, iter_pos, __tmp399));
			PriorityQueueNode<T> __tmp401 = f_tmp_448;
			PriorityQueueNode<T> f_tmp_449 = new PriorityQueueNode<T>(env, lib, factoryT).newObj(lib.mux(node.getBits(), __tmp401.getBits(),__tmp399));
			PriorityQueueNode<T> __tmp402 = f_tmp_449;
			node = __tmp402;
			Boolean[] f_tmp_450 = this.size;
			Boolean[] __tmp403 = f_tmp_450;
			Boolean[] f_tmp_451 = this.should_go_left(__tmp403, level);
			Boolean[] __tmp404 = f_tmp_451;
			Boolean[] f_tmp_452 = lib.mux(go_left, __tmp404,__tmp399);
			Boolean[] __tmp405 = f_tmp_452;
			go_left = __tmp405;
			NodeId f_tmp_453 = node.right;
			NodeId __tmp406 = f_tmp_453;
			NodeId f_tmp_454 = new NodeId(env, lib).newObj(lib.mux(next.getBits(), __tmp406.getBits(),__tmp399));
			NodeId __tmp407 = f_tmp_454;
			next = __tmp407;
			int f_tmp_455 = 0;
			int __tmp408 = f_tmp_455;
			Boolean[] f_tmp_457 = env.inputOfAlice(Utils.fromInt(__tmp408, 2));
			Boolean f_tmp_456 = lib.eq(go_left, f_tmp_457);
			Boolean __tmp409 = f_tmp_456;
			Boolean f_tmp_458 = lib.and(__tmp399,__tmp409);
			Boolean __tmp410 = f_tmp_458;
			NodeId f_tmp_459 = node.left;
			NodeId __tmp411 = f_tmp_459;
			NodeId f_tmp_460 = new NodeId(env, lib).newObj(lib.mux(next.getBits(), __tmp411.getBits(),__tmp410));
			NodeId __tmp412 = f_tmp_460;
			next = __tmp412;
			Boolean f_tmp_461 = lib.not(__tmp409);
			Boolean __tmp413 = f_tmp_461;
			Boolean f_tmp_462 = lib.and(__tmp399,__tmp413);
			Boolean __tmp414 = f_tmp_462;
			int f_tmp_463 = 0;
			int __tmp415 = f_tmp_463;
			Boolean[] f_tmp_465 = env.inputOfAlice(Utils.fromInt(__tmp415, 2));
			Boolean f_tmp_464 = lib.eq(dummy_bit, f_tmp_465);
			Boolean __tmp416 = f_tmp_464;
			Boolean[] f_tmp_466 = this.size;
			Boolean[] __tmp417 = f_tmp_466;
			Boolean f_tmp_467 = lib.not(lib.geq(iter_id, __tmp417));
			Boolean __tmp418 = f_tmp_467;
			Boolean f_tmp_468 = lib.and(__tmp416,__tmp418);
			Boolean __tmp419 = f_tmp_468;
			Boolean f_tmp_469 = lib.and(__tmp399,__tmp419);
			Boolean __tmp420 = f_tmp_469;
			int f_tmp_470 = 0;
			int __tmp421 = f_tmp_470;
			Boolean[] f_tmp_472 = env.inputOfAlice(Utils.fromInt(__tmp421, 2));
			Boolean[] f_tmp_471 = lib.mux(newdummy_bit, f_tmp_472,__tmp420);
			Boolean[] __tmp422 = f_tmp_471;
			newdummy_bit = __tmp422;
			Boolean f_tmp_473 = lib.not(__tmp419);
			Boolean __tmp423 = f_tmp_473;
			Boolean f_tmp_474 = lib.and(__tmp399,__tmp423);
			Boolean __tmp424 = f_tmp_474;
			int f_tmp_475 = 1;
			int __tmp425 = f_tmp_475;
			Boolean[] f_tmp_477 = env.inputOfAlice(Utils.fromInt(__tmp425, 2));
			Boolean[] f_tmp_476 = lib.mux(newdummy_bit, f_tmp_477,__tmp424);
			Boolean[] __tmp426 = f_tmp_476;
			newdummy_bit = __tmp426;
			KeyValue<T> f_tmp_478 = node.keyvalue;
			KeyValue<T> __tmp427 = f_tmp_478;
			Boolean[] f_tmp_479 = next.id;
			Boolean[] __tmp428 = f_tmp_479;
			Boolean[] f_tmp_480 = next.pos;
			Boolean[] __tmp429 = f_tmp_480;
			int f_tmp_481 = 1;
			int __tmp430 = f_tmp_481;
			int f_tmp_482 = level + __tmp430;
			int __tmp431 = f_tmp_482;
			Boolean[] f_tmp_483 = this.insert_internal(kv, __tmp427, __tmp428, __tmp429, __tmp431, newdummy_bit);
			Boolean[] __tmp432 = f_tmp_483;
			Boolean[] f_tmp_484 = lib.mux(newId, __tmp432,__tmp399);
			Boolean[] __tmp433 = f_tmp_484;
			newId = __tmp433;
			KeyValue<T> f_tmp_485 = node.keyvalue;
			KeyValue<T> __tmp434 = f_tmp_485;
			Boolean[] f_tmp_486 = __tmp434.key;
			Boolean[] __tmp435 = f_tmp_486;
			Boolean[] f_tmp_487 = kv.key;
			Boolean[] __tmp436 = f_tmp_487;
			Boolean f_tmp_488 = lib.not(lib.geq(__tmp435, __tmp436));
			Boolean __tmp437 = f_tmp_488;
			Boolean f_tmp_489 = lib.and(__tmp399,__tmp437);
			Boolean __tmp438 = f_tmp_489;
			KeyValue<T> f_tmp_490 = node.keyvalue;
			KeyValue<T> __tmp439 = f_tmp_490;
			KeyValue<T> f_tmp_491 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp439.getBits(), kv.getBits(),__tmp438));
			KeyValue<T> __tmp440 = f_tmp_491;
			node.keyvalue = __tmp440;
			Boolean[] f_tmp_492 = kv.key;
			Boolean[] __tmp441 = f_tmp_492;
			Boolean[] f_tmp_493 = parent_kv.key;
			Boolean[] __tmp442 = f_tmp_493;
			Boolean f_tmp_494 = lib.not(lib.leq(__tmp441, __tmp442));
			Boolean __tmp443 = f_tmp_494;
			Boolean f_tmp_495 = lib.and(__tmp438,__tmp443);
			Boolean __tmp444 = f_tmp_495;
			KeyValue<T> f_tmp_496 = node.keyvalue;
			KeyValue<T> __tmp445 = f_tmp_496;
			KeyValue<T> f_tmp_497 = new KeyValue<T>(env, lib, factoryT).newObj(lib.mux(__tmp445.getBits(), parent_kv.getBits(),__tmp444));
			KeyValue<T> __tmp446 = f_tmp_497;
			node.keyvalue = __tmp446;
			Boolean f_tmp_498 = lib.not(__tmp443);
			Boolean __tmp447 = f_tmp_498;
			Boolean f_tmp_499 = lib.and(__tmp438,__tmp447);
			Boolean __tmp448 = f_tmp_499;
			Boolean f_tmp_500 = lib.not(__tmp437);
			Boolean __tmp449 = f_tmp_500;
			Boolean f_tmp_501 = lib.and(__tmp399,__tmp449);
			Boolean __tmp450 = f_tmp_501;
			int f_tmp_502 = 0;
			int __tmp451 = f_tmp_502;
			Boolean[] f_tmp_504 = env.inputOfAlice(Utils.fromInt(__tmp451, 2));
			Boolean f_tmp_503 = lib.eq(go_left, f_tmp_504);
			Boolean __tmp452 = f_tmp_503;
			Boolean f_tmp_505 = lib.and(__tmp399,__tmp452);
			Boolean __tmp453 = f_tmp_505;
			NodeId f_tmp_506 = node.left;
			NodeId __tmp454 = f_tmp_506;
			Boolean[] f_tmp_507 = __tmp454.pos;
			Boolean[] __tmp455 = f_tmp_507;
			Boolean[] f_tmp_508 = lib.mux(__tmp455, newId,__tmp453);
			Boolean[] __tmp456 = f_tmp_508;
			__tmp454.pos = __tmp456;
			Boolean f_tmp_509 = lib.not(__tmp452);
			Boolean __tmp457 = f_tmp_509;
			Boolean f_tmp_510 = lib.and(__tmp399,__tmp457);
			Boolean __tmp458 = f_tmp_510;
			NodeId f_tmp_511 = node.right;
			NodeId __tmp459 = f_tmp_511;
			Boolean[] f_tmp_512 = __tmp459.pos;
			Boolean[] __tmp460 = f_tmp_512;
			Boolean[] f_tmp_513 = lib.mux(__tmp460, newId,__tmp458);
			Boolean[] __tmp461 = f_tmp_513;
			__tmp459.pos = __tmp461;
			Boolean[] f_tmp_514 = lib.leftPublicShift(iter_id, 1);
			Boolean[] __tmp462 = f_tmp_514;
			NodeId f_tmp_515 = node.left;
			NodeId __tmp463 = f_tmp_515;
			Boolean[] f_tmp_516 = __tmp463.id;
			Boolean[] __tmp464 = f_tmp_516;
			Boolean[] f_tmp_517 = lib.mux(__tmp464, __tmp462,__tmp384);
			Boolean[] __tmp465 = f_tmp_517;
			__tmp463.id = __tmp465;
			NodeId f_tmp_518 = node.left;
			NodeId __tmp466 = f_tmp_518;
			Boolean[] f_tmp_519 = __tmp466.id;
			Boolean[] __tmp467 = f_tmp_519;
			int f_tmp_520 = 1;
			int __tmp468 = f_tmp_520;
			Boolean[] f_tmp_522 = env.inputOfAlice(Utils.fromInt(__tmp468, 32));
			Boolean[] f_tmp_521 = lib.add(__tmp467,f_tmp_522);
			Boolean[] __tmp469 = f_tmp_521;
			NodeId f_tmp_523 = node.right;
			NodeId __tmp470 = f_tmp_523;
			Boolean[] f_tmp_524 = __tmp470.id;
			Boolean[] __tmp471 = f_tmp_524;
			Boolean[] f_tmp_525 = lib.mux(__tmp471, __tmp469,__tmp384);
			Boolean[] __tmp472 = f_tmp_525;
			__tmp470.id = __tmp472;
			int f_tmp_526 = 32;
			int __tmp473 = f_tmp_526;
			Boolean[] f_tmp_527 = lib.randBools(__tmp473);
			Boolean[] __tmp474 = f_tmp_527;
			Boolean[] f_tmp_528 = lib.mux(ret, __tmp474,__tmp384);
			Boolean[] __tmp475 = f_tmp_528;
			ret = __tmp475;
			CircuitOram<Boolean> f_tmp_529 = this.poram;
			CircuitOram<Boolean> __tmp476 = f_tmp_529;
			__tmp476.conditionalPutBack(iter_id, ret, node.getBits(), __tmp384);
			Boolean f_tmp_531 = lib.not(__tmp384);
			Boolean __tmp478 = f_tmp_531;
		} else {
		}
		return ret;
	}
}
