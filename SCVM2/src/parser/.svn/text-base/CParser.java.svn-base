/* Generated By:JavaCC: Do not edit this line. CParser.java */
package parser;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import util.Pair;
import ast.ASTFunction;
import ast.ASTFunctionDef;
import ast.ASTFunctionNative;
import ast.ASTProgram;
import ast.expr.ASTAndPredicate;
import ast.expr.ASTArrayExpression;
import ast.expr.ASTBinaryExpression;
import ast.expr.ASTBinaryExpression.BOP;
import ast.expr.ASTBinaryPredicate;
import ast.expr.ASTBinaryPredicate.REL_OP;
import ast.expr.ASTConstantExpression;
import ast.expr.ASTExpression;
import ast.expr.ASTFloatConstantExpression;
import ast.expr.ASTFuncExpression;
import ast.expr.ASTLogExpression;
import ast.expr.ASTOrPredicate;
import ast.expr.ASTPredicate;
import ast.expr.ASTRangeExpression;
import ast.expr.ASTRecExpression;
import ast.expr.ASTRecTupleExpression;
import ast.expr.ASTTupleExpression;
import ast.expr.ASTVariableExpression;
import ast.stmt.ASTAssignStatement;
import ast.stmt.ASTFuncStatement;
import ast.stmt.ASTIfStatement;
import ast.stmt.ASTReturnStatement;
import ast.stmt.ASTStatement;
import ast.stmt.ASTWhileStatement;
import ast.type.ASTArrayType;
import ast.type.ASTFloatType;
import ast.type.ASTFunctionType;
import ast.type.ASTIntType;
import ast.type.ASTLabel;
import ast.type.ASTNativeType;
import ast.type.ASTRecType;
import ast.type.ASTRndType;
import ast.type.ASTType;
import ast.type.ASTVariableType;
import ast.type.ASTVoidType;
public class CParser implements CParserConstants {
    ASTType __type__;
    Map<String, ASTExpression> def = new HashMap<String, ASTExpression>();
    ASTProgram program;

        public static ASTProgram parse(String filename) {
                CParser parser = null;
                try {
                        parser = new CParser(new java.io.FileInputStream(filename));
                        parser.program = new ASTProgram();
                        return parser.TranslationUnit();
                }
                catch(java.io.FileNotFoundException e) {
                        System.out.println("Error:  File " + filename + " not found.");
                        return null;
                } catch (ParseException e) {
                        System.out.println("Error: Parsing Error " + e.getMessage());
                        return null;
                }
        }

  final public ASTExpression RangeAtomicExpression() throws ParseException {
        ASTExpression e;
        Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      e = ConstantExpression();
                                   {if (true) return e;}
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2)) {
        jj_consume_token(42);
        e = RangeExpression();
        jj_consume_token(43);
                                                       {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          tok = jj_consume_token(IDENTIFIER);
                               {if (true) return new ASTVariableExpression(tok.image);}
          break;
        case LOG:
          jj_consume_token(LOG);
          jj_consume_token(42);
          e = RangeExpression();
          jj_consume_token(43);
                                                {if (true) return new ASTLogExpression(e);}
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression AtomicExpression() throws ParseException {
        ASTExpression e, idx, par, bit, rangel, ranger;
        Token v;
        List<ASTType> var;
        List<ASTExpression> bits;
        ASTRecType rt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
      e = ConstantExpression();
                                   {if (true) return e;}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_6(2)) {
        jj_consume_token(42);
        e = BIExpression();
        jj_consume_token(43);
                                                    {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOG:
        case IDENTIFIER:
          e = VariableExpression();
                                     var = null; bits = null;
          label_1:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 42:
            case 44:
            case 45:
            case 47:
            case 54:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_1;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 44:
              jj_consume_token(44);
              v = jj_consume_token(IDENTIFIER);
                                               e = new ASTRecExpression(e, v.image);
              break;
            case 45:
              jj_consume_token(45);
              idx = BIExpression();
              jj_consume_token(46);
                                                         e = new ASTArrayExpression(e, idx);
              break;
            default:
              jj_la1[10] = jj_gen;
              if (jj_2_4(2)) {
                label_2:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case 47:
                    ;
                    break;
                  default:
                    jj_la1[3] = jj_gen;
                    break label_2;
                  }
                  jj_consume_token(47);
                                              if (bits == null) bits = new ArrayList<ASTExpression>();
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case IDENTIFIER:
                    v = jj_consume_token(IDENTIFIER);
                                                           bits.add(new ASTVariableExpression(v.image));
                    break;
                  case 42:
                    jj_consume_token(42);
                    bit = BIExpression();
                    jj_consume_token(43);
                                                                             bits.add(bit);
                    break;
                  case LOG:
                    jj_consume_token(LOG);
                    jj_consume_token(42);
                    bit = BIExpression();
                    jj_consume_token(43);
                                                                               bits.add(new ASTLogExpression(bit));
                    break;
                  default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case 54:
                  var = TypeVariablesInExp();
                  break;
                default:
                  jj_la1[5] = jj_gen;
                  ;
                }
                jj_consume_token(42);
                                e = new ASTFuncExpression(e, bits, var);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case LOG:
                case IDENTIFIER:
                case 42:
                  if (jj_2_2(2)) {
                    v = jj_consume_token(IDENTIFIER);
                    jj_consume_token(48);
                    par = BIExpression();
                                                  ((ASTFuncExpression)e).addInputs(v.image, par);
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case LOG:
                    case IDENTIFIER:
                    case 42:
                      par = BIExpression();
                                                        ((ASTFuncExpression)e).addInputs(par);
                      break;
                    default:
                      jj_la1[6] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                  label_3:
                  while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case 49:
                      ;
                      break;
                    default:
                      jj_la1[7] = jj_gen;
                      break label_3;
                    }
                    jj_consume_token(49);
                    if (jj_2_3(2)) {
                      v = jj_consume_token(IDENTIFIER);
                      jj_consume_token(48);
                      par = BIExpression();
                                                        ((ASTFuncExpression)e).addInputs(v.image, par);
                    } else {
                      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                      case INTEGER_LITERAL:
                      case FLOATING_POINT_LITERAL:
                      case LOG:
                      case IDENTIFIER:
                      case 42:
                        par = BIExpression();
                                                                         ((ASTFuncExpression)e).addInputs(par);
                        break;
                      default:
                        jj_la1[8] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                      }
                    }
                  }
                  break;
                default:
                  jj_la1[9] = jj_gen;
                  ;
                }
                jj_consume_token(43);
                                      bits = null;
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 50:
          case 52:
            if (jj_2_5(2)) {
              jj_consume_token(50);
                                   rangel = ranger = null;
              rangel = RangeExpression();
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 51:
                jj_consume_token(51);
                ranger = RangeExpression();
                break;
              default:
                jj_la1[11] = jj_gen;
                ;
              }
              jj_consume_token(50);
                                e = new ASTRangeExpression(e, rangel, ranger);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 52:
                jj_consume_token(52);
                par = Expression();
                                if (!(par instanceof ASTTupleExpression))
                                        par = new ASTTupleExpression(par);
                jj_consume_token(43);
                        e = new ASTRecTupleExpression(e, (ASTTupleExpression)par);
                break;
              default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          {if (true) return e;}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTProgram TranslationUnit() throws ParseException {
        Token name;
        ASTType t;
        ASTFunction f, b;
                program = new ASTProgram();
                def.clear();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      PreDefine();
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case VOID:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case STRUCT:
      case NATIVE:
      case DUMMY:
      case TYPEDEF:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
      case TYPEDEF:
        TypeDefinition();
        break;
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case VOID:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case NATIVE:
      case DUMMY:
      case IDENTIFIER:
        FunctionDefinition();
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  final public void PreDefine() throws ParseException {
        Token v;
        ASTExpression exp;
    jj_consume_token(53);
    v = jj_consume_token(IDENTIFIER);
    exp = Expression();
                System.out.println(v.image+"\u005ct=\u005ct"+exp);
                def.put(v.image, exp);
  }

  final public void TypeDefinition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      StructDef();
      break;
    case TYPEDEF:
      TypeDef();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public List<ASTType> TypeVariablesInExp() throws ParseException {
        ASTType tyVar;
        List<ASTType> ret = new ArrayList<ASTType>();
    jj_consume_token(54);
    tyVar = Type(ASTLabel.Secure);
                                            ret.add(tyVar);
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(49);
      tyVar = Type(ASTLabel.Secure);
                                                                  ret.add(tyVar);
    }
    jj_consume_token(55);
                                                                                             {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List<ASTType> TypeVariables() throws ParseException {
        ASTType tyVar;
        List<ASTType> ret = new ArrayList<ASTType>();
    jj_consume_token(56);
    tyVar = Type(ASTLabel.Secure);
                                            ret.add(tyVar);
    label_7:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(49);
      tyVar = Type(ASTLabel.Secure);
                                                                  ret.add(tyVar);
    }
    jj_consume_token(57);
                                                                                             {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public int Constant() throws ParseException {
        Token n;
    n = jj_consume_token(INTEGER_LITERAL);
                                {if (true) return util.Helper.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public double FloatConstant() throws ParseException {
        Token n;
    n = jj_consume_token(FLOATING_POINT_LITERAL);
                                       {if (true) return Double.parseDouble(n.image);}
    throw new Error("Missing return statement in function");
  }

  final public void StructDef() throws ParseException {
        Token v;
        ASTRecType type;
        ASTType tyVar;
        List<ASTType> var;
    jj_consume_token(STRUCT);
    v = jj_consume_token(IDENTIFIER);
                                    type = new ASTRecType(v.image, ASTLabel.Secure);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      jj_consume_token(47);
      v = jj_consume_token(IDENTIFIER);
                                                        type.bitVariables.add(new ASTVariableExpression(v.image));
                                                        if(!program.typeBitVarDef.containsKey(type.name))
                                                                program.typeBitVarDef.put(type.name, new ArrayList<ASTExpression>());
                                                        program.typeBitVarDef.get(type.name).add(new ASTVariableExpression(v.image));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      var = TypeVariables();
                  type.typeVariables = var;
                  program.typeVarDef.put(type.name, var);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(54);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case NATIVE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_9;
      }
      tyVar = Type(ASTLabel.Secure);
      v = jj_consume_token(IDENTIFIER);
                                type.fields.add(v.image);
                                type.fieldsType.put(v.image, tyVar);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_10;
        }
        jj_consume_token(49);
        v = jj_consume_token(IDENTIFIER);
                                        type.fields.add(v.image);
                                        type.fieldsType.put(v.image, tyVar);
      }
      jj_consume_token(58);
    }
    jj_consume_token(55);
    jj_consume_token(58);
                  this.program.typeDef.add(new Pair<String, ASTType>(type.name, type));
  }

  final public void TypeDef() throws ParseException {
        String name;
        Token v;
        ASTVariableType type;
        ASTType tmp;
        List<ASTType> inputs = null;
        List<ASTType> var = null;
        ASTLabel label = ASTLabel.Secure;
    jj_consume_token(TYPEDEF);
    v = jj_consume_token(IDENTIFIER);
                                     name = v.image; type = new ASTVariableType(v.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(47);
      v = jj_consume_token(IDENTIFIER);
                                                        type.bitVars.add(new ASTVariableExpression(v.image));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      var = TypeVariables();
                                     type.typeVars = var;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case 42:
            name = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        v = jj_consume_token(IDENTIFIER);
                                                name = v.image;
                                                                    var = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
          var = TypeVariables();
                                     type.typeVars = var;
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(42);
               inputs = new ArrayList<ASTType>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case NATIVE:
      case IDENTIFIER:
        tmp = Type(ASTLabel.Secure);
                                                                                   inputs.add(tmp);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[28] = jj_gen;
            break label_12;
          }
          jj_consume_token(49);
          tmp = Type(ASTLabel.Secure);
                                                                                                                                         inputs.add(tmp);
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      jj_consume_token(43);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(48);
    tmp = Type(ASTLabel.Secure);
                if(tmp instanceof ASTNativeType) {
                        for (int w = 0; w < type.bitVars.size(); ++ w) {
                                ((ASTNativeType)tmp).bitVariables.add(((ASTVariableExpression)type.bitVars.get(w)).var);
                        }
                }
                if(inputs == null) {
                        program.typeBitVarDef.put(name, type.bitVars);
                        program.typeVarDef.put(name, type.typeVars);
                        program.typeDef.add(new Pair<String, ASTType>(name, tmp));
                } else {
                        ASTFunctionType fty = new ASTFunctionType(type, name, inputs, true);
                        if(var != null) {
                                for(ASTType ty : var) {
                                        fty.typeParameter.add(ty);
                                }
                        }
                        program.functionTypeMapping.add(new Pair<ASTFunctionType, ASTType>(fty, tmp));
                }
    jj_consume_token(58);
  }

  final public ASTLabel Label() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALICE:
      jj_consume_token(ALICE);
                    {if (true) return ASTLabel.Alice;}
      break;
    case BOB:
      jj_consume_token(BOB);
                  {if (true) return ASTLabel.Bob;}
      break;
    case SECURE:
      jj_consume_token(SECURE);
                     {if (true) return ASTLabel.Secure;}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                     {if (true) return ASTLabel.Pub;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTType Type(ASTLabel defaultLabel) throws ParseException {
        ASTType type;
        ASTLabel lab = defaultLabel;
        Token v;
        int bit;
        Token bitVar;
        ASTExpression bitExp = null;
        List<ASTExpression> dim = new ArrayList<ASTExpression>();
        List<ASTLabel> labs = new ArrayList<ASTLabel>();
        ASTExpression number;
        List<ASTType> var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NATIVE:
      jj_consume_token(NATIVE);
      v = jj_consume_token(IDENTIFIER);
                                    {if (true) return new ASTNativeType(v.image, new ArrayList<String>());}
      break;
    case INT_TYPE:
    case RND_TYPE:
    case FLOAT_TYPE:
    case ALICE:
    case BOB:
    case SECURE:
    case PUBLIC:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALICE:
        case BOB:
        case SECURE:
        case PUBLIC:
          lab = Label();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT_TYPE:
          v = jj_consume_token(INT_TYPE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            jj_consume_token(47);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              bit = Constant();
                                                    bitExp = new ASTConstantExpression(bit);
              break;
            case IDENTIFIER:
              bitVar = jj_consume_token(IDENTIFIER);
                                                                  bitExp = new ASTVariableExpression(bitVar.image);
              break;
            case 42:
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
              break;
            case LOG:
              jj_consume_token(LOG);
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
                                                                              bitExp = new ASTLogExpression(bitExp);
              break;
            default:
              jj_la1[33] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
                        if(v.image.length() > 3)
                                bit = Integer.parseInt(v.image.substring(3));
                        else
                                bit = -1;
                        if(bit >= 0 && bitExp != null)
                                {if (true) throw new RuntimeException("too many bit information!");}
                        if(bit >= 0) bitExp = new ASTConstantExpression(bit);
                        type = ASTIntType.get(bitExp, lab);
          break;
        case FLOAT_TYPE:
          v = jj_consume_token(FLOAT_TYPE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            jj_consume_token(47);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              bit = Constant();
                                                    bitExp = new ASTConstantExpression(bit);
              break;
            case IDENTIFIER:
              bitVar = jj_consume_token(IDENTIFIER);
                                                                  bitExp = new ASTVariableExpression(bitVar.image);
              break;
            case 42:
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
              break;
            case LOG:
              jj_consume_token(LOG);
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
                                                                              bitExp = new ASTLogExpression(bitExp);
              break;
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }
                        if(v.image.length() > 5)
                                bit = Integer.parseInt(v.image.substring(5));
                        else
                                bit = -1;
                        if(bit >= 0 && bitExp != null)
                                {if (true) throw new RuntimeException("too many bit information!");}
                        if(bit >= 0) bitExp = new ASTConstantExpression(bit);
                        type = ASTFloatType.get(bitExp, lab);
          break;
        case RND_TYPE:
          v = jj_consume_token(RND_TYPE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            jj_consume_token(47);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              bit = Constant();
                                                    bitExp = new ASTConstantExpression(bit);
              break;
            case IDENTIFIER:
              bitVar = jj_consume_token(IDENTIFIER);
                                                                  bitExp = new ASTVariableExpression(bitVar.image);
              break;
            case 42:
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
              break;
            case LOG:
              jj_consume_token(LOG);
              jj_consume_token(42);
              bitExp = BIExpression();
              jj_consume_token(43);
                                                                              bitExp = new ASTLogExpression(bitExp);
              break;
            default:
              jj_la1[37] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[38] = jj_gen;
            ;
          }
                        if(v.image.length() > 3)
                                bit = Integer.parseInt(v.image.substring(3));
                        else
                                bit = -1;
                        if(bit >= 0 && bitExp != null)
                                {if (true) throw new RuntimeException("too many bit information!");}
                        if(bit >= 0) bitExp = new ASTConstantExpression(bit);
                        type = ASTRndType.get(bitExp, lab);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case IDENTIFIER:
        v = jj_consume_token(IDENTIFIER);
                                     type = new ASTVariableType(v.image);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 47:
            ;
            break;
          default:
            jj_la1[40] = jj_gen;
            break label_13;
          }
          jj_consume_token(47);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            bit = Constant();
                                              bitExp = new ASTConstantExpression(bit);
            break;
          case IDENTIFIER:
            bitVar = jj_consume_token(IDENTIFIER);
                                                                  bitExp = new ASTVariableExpression(bitVar.image);
            break;
          case 42:
            jj_consume_token(42);
            bitExp = BIExpression();
            jj_consume_token(43);
            break;
          case LOG:
            jj_consume_token(LOG);
            jj_consume_token(42);
            bitExp = BIExpression();
            jj_consume_token(43);
                                                                              bitExp = new ASTLogExpression(bitExp);
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                          ((ASTVariableType)type).bitVars.add(bitExp);
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        var = TypeVariables();
                                    ((ASTVariableType)type).typeVars = var;
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_14;
        }
        jj_consume_token(45);
                 lab = defaultLabel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALICE:
        case BOB:
        case SECURE:
        case PUBLIC:
          lab = Label();
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        number = BIExpression();
                          dim.add(number); labs.add(lab);
        jj_consume_token(46);
      }
                for (int i = dim.size() - 1; i>=0; --i) {
                        ASTExpression num = dim.get(i);
                        ASTLabel l = labs.get(i);
                        type = new ASTArrayType(type, num, l);
                }
                {if (true) return type;}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void FunctionDefinition() throws ParseException {
        boolean isDummy = false;
        ASTType retType;
        ASTType baseType = null;
        Token v, v1, v2;
        String name;
        List<Pair<ASTType, String>> inputs = new ArrayList<Pair<ASTType, String>>();
        Pair<ASTType, String> arg;
        ASTType ty;
        List<ASTStatement> stmt;
        List<String> typeVariables = new ArrayList<String>();
        List<ASTType> var1 = null, var2;

        List<String> bitParameter = new ArrayList<String>();

        String nativeName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DUMMY:
      jj_consume_token(DUMMY);
                   isDummy = true;
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                   retType = ASTVoidType.get();
      break;
    case INT_TYPE:
    case RND_TYPE:
    case FLOAT_TYPE:
    case ALICE:
    case BOB:
    case SECURE:
    case PUBLIC:
    case NATIVE:
    case IDENTIFIER:
      retType = Type(ASTLabel.Secure);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_9(10)) {
      baseType = Type(ASTLabel.Secure);
      jj_consume_token(44);
    } else {
      ;
    }
    v = jj_consume_token(IDENTIFIER);
                                   name = v.image;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[49] = jj_gen;
        break label_15;
      }
      jj_consume_token(47);
      v = jj_consume_token(IDENTIFIER);
                                         bitParameter.add(v.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      v = jj_consume_token(IDENTIFIER);
                                         typeVariables.add(v.image);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_16;
        }
        jj_consume_token(49);
        v = jj_consume_token(IDENTIFIER);
                                                                                               typeVariables.add(v.image);
      }
      jj_consume_token(57);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_TYPE:
    case RND_TYPE:
    case FLOAT_TYPE:
    case ALICE:
    case BOB:
    case SECURE:
    case PUBLIC:
    case NATIVE:
    case IDENTIFIER:
      arg = Argument();
                                                   inputs.add(arg);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_17;
        }
        jj_consume_token(49);
        arg = Argument();
                                                               inputs.add(arg);
      }
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(43);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      jj_consume_token(48);
      jj_consume_token(NATIVE);
      v = jj_consume_token(IDENTIFIER);
                                                nativeName = v.image;
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_18;
        }
        jj_consume_token(44);
        v = jj_consume_token(IDENTIFIER);
                                                                                                nativeName += "." + v.image;
      }
                        ASTFunctionNative nfunc =
                                new ASTFunctionNative(isDummy, name, retType, baseType, typeVariables, inputs);
                        nfunc.nativeName = nativeName;
                        program.functionDef.add(nfunc);
      jj_consume_token(58);
      break;
    case 54:
      jj_consume_token(54);
                        ASTFunctionDef dfunc =
                                new ASTFunctionDef(isDummy, name, retType, baseType,
                                        bitParameter,
                                        typeVariables, inputs);
      stmt = Statements(dfunc);
      jj_consume_token(55);
                        dfunc.body = stmt;
                        program.functionDef.add(dfunc);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Pair<ASTType, String> Argument() throws ParseException {
        ASTType ty;
        ASTFunctionType fty;
        Token v;
        List<ASTType> tyVar = null;
    ty = Type(ASTLabel.Secure);
    v = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 42:
    case 54:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        tyVar = TypeVariablesInExp();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(42);
                                                 fty = new ASTFunctionType(ty, v.image, false);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case NATIVE:
      case IDENTIFIER:
        ty = Type(ASTLabel.Secure);
                                                fty.inputTypes.add(ty);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[57] = jj_gen;
            break label_19;
          }
          jj_consume_token(49);
          ty = Type(ASTLabel.Secure);
                                                          fty.inputTypes.add(ty);
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(43);
              ty = fty; fty.typeParameter = tyVar;
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
          {if (true) return new Pair<ASTType, String>(ty, v.image);}
    throw new Error("Missing return statement in function");
  }

  final public List<ASTStatement> Statements(ASTFunctionDef func) throws ParseException {
        List<ASTStatement> stmt = new ArrayList<ASTStatement>();
        List<ASTStatement> tmps;
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case INT_TYPE:
      case RND_TYPE:
      case FLOAT_TYPE:
      case FLOATING_POINT_LITERAL:
      case WHILE:
      case ALICE:
      case BOB:
      case SECURE:
      case PUBLIC:
      case NATIVE:
      case FOR:
      case LOG:
      case IF:
      case RETURN:
      case IDENTIFIER:
      case 42:
      case 54:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_20;
      }
      tmps = Statement(func);
                                  stmt.addAll(tmps);
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public List<ASTStatement> Statement(ASTFunctionDef func) throws ParseException {
        List<ASTStatement> stmt = new ArrayList<ASTStatement>();
        List<ASTStatement> init;
        List<ASTStatement> incre;
        ASTType ty;
        Token v;
        ASTExpression exp;
        ASTExpression var;
        ASTPredicate cond;
        ASTIfStatement ifStmt;
        ASTWhileStatement whileStmt;
    if (jj_2_11(10)) {
      ty = Type(ASTLabel.Secure);
      v = jj_consume_token(IDENTIFIER);
                        func.localVariables.add(new Pair<ASTType, String>(ty, v.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        exp = BIExpression();
                                stmt.add(new ASTAssignStatement(new ASTVariableExpression(v.image), exp));
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_21;
        }
        jj_consume_token(49);
        v = jj_consume_token(IDENTIFIER);
                                        func.localVariables.add(new Pair<ASTType, String>(ty, v.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          jj_consume_token(48);
          exp = BIExpression();
                                        stmt.add(new ASTAssignStatement(new ASTVariableExpression(v.image), exp));
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
      }
      jj_consume_token(58);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case LOG:
      case IDENTIFIER:
      case 42:
        var = Expression();
                                       exp = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          jj_consume_token(48);
          exp = Expression();
          break;
        default:
          jj_la1[64] = jj_gen;
          ;
        }
        jj_consume_token(58);
                                if(exp != null)
                                        stmt.add(new ASTAssignStatement(var, exp));
                                else {
                                        if (!(var instanceof ASTFuncExpression))
                                                {if (true) throw new RuntimeException("Function call required!");}
                                        else
                                                stmt.add(new ASTFuncStatement((ASTFuncExpression)var));
                                }
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(42);
        cond = Predicate();
        jj_consume_token(43);
                                                    ifStmt = new ASTIfStatement(cond);
        ifStmt.trueBranch = Statement(func);
        if (jj_2_10(2)) {
          jj_consume_token(ELSE);
          ifStmt.falseBranch = Statement(func);
        } else {
          ;
        }
                          stmt.add(ifStmt);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(42);
        cond = Predicate();
        jj_consume_token(43);
                                                       whileStmt = new ASTWhileStatement(cond);
        whileStmt.body = Statement(func);
                          stmt.add(whileStmt);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(42);
        init = Statement(func);
        cond = Predicate();
        jj_consume_token(58);
                          incre = new ArrayList<ASTStatement>();
        var = Expression();
        jj_consume_token(48);
        exp = Expression();
                          incre.add(new ASTAssignStatement(var, exp));
        jj_consume_token(43);
                                stmt.addAll(init);
                                whileStmt = new ASTWhileStatement(cond);
        whileStmt.body = Statement(func);
                                whileStmt.body.addAll(incre);
                                stmt.add(whileStmt);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        exp = Expression();
        jj_consume_token(58);
                                                    stmt.add(new ASTReturnStatement(exp));
        break;
      case 54:
        jj_consume_token(54);
        stmt = Statements(func);
        jj_consume_token(55);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression Expression() throws ParseException {
        ASTExpression e, e2;
    e = BIExpression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_22;
      }
      jj_consume_token(49);
      e2 = BIExpression();
                if (!(e instanceof ASTTupleExpression)) {
                        e = new ASTTupleExpression(e, e2);
                } else {
                        ((ASTTupleExpression)e).exps.add(e2);
                }
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression BIExpression() throws ParseException {
        ASTExpression e;
        ASTExpression n;
    e = ShiftExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
      case 60:
      case 61:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        jj_consume_token(59);
        n = ShiftExpression();
                                                    e = new ASTBinaryExpression(e, BOP.AND, n);
        break;
      case 60:
        jj_consume_token(60);
        n = ShiftExpression();
                                                      e = new ASTBinaryExpression(e, BOP.OR, n);
        break;
      case 61:
        jj_consume_token(61);
        n = ShiftExpression();
                                                      e = new ASTBinaryExpression(e, BOP.XOR, n);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression ShiftExpression() throws ParseException {
        ASTExpression e;
        ASTExpression n;
    e = AdditiveExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        jj_consume_token(62);
        n = AdditiveExpression();
                                e = new ASTBinaryExpression(e, BOP.SHL, n);
        break;
      case 63:
        jj_consume_token(63);
        n = AdditiveExpression();
                                e = new ASTBinaryExpression(e, BOP.SHR, n);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression RangeExpression() throws ParseException {
        ASTExpression e;
        ASTExpression n;
    e = RangeShiftExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
      case 60:
      case 61:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        jj_consume_token(59);
        n = RangeShiftExpression();
                                                 e = new ASTBinaryExpression(e, BOP.AND, n);
        break;
      case 60:
        jj_consume_token(60);
        n = RangeShiftExpression();
                                                   e = new ASTBinaryExpression(e, BOP.OR, n);
        break;
      case 61:
        jj_consume_token(61);
        n = RangeShiftExpression();
                                                   e = new ASTBinaryExpression(e, BOP.XOR, n);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
             {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression RangeShiftExpression() throws ParseException {
        ASTExpression e;
        ASTExpression n;
    e = RangeAdditiveExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
      case 63:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 62:
        jj_consume_token(62);
        n = RangeAdditiveExpression();
                                e = new ASTBinaryExpression(e, BOP.SHL, n);
        break;
      case 63:
        jj_consume_token(63);
        n = RangeAdditiveExpression();
                                e = new ASTBinaryExpression(e, BOP.SHR, n);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression ConstantExpression() throws ParseException {
        int n;
        double v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n = Constant();
                         {if (true) return new ASTConstantExpression(n);}
      break;
    case FLOATING_POINT_LITERAL:
      v = FloatConstant();
                                {if (true) return new ASTFloatConstantExpression(v);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression VariableExpression() throws ParseException {
        Token v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      v = jj_consume_token(IDENTIFIER);
                if (def.containsKey(v.image))
                        {if (true) return def.get(v.image);}
                else
                        {if (true) return new ASTVariableExpression(v.image);}
      break;
    case LOG:
      jj_consume_token(LOG);
                {if (true) return new ASTVariableExpression("log");}
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression AdditiveExpression() throws ParseException {
        ASTExpression e1, e2;
    e1 = MultiplictiveExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
      case 65:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        e2 = MultiplictiveExpression();
                                               e1 = new ASTBinaryExpression(e1, BOP.ADD, e2);
        break;
      case 65:
        jj_consume_token(65);
        e2 = MultiplictiveExpression();
                                               e1 = new ASTBinaryExpression(e1, BOP.SUB, e2);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression RangeAdditiveExpression() throws ParseException {
        ASTExpression e1, e2;
    e1 = RangeMultiplictiveExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
      case 65:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
        e2 = RangeMultiplictiveExpression();
                                                    e1 = new ASTBinaryExpression(e1, BOP.ADD, e2);
        break;
      case 65:
        jj_consume_token(65);
        e2 = RangeMultiplictiveExpression();
                                                    e1 = new ASTBinaryExpression(e1, BOP.SUB, e2);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression MultiplictiveExpression() throws ParseException {
        ASTExpression e1, e2;
    e1 = AtomicExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        jj_consume_token(66);
        e2 = AtomicExpression();
                                        e1 = new ASTBinaryExpression(e1, BOP.MUL, e2);
        break;
      case 67:
        jj_consume_token(67);
        e2 = AtomicExpression();
                                        e1 = new ASTBinaryExpression(e1, BOP.DIV, e2);
        break;
      case 68:
        jj_consume_token(68);
        e2 = AtomicExpression();
                                        e1 = new ASTBinaryExpression(e1, BOP.MOD, e2);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression RangeMultiplictiveExpression() throws ParseException {
        ASTExpression e1, e2;
    e1 = RangeAtomicExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
      case 67:
      case 68:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
        jj_consume_token(66);
        e2 = RangeAtomicExpression();
                                             e1 = new ASTBinaryExpression(e1, BOP.MUL, e2);
        break;
      case 67:
        jj_consume_token(67);
        e2 = RangeAtomicExpression();
                                             e1 = new ASTBinaryExpression(e1, BOP.DIV, e2);
        break;
      case 68:
        jj_consume_token(68);
        e2 = RangeAtomicExpression();
                                             e1 = new ASTBinaryExpression(e1, BOP.MOD, e2);
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTPredicate Predicate() throws ParseException {
        ASTPredicate e;
    e = OrPredicate();
                            {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ASTPredicate OrPredicate() throws ParseException {
        ASTPredicate e1, e2 = null;
    e1 = AndPredicate();
    label_31:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_31;
      }
      jj_consume_token(69);
      e2 = OrPredicate();
                if(e2 != null)
                        e1 = new ASTOrPredicate(e1, e2);
    }
                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTPredicate AndPredicate() throws ParseException {
        ASTPredicate e1, e2 = null;
    e1 = AtomicPredicate();
    label_32:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_32;
      }
      jj_consume_token(70);
      e2 = AndPredicate();
                if(e2 != null)
                        e1 = new ASTAndPredicate(e1, e2);
    }
          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public ASTPredicate AtomicPredicate() throws ParseException {
        ASTPredicate p;
    if (jj_2_14(3)) {
      p = BinaryPredicate();
                                             {if (true) return p;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        p = Predicate();
        jj_consume_token(43);
                                    {if (true) return p;}
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTPredicate BinaryPredicate() throws ParseException {
        ASTExpression e1, e2;
        REL_OP op;
    e1 = BIExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 71:
      jj_consume_token(71);
                 op = REL_OP.EQ;
      e2 = BIExpression();
      break;
    case 72:
      jj_consume_token(72);
                 op = REL_OP.NEQ;
      e2 = BIExpression();
      break;
    case 57:
      jj_consume_token(57);
                op = REL_OP.GT;
      e2 = BIExpression();
      break;
    case 73:
      jj_consume_token(73);
                 op = REL_OP.GET;
      e2 = BIExpression();
      break;
    case 56:
      jj_consume_token(56);
                op = REL_OP.LT;
      e2 = BIExpression();
      break;
    case 74:
      jj_consume_token(74);
                 op = REL_OP.LET;
      e2 = BIExpression();
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ASTBinaryPredicate(e1, op, e2);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(SECURE)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(BOB)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(ALICE)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_152()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LOG)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(57)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(45)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(RND_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(49)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(FLOAT_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(INT_TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LOG)) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(44)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public CParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[87];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80800,0x0,0x0,0x0,0x0,0x0,0x80800,0x0,0x80800,0x80800,0x0,0x0,0x0,0x0,0x80800,0x0,0x0,0xfe01c000,0xfe01c000,0x40000000,0x0,0x0,0xbc01c000,0x0,0x0,0x0,0x0,0x0,0x0,0xbc01c000,0x0,0x3c000000,0x3c000000,0x800,0x0,0x800,0x0,0x800,0x0,0x1c000,0x0,0x800,0x3c01c000,0x0,0x0,0x3c000000,0xbc01c000,0x0,0xbe01c000,0x0,0x0,0x0,0x0,0xbc01c000,0x0,0x0,0x0,0x0,0xbc01c000,0x0,0xbc89c800,0x0,0x0,0x0,0x0,0x880800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x90,0x40b400,0x8000,0x490,0x400000,0x490,0x20000,0x490,0x490,0x3000,0x80000,0x100000,0x140000,0x0,0x90,0x200000,0x83,0x83,0x2,0x8000,0x1000000,0x80,0x20000,0x8000,0x1000000,0x1000000,0x80,0x20000,0x80,0x480,0x0,0x0,0x490,0x8000,0x490,0x8000,0x490,0x8000,0x0,0x8000,0x490,0x80,0x1000000,0x2000,0x0,0x80,0x1,0x80,0x8000,0x20000,0x1000000,0x20000,0x80,0x1000,0x410000,0x400000,0x20000,0x80,0x400400,0x4004f4,0x10000,0x20000,0x10000,0x10000,0x4004f4,0x20000,0x38000000,0x38000000,0xc0000000,0xc0000000,0x38000000,0x38000000,0xc0000000,0xc0000000,0x0,0x90,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x3000000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x3,0x3,0x1c,0x1c,0x1c,0x1c,0x0,0x780,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CParser(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 87; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 87; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
